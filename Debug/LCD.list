
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b0c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007c94  08007c94  00017c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cb0  08007cb0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007cb0  08007cb0  00017cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cb8  08007cb8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cb8  08007cb8  00017cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cbc  08007cbc  00017cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007cc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000940  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009bc  200009bc  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   000146ce  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000383b  00000000  00000000  000347bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001110  00000000  00000000  00037ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cfa  00000000  00000000  00039108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000496e  00000000  00000000  00039e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017a95  00000000  00000000  0003e770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb045  00000000  00000000  00056205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000049e0  00000000  00000000  0012124c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00125c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007c7c 	.word	0x08007c7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08007c7c 	.word	0x08007c7c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fc16 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f80e 	bl	80004ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f90a 	bl	80006e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d4:	f000 f874 	bl	80005c0 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d8:	f000 f8a0 	bl	800061c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004dc:	f000 f8ce 	bl	800067c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e0:	f006 ff78 	bl	80073d4 <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004e4:	f006 ff9c 	bl	8007420 <MX_USB_HOST_Process>
 80004e8:	e7fc      	b.n	80004e4 <main+0x20>
	...

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b094      	sub	sp, #80	; 0x50
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0320 	add.w	r3, r7, #32
 80004f6:	2230      	movs	r2, #48	; 0x30
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f007 fb2e 	bl	8007b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	f107 030c 	add.w	r3, r7, #12
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000510:	2300      	movs	r3, #0
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	4b28      	ldr	r3, [pc, #160]	; (80005b8 <SystemClock_Config+0xcc>)
 8000516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000518:	4a27      	ldr	r2, [pc, #156]	; (80005b8 <SystemClock_Config+0xcc>)
 800051a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051e:	6413      	str	r3, [r2, #64]	; 0x40
 8000520:	4b25      	ldr	r3, [pc, #148]	; (80005b8 <SystemClock_Config+0xcc>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	4b22      	ldr	r3, [pc, #136]	; (80005bc <SystemClock_Config+0xd0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a21      	ldr	r2, [pc, #132]	; (80005bc <SystemClock_Config+0xd0>)
 8000536:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4b1f      	ldr	r3, [pc, #124]	; (80005bc <SystemClock_Config+0xd0>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000548:	2301      	movs	r3, #1
 800054a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800054c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000550:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	2302      	movs	r3, #2
 8000554:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000556:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800055a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800055c:	2308      	movs	r3, #8
 800055e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000560:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000564:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000566:	2302      	movs	r3, #2
 8000568:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800056a:	2307      	movs	r3, #7
 800056c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	4618      	mov	r0, r3
 8000574:	f003 f90c 	bl	8003790 <HAL_RCC_OscConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800057e:	f000 f9d7 	bl	8000930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000582:	230f      	movs	r3, #15
 8000584:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000586:	2301      	movs	r3, #1
 8000588:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800058e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000592:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000598:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f003 fb6d 	bl	8003c80 <HAL_RCC_ClockConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005ac:	f000 f9c0 	bl	8000930 <Error_Handler>
  }
}
 80005b0:	bf00      	nop
 80005b2:	3750      	adds	r7, #80	; 0x50
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40007000 	.word	0x40007000

080005c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <MX_I2C1_Init+0x50>)
 80005c6:	4a13      	ldr	r2, [pc, #76]	; (8000614 <MX_I2C1_Init+0x54>)
 80005c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <MX_I2C1_Init+0x50>)
 80005cc:	4a12      	ldr	r2, [pc, #72]	; (8000618 <MX_I2C1_Init+0x58>)
 80005ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_I2C1_Init+0x50>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_I2C1_Init+0x50>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MX_I2C1_Init+0x50>)
 80005de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <MX_I2C1_Init+0x50>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_I2C1_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <MX_I2C1_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_I2C1_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <MX_I2C1_Init+0x50>)
 80005fe:	f002 fae3 	bl	8002bc8 <HAL_I2C_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000608:	f000 f992 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000098 	.word	0x20000098
 8000614:	40005400 	.word	0x40005400
 8000618:	000186a0 	.word	0x000186a0

0800061c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_I2S3_Init+0x54>)
 8000622:	4a14      	ldr	r2, [pc, #80]	; (8000674 <MX_I2S3_Init+0x58>)
 8000624:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_I2S3_Init+0x54>)
 8000628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800062c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_I2S3_Init+0x54>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000634:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_I2S3_Init+0x54>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800063a:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <MX_I2S3_Init+0x54>)
 800063c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000640:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_I2S3_Init+0x54>)
 8000644:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <MX_I2S3_Init+0x5c>)
 8000646:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_I2S3_Init+0x54>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_I2S3_Init+0x54>)
 8000650:	2200      	movs	r2, #0
 8000652:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_I2S3_Init+0x54>)
 8000656:	2200      	movs	r2, #0
 8000658:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_I2S3_Init+0x54>)
 800065c:	f002 fbf8 	bl	8002e50 <HAL_I2S_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000666:	f000 f963 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200000ec 	.word	0x200000ec
 8000674:	40003c00 	.word	0x40003c00
 8000678:	00017700 	.word	0x00017700

0800067c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000680:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <MX_SPI1_Init+0x64>)
 8000682:	4a18      	ldr	r2, [pc, #96]	; (80006e4 <MX_SPI1_Init+0x68>)
 8000684:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000686:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <MX_SPI1_Init+0x64>)
 8000688:	f44f 7282 	mov.w	r2, #260	; 0x104
 800068c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_SPI1_Init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_SPI1_Init+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_SPI1_Init+0x64>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006bc:	2200      	movs	r2, #0
 80006be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006c8:	220a      	movs	r2, #10
 80006ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006cc:	4804      	ldr	r0, [pc, #16]	; (80006e0 <MX_SPI1_Init+0x64>)
 80006ce:	f003 fe23 	bl	8004318 <HAL_SPI_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006d8:	f000 f92a 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000134 	.word	0x20000134
 80006e4:	40013000 	.word	0x40013000

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	; 0x30
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]
 8000702:	4b85      	ldr	r3, [pc, #532]	; (8000918 <MX_GPIO_Init+0x230>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a84      	ldr	r2, [pc, #528]	; (8000918 <MX_GPIO_Init+0x230>)
 8000708:	f043 0310 	orr.w	r3, r3, #16
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b82      	ldr	r3, [pc, #520]	; (8000918 <MX_GPIO_Init+0x230>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0310 	and.w	r3, r3, #16
 8000716:	61bb      	str	r3, [r7, #24]
 8000718:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	4b7e      	ldr	r3, [pc, #504]	; (8000918 <MX_GPIO_Init+0x230>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a7d      	ldr	r2, [pc, #500]	; (8000918 <MX_GPIO_Init+0x230>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b7b      	ldr	r3, [pc, #492]	; (8000918 <MX_GPIO_Init+0x230>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	4b77      	ldr	r3, [pc, #476]	; (8000918 <MX_GPIO_Init+0x230>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a76      	ldr	r2, [pc, #472]	; (8000918 <MX_GPIO_Init+0x230>)
 8000740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b74      	ldr	r3, [pc, #464]	; (8000918 <MX_GPIO_Init+0x230>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	4b70      	ldr	r3, [pc, #448]	; (8000918 <MX_GPIO_Init+0x230>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a6f      	ldr	r2, [pc, #444]	; (8000918 <MX_GPIO_Init+0x230>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b6d      	ldr	r3, [pc, #436]	; (8000918 <MX_GPIO_Init+0x230>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b69      	ldr	r3, [pc, #420]	; (8000918 <MX_GPIO_Init+0x230>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a68      	ldr	r2, [pc, #416]	; (8000918 <MX_GPIO_Init+0x230>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b66      	ldr	r3, [pc, #408]	; (8000918 <MX_GPIO_Init+0x230>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b62      	ldr	r3, [pc, #392]	; (8000918 <MX_GPIO_Init+0x230>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a61      	ldr	r2, [pc, #388]	; (8000918 <MX_GPIO_Init+0x230>)
 8000794:	f043 0308 	orr.w	r3, r3, #8
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b5f      	ldr	r3, [pc, #380]	; (8000918 <MX_GPIO_Init+0x230>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0308 	and.w	r3, r3, #8
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2108      	movs	r1, #8
 80007aa:	485c      	ldr	r0, [pc, #368]	; (800091c <MX_GPIO_Init+0x234>)
 80007ac:	f000 fde8 	bl	8001380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2101      	movs	r1, #1
 80007b4:	485a      	ldr	r0, [pc, #360]	; (8000920 <MX_GPIO_Init+0x238>)
 80007b6:	f000 fde3 	bl	8001380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2106      	movs	r1, #6
 80007be:	4859      	ldr	r0, [pc, #356]	; (8000924 <MX_GPIO_Init+0x23c>)
 80007c0:	f000 fdde 	bl	8001380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_Pin|LD3_Pin|RED_LED_Pin|LD6_Pin
 80007c4:	2200      	movs	r2, #0
 80007c6:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007ca:	4857      	ldr	r0, [pc, #348]	; (8000928 <MX_GPIO_Init+0x240>)
 80007cc:	f000 fdd8 	bl	8001380 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PB7_GPIO_Port, PB7_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2180      	movs	r1, #128	; 0x80
 80007d4:	4855      	ldr	r0, [pc, #340]	; (800092c <MX_GPIO_Init+0x244>)
 80007d6:	f000 fdd3 	bl	8001380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007da:	2308      	movs	r3, #8
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	484a      	ldr	r0, [pc, #296]	; (800091c <MX_GPIO_Init+0x234>)
 80007f2:	f000 fc29 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4844      	ldr	r0, [pc, #272]	; (8000920 <MX_GPIO_Init+0x238>)
 800080e:	f000 fc1b 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000812:	2308      	movs	r3, #8
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000822:	2305      	movs	r3, #5
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	483c      	ldr	r0, [pc, #240]	; (8000920 <MX_GPIO_Init+0x238>)
 800082e:	f000 fc0b 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000832:	2301      	movs	r3, #1
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000836:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	4619      	mov	r1, r3
 8000846:	4837      	ldr	r0, [pc, #220]	; (8000924 <MX_GPIO_Init+0x23c>)
 8000848:	f000 fbfe 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_EN_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RS_Pin;
 800084c:	2306      	movs	r3, #6
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	4830      	ldr	r0, [pc, #192]	; (8000924 <MX_GPIO_Init+0x23c>)
 8000864:	f000 fbf0 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000868:	2304      	movs	r3, #4
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4619      	mov	r1, r3
 800087a:	482c      	ldr	r0, [pc, #176]	; (800092c <MX_GPIO_Init+0x244>)
 800087c:	f000 fbe4 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000892:	2305      	movs	r3, #5
 8000894:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4823      	ldr	r0, [pc, #140]	; (800092c <MX_GPIO_Init+0x244>)
 800089e:	f000 fbd3 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin LD3_Pin RED_LED_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|LD3_Pin|RED_LED_Pin|LD6_Pin
 80008a2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008a6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	481b      	ldr	r0, [pc, #108]	; (8000928 <MX_GPIO_Init+0x240>)
 80008bc:	f000 fbc4 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008c0:	2320      	movs	r3, #32
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4815      	ldr	r0, [pc, #84]	; (8000928 <MX_GPIO_Init+0x240>)
 80008d4:	f000 fbb8 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7_Pin */
  GPIO_InitStruct.Pin = PB7_Pin;
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PB7_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	480f      	ldr	r0, [pc, #60]	; (800092c <MX_GPIO_Init+0x244>)
 80008f0:	f000 fbaa 	bl	8001048 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008f4:	2302      	movs	r3, #2
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008f8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_GPIO_Init+0x234>)
 800090a:	f000 fb9d 	bl	8001048 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090e:	bf00      	nop
 8000910:	3730      	adds	r7, #48	; 0x30
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800
 800091c:	40021000 	.word	0x40021000
 8000920:	40020800 	.word	0x40020800
 8000924:	40020000 	.word	0x40020000
 8000928:	40020c00 	.word	0x40020c00
 800092c:	40020400 	.word	0x40020400

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000938:	e7fe      	b.n	8000938 <Error_Handler+0x8>
	...

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <HAL_MspInit+0x4c>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	4a0f      	ldr	r2, [pc, #60]	; (8000988 <HAL_MspInit+0x4c>)
 800094c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000950:	6453      	str	r3, [r2, #68]	; 0x44
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <HAL_MspInit+0x4c>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <HAL_MspInit+0x4c>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a08      	ldr	r2, [pc, #32]	; (8000988 <HAL_MspInit+0x4c>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800097a:	2007      	movs	r0, #7
 800097c:	f000 fb22 	bl	8000fc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40023800 	.word	0x40023800

0800098c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a19      	ldr	r2, [pc, #100]	; (8000a10 <HAL_I2C_MspInit+0x84>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d12c      	bne.n	8000a08 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <HAL_I2C_MspInit+0x88>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <HAL_I2C_MspInit+0x88>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <HAL_I2C_MspInit+0x88>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = PB6_Pin|Audio_SDA_Pin;
 80009ca:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d0:	2312      	movs	r3, #18
 80009d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009dc:	2304      	movs	r3, #4
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	480c      	ldr	r0, [pc, #48]	; (8000a18 <HAL_I2C_MspInit+0x8c>)
 80009e8:	f000 fb2e 	bl	8001048 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <HAL_I2C_MspInit+0x88>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <HAL_I2C_MspInit+0x88>)
 80009f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009fa:	6413      	str	r3, [r2, #64]	; 0x40
 80009fc:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <HAL_I2C_MspInit+0x88>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a08:	bf00      	nop
 8000a0a:	3728      	adds	r7, #40	; 0x28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40005400 	.word	0x40005400
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40020400 	.word	0x40020400

08000a1c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08e      	sub	sp, #56	; 0x38
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a31      	ldr	r2, [pc, #196]	; (8000b0c <HAL_I2S_MspInit+0xf0>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d15a      	bne.n	8000b02 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a50:	23c0      	movs	r3, #192	; 0xc0
 8000a52:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f003 fb1b 	bl	8004098 <HAL_RCCEx_PeriphCLKConfig>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a68:	f7ff ff62 	bl	8000930 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <HAL_I2S_MspInit+0xf4>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	4a26      	ldr	r2, [pc, #152]	; (8000b10 <HAL_I2S_MspInit+0xf4>)
 8000a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7c:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <HAL_I2S_MspInit+0xf4>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <HAL_I2S_MspInit+0xf4>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a90:	4a1f      	ldr	r2, [pc, #124]	; (8000b10 <HAL_I2S_MspInit+0xf4>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	6313      	str	r3, [r2, #48]	; 0x30
 8000a98:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <HAL_I2S_MspInit+0xf4>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <HAL_I2S_MspInit+0xf4>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	4a18      	ldr	r2, [pc, #96]	; (8000b10 <HAL_I2S_MspInit+0xf4>)
 8000aae:	f043 0304 	orr.w	r3, r3, #4
 8000ab2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab4:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <HAL_I2S_MspInit+0xf4>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	f003 0304 	and.w	r3, r3, #4
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = LCD_D4_Pin;
 8000ac0:	2310      	movs	r3, #16
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ad0:	2306      	movs	r3, #6
 8000ad2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_D4_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad8:	4619      	mov	r1, r3
 8000ada:	480e      	ldr	r0, [pc, #56]	; (8000b14 <HAL_I2S_MspInit+0xf8>)
 8000adc:	f000 fab4 	bl	8001048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ae0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000af2:	2306      	movs	r3, #6
 8000af4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afa:	4619      	mov	r1, r3
 8000afc:	4806      	ldr	r0, [pc, #24]	; (8000b18 <HAL_I2S_MspInit+0xfc>)
 8000afe:	f000 faa3 	bl	8001048 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b02:	bf00      	nop
 8000b04:	3738      	adds	r7, #56	; 0x38
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40003c00 	.word	0x40003c00
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020000 	.word	0x40020000
 8000b18:	40020800 	.word	0x40020800

08000b1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a19      	ldr	r2, [pc, #100]	; (8000ba0 <HAL_SPI_MspInit+0x84>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d12b      	bne.n	8000b96 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <HAL_SPI_MspInit+0x88>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	4a17      	ldr	r2, [pc, #92]	; (8000ba4 <HAL_SPI_MspInit+0x88>)
 8000b48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <HAL_SPI_MspInit+0x88>)
 8000b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <HAL_SPI_MspInit+0x88>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a10      	ldr	r2, [pc, #64]	; (8000ba4 <HAL_SPI_MspInit+0x88>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <HAL_SPI_MspInit+0x88>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 8000b76:	23e0      	movs	r3, #224	; 0xe0
 8000b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b86:	2305      	movs	r3, #5
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <HAL_SPI_MspInit+0x8c>)
 8000b92:	f000 fa59 	bl	8001048 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b96:	bf00      	nop
 8000b98:	3728      	adds	r7, #40	; 0x28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40013000 	.word	0x40013000
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <NMI_Handler+0x4>

08000bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <MemManage_Handler+0x4>

08000bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf8:	f000 f8d0 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <OTG_FS_IRQHandler+0x10>)
 8000c06:	f000 fe3f 	bl	8001888 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000570 	.word	0x20000570

08000c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c1c:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <_sbrk+0x5c>)
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <_sbrk+0x60>)
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d102      	bne.n	8000c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <_sbrk+0x64>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <_sbrk+0x68>)
 8000c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d207      	bcs.n	8000c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c44:	f006 ffa2 	bl	8007b8c <__errno>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c52:	e009      	b.n	8000c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <_sbrk+0x64>)
 8000c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c66:	68fb      	ldr	r3, [r7, #12]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20020000 	.word	0x20020000
 8000c74:	00000400 	.word	0x00000400
 8000c78:	2000018c 	.word	0x2000018c
 8000c7c:	200009c0 	.word	0x200009c0

08000c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000caa:	490e      	ldr	r1, [pc, #56]	; (8000ce4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc0:	4c0b      	ldr	r4, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cce:	f7ff ffd7 	bl	8000c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f006 ff61 	bl	8007b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd6:	f7ff fbf5 	bl	80004c4 <main>
  bx  lr    
 8000cda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000ce8:	08007cc0 	.word	0x08007cc0
  ldr r2, =_sbss
 8000cec:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000cf0:	200009bc 	.word	0x200009bc

08000cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <HAL_Init+0x40>)
 8000d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_Init+0x40>)
 8000d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_Init+0x40>)
 8000d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 f94f 	bl	8000fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d26:	2000      	movs	r0, #0
 8000d28:	f000 f808 	bl	8000d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2c:	f7ff fe06 	bl	800093c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023c00 	.word	0x40023c00

08000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x54>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x58>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 f967 	bl	800102e <HAL_SYSTICK_Config>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00e      	b.n	8000d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d80a      	bhi.n	8000d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f000 f92f 	bl	8000fda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d7c:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <HAL_InitTick+0x5c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e000      	b.n	8000d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000008 	.word	0x20000008
 8000d98:	20000004 	.word	0x20000004

08000d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	20000190 	.word	0x20000190

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000190 	.word	0x20000190

08000ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de4:	f7ff ffee 	bl	8000dc4 <HAL_GetTick>
 8000de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df4:	d005      	beq.n	8000e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_Delay+0x44>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e02:	bf00      	nop
 8000e04:	f7ff ffde 	bl	8000dc4 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d8f7      	bhi.n	8000e04 <HAL_Delay+0x28>
  {
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008

08000e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e56:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	60d3      	str	r3, [r2, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <__NVIC_GetPriorityGrouping+0x18>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	f003 0307 	and.w	r3, r3, #7
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db0b      	blt.n	8000eb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f003 021f 	and.w	r2, r3, #31
 8000ea0:	4907      	ldr	r1, [pc, #28]	; (8000ec0 <__NVIC_EnableIRQ+0x38>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	095b      	lsrs	r3, r3, #5
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000e100 	.word	0xe000e100

08000ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db0a      	blt.n	8000eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	490c      	ldr	r1, [pc, #48]	; (8000f10 <__NVIC_SetPriority+0x4c>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	0112      	lsls	r2, r2, #4
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eec:	e00a      	b.n	8000f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4908      	ldr	r1, [pc, #32]	; (8000f14 <__NVIC_SetPriority+0x50>)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	3b04      	subs	r3, #4
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	440b      	add	r3, r1
 8000f02:	761a      	strb	r2, [r3, #24]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	; 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f1c3 0307 	rsb	r3, r3, #7
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	bf28      	it	cs
 8000f36:	2304      	movcs	r3, #4
 8000f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d902      	bls.n	8000f48 <NVIC_EncodePriority+0x30>
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3b03      	subs	r3, #3
 8000f46:	e000      	b.n	8000f4a <NVIC_EncodePriority+0x32>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43da      	mvns	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43d9      	mvns	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	4313      	orrs	r3, r2
         );
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3724      	adds	r7, #36	; 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f90:	d301      	bcc.n	8000f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00f      	b.n	8000fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <SysTick_Config+0x40>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f7ff ff8e 	bl	8000ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <SysTick_Config+0x40>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <SysTick_Config+0x40>)
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	e000e010 	.word	0xe000e010

08000fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff29 	bl	8000e24 <__NVIC_SetPriorityGrouping>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
 8000fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fec:	f7ff ff3e 	bl	8000e6c <__NVIC_GetPriorityGrouping>
 8000ff0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	68b9      	ldr	r1, [r7, #8]
 8000ff6:	6978      	ldr	r0, [r7, #20]
 8000ff8:	f7ff ff8e 	bl	8000f18 <NVIC_EncodePriority>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff5d 	bl	8000ec4 <__NVIC_SetPriority>
}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff31 	bl	8000e88 <__NVIC_EnableIRQ>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffa2 	bl	8000f80 <SysTick_Config>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	e16b      	b.n	800133c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	429a      	cmp	r2, r3
 800107e:	f040 815a 	bne.w	8001336 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d005      	beq.n	800109a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001096:	2b02      	cmp	r3, #2
 8001098:	d130      	bne.n	80010fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	2203      	movs	r2, #3
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d0:	2201      	movs	r2, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	091b      	lsrs	r3, r3, #4
 80010e6:	f003 0201 	and.w	r2, r3, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b03      	cmp	r3, #3
 8001106:	d017      	beq.n	8001138 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d123      	bne.n	800118c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	220f      	movs	r2, #15
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	69b9      	ldr	r1, [r7, #24]
 8001188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0203 	and.w	r2, r3, #3
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80b4 	beq.w	8001336 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b60      	ldr	r3, [pc, #384]	; (8001354 <HAL_GPIO_Init+0x30c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	4a5f      	ldr	r2, [pc, #380]	; (8001354 <HAL_GPIO_Init+0x30c>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011dc:	6453      	str	r3, [r2, #68]	; 0x44
 80011de:	4b5d      	ldr	r3, [pc, #372]	; (8001354 <HAL_GPIO_Init+0x30c>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ea:	4a5b      	ldr	r2, [pc, #364]	; (8001358 <HAL_GPIO_Init+0x310>)
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	3302      	adds	r3, #2
 80011f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	220f      	movs	r2, #15
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a52      	ldr	r2, [pc, #328]	; (800135c <HAL_GPIO_Init+0x314>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d02b      	beq.n	800126e <HAL_GPIO_Init+0x226>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a51      	ldr	r2, [pc, #324]	; (8001360 <HAL_GPIO_Init+0x318>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d025      	beq.n	800126a <HAL_GPIO_Init+0x222>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a50      	ldr	r2, [pc, #320]	; (8001364 <HAL_GPIO_Init+0x31c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d01f      	beq.n	8001266 <HAL_GPIO_Init+0x21e>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4f      	ldr	r2, [pc, #316]	; (8001368 <HAL_GPIO_Init+0x320>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d019      	beq.n	8001262 <HAL_GPIO_Init+0x21a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4e      	ldr	r2, [pc, #312]	; (800136c <HAL_GPIO_Init+0x324>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d013      	beq.n	800125e <HAL_GPIO_Init+0x216>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4d      	ldr	r2, [pc, #308]	; (8001370 <HAL_GPIO_Init+0x328>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d00d      	beq.n	800125a <HAL_GPIO_Init+0x212>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4c      	ldr	r2, [pc, #304]	; (8001374 <HAL_GPIO_Init+0x32c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d007      	beq.n	8001256 <HAL_GPIO_Init+0x20e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4b      	ldr	r2, [pc, #300]	; (8001378 <HAL_GPIO_Init+0x330>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d101      	bne.n	8001252 <HAL_GPIO_Init+0x20a>
 800124e:	2307      	movs	r3, #7
 8001250:	e00e      	b.n	8001270 <HAL_GPIO_Init+0x228>
 8001252:	2308      	movs	r3, #8
 8001254:	e00c      	b.n	8001270 <HAL_GPIO_Init+0x228>
 8001256:	2306      	movs	r3, #6
 8001258:	e00a      	b.n	8001270 <HAL_GPIO_Init+0x228>
 800125a:	2305      	movs	r3, #5
 800125c:	e008      	b.n	8001270 <HAL_GPIO_Init+0x228>
 800125e:	2304      	movs	r3, #4
 8001260:	e006      	b.n	8001270 <HAL_GPIO_Init+0x228>
 8001262:	2303      	movs	r3, #3
 8001264:	e004      	b.n	8001270 <HAL_GPIO_Init+0x228>
 8001266:	2302      	movs	r3, #2
 8001268:	e002      	b.n	8001270 <HAL_GPIO_Init+0x228>
 800126a:	2301      	movs	r3, #1
 800126c:	e000      	b.n	8001270 <HAL_GPIO_Init+0x228>
 800126e:	2300      	movs	r3, #0
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	f002 0203 	and.w	r2, r2, #3
 8001276:	0092      	lsls	r2, r2, #2
 8001278:	4093      	lsls	r3, r2
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001280:	4935      	ldr	r1, [pc, #212]	; (8001358 <HAL_GPIO_Init+0x310>)
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	3302      	adds	r3, #2
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800128e:	4b3b      	ldr	r3, [pc, #236]	; (800137c <HAL_GPIO_Init+0x334>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012b2:	4a32      	ldr	r2, [pc, #200]	; (800137c <HAL_GPIO_Init+0x334>)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b8:	4b30      	ldr	r3, [pc, #192]	; (800137c <HAL_GPIO_Init+0x334>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012dc:	4a27      	ldr	r2, [pc, #156]	; (800137c <HAL_GPIO_Init+0x334>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012e2:	4b26      	ldr	r3, [pc, #152]	; (800137c <HAL_GPIO_Init+0x334>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4013      	ands	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001306:	4a1d      	ldr	r2, [pc, #116]	; (800137c <HAL_GPIO_Init+0x334>)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <HAL_GPIO_Init+0x334>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001330:	4a12      	ldr	r2, [pc, #72]	; (800137c <HAL_GPIO_Init+0x334>)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3301      	adds	r3, #1
 800133a:	61fb      	str	r3, [r7, #28]
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	2b0f      	cmp	r3, #15
 8001340:	f67f ae90 	bls.w	8001064 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3724      	adds	r7, #36	; 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	40013800 	.word	0x40013800
 800135c:	40020000 	.word	0x40020000
 8001360:	40020400 	.word	0x40020400
 8001364:	40020800 	.word	0x40020800
 8001368:	40020c00 	.word	0x40020c00
 800136c:	40021000 	.word	0x40021000
 8001370:	40021400 	.word	0x40021400
 8001374:	40021800 	.word	0x40021800
 8001378:	40021c00 	.word	0x40021c00
 800137c:	40013c00 	.word	0x40013c00

08001380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	807b      	strh	r3, [r7, #2]
 800138c:	4613      	mov	r3, r2
 800138e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001390:	787b      	ldrb	r3, [r7, #1]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001396:	887a      	ldrh	r2, [r7, #2]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800139c:	e003      	b.n	80013a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800139e:	887b      	ldrh	r3, [r7, #2]
 80013a0:	041a      	lsls	r2, r3, #16
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	619a      	str	r2, [r3, #24]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80013b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b4:	b08f      	sub	sp, #60	; 0x3c
 80013b6:	af0a      	add	r7, sp, #40	; 0x28
 80013b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e054      	b.n	800146e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d106      	bne.n	80013e4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f006 f856 	bl	8007490 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2203      	movs	r2, #3
 80013e8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f003 f883 	bl	800450e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	603b      	str	r3, [r7, #0]
 800140e:	687e      	ldr	r6, [r7, #4]
 8001410:	466d      	mov	r5, sp
 8001412:	f106 0410 	add.w	r4, r6, #16
 8001416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001418:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800141a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800141c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800141e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001422:	e885 0003 	stmia.w	r5, {r0, r1}
 8001426:	1d33      	adds	r3, r6, #4
 8001428:	cb0e      	ldmia	r3, {r1, r2, r3}
 800142a:	6838      	ldr	r0, [r7, #0]
 800142c:	f002 fffd 	bl	800442a <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2101      	movs	r1, #1
 8001436:	4618      	mov	r0, r3
 8001438:	f003 f87a 	bl	8004530 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	687e      	ldr	r6, [r7, #4]
 8001444:	466d      	mov	r5, sp
 8001446:	f106 0410 	add.w	r4, r6, #16
 800144a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800144c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800144e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001450:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001452:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001456:	e885 0003 	stmia.w	r5, {r0, r1}
 800145a:	1d33      	adds	r3, r6, #4
 800145c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800145e:	6838      	ldr	r0, [r7, #0]
 8001460:	f003 fa02 	bl	8004868 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001476 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001476:	b590      	push	{r4, r7, lr}
 8001478:	b089      	sub	sp, #36	; 0x24
 800147a:	af04      	add	r7, sp, #16
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	4608      	mov	r0, r1
 8001480:	4611      	mov	r1, r2
 8001482:	461a      	mov	r2, r3
 8001484:	4603      	mov	r3, r0
 8001486:	70fb      	strb	r3, [r7, #3]
 8001488:	460b      	mov	r3, r1
 800148a:	70bb      	strb	r3, [r7, #2]
 800148c:	4613      	mov	r3, r2
 800148e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001496:	2b01      	cmp	r3, #1
 8001498:	d101      	bne.n	800149e <HAL_HCD_HC_Init+0x28>
 800149a:	2302      	movs	r3, #2
 800149c:	e076      	b.n	800158c <HAL_HCD_HC_Init+0x116>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80014a6:	78fb      	ldrb	r3, [r7, #3]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	212c      	movs	r1, #44	; 0x2c
 80014ac:	fb01 f303 	mul.w	r3, r1, r3
 80014b0:	4413      	add	r3, r2
 80014b2:	333d      	adds	r3, #61	; 0x3d
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	212c      	movs	r1, #44	; 0x2c
 80014be:	fb01 f303 	mul.w	r3, r1, r3
 80014c2:	4413      	add	r3, r2
 80014c4:	3338      	adds	r3, #56	; 0x38
 80014c6:	787a      	ldrb	r2, [r7, #1]
 80014c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80014ca:	78fb      	ldrb	r3, [r7, #3]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	212c      	movs	r1, #44	; 0x2c
 80014d0:	fb01 f303 	mul.w	r3, r1, r3
 80014d4:	4413      	add	r3, r2
 80014d6:	3340      	adds	r3, #64	; 0x40
 80014d8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014da:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	212c      	movs	r1, #44	; 0x2c
 80014e2:	fb01 f303 	mul.w	r3, r1, r3
 80014e6:	4413      	add	r3, r2
 80014e8:	3339      	adds	r3, #57	; 0x39
 80014ea:	78fa      	ldrb	r2, [r7, #3]
 80014ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014ee:	78fb      	ldrb	r3, [r7, #3]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	212c      	movs	r1, #44	; 0x2c
 80014f4:	fb01 f303 	mul.w	r3, r1, r3
 80014f8:	4413      	add	r3, r2
 80014fa:	333f      	adds	r3, #63	; 0x3f
 80014fc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001500:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001502:	78fb      	ldrb	r3, [r7, #3]
 8001504:	78ba      	ldrb	r2, [r7, #2]
 8001506:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800150a:	b2d0      	uxtb	r0, r2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	212c      	movs	r1, #44	; 0x2c
 8001510:	fb01 f303 	mul.w	r3, r1, r3
 8001514:	4413      	add	r3, r2
 8001516:	333a      	adds	r3, #58	; 0x3a
 8001518:	4602      	mov	r2, r0
 800151a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800151c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001520:	2b00      	cmp	r3, #0
 8001522:	da09      	bge.n	8001538 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001524:	78fb      	ldrb	r3, [r7, #3]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	212c      	movs	r1, #44	; 0x2c
 800152a:	fb01 f303 	mul.w	r3, r1, r3
 800152e:	4413      	add	r3, r2
 8001530:	333b      	adds	r3, #59	; 0x3b
 8001532:	2201      	movs	r2, #1
 8001534:	701a      	strb	r2, [r3, #0]
 8001536:	e008      	b.n	800154a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001538:	78fb      	ldrb	r3, [r7, #3]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	212c      	movs	r1, #44	; 0x2c
 800153e:	fb01 f303 	mul.w	r3, r1, r3
 8001542:	4413      	add	r3, r2
 8001544:	333b      	adds	r3, #59	; 0x3b
 8001546:	2200      	movs	r2, #0
 8001548:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800154a:	78fb      	ldrb	r3, [r7, #3]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	212c      	movs	r1, #44	; 0x2c
 8001550:	fb01 f303 	mul.w	r3, r1, r3
 8001554:	4413      	add	r3, r2
 8001556:	333c      	adds	r3, #60	; 0x3c
 8001558:	f897 2020 	ldrb.w	r2, [r7, #32]
 800155c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6818      	ldr	r0, [r3, #0]
 8001562:	787c      	ldrb	r4, [r7, #1]
 8001564:	78ba      	ldrb	r2, [r7, #2]
 8001566:	78f9      	ldrb	r1, [r7, #3]
 8001568:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800156a:	9302      	str	r3, [sp, #8]
 800156c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001570:	9301      	str	r3, [sp, #4]
 8001572:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	4623      	mov	r3, r4
 800157a:	f003 fafb 	bl	8004b74 <USB_HC_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	bd90      	pop	{r4, r7, pc}

08001594 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015a0:	2300      	movs	r3, #0
 80015a2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d101      	bne.n	80015b2 <HAL_HCD_HC_Halt+0x1e>
 80015ae:	2302      	movs	r3, #2
 80015b0:	e00f      	b.n	80015d2 <HAL_HCD_HC_Halt+0x3e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	78fa      	ldrb	r2, [r7, #3]
 80015c0:	4611      	mov	r1, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 fd4b 	bl	800505e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	4608      	mov	r0, r1
 80015e6:	4611      	mov	r1, r2
 80015e8:	461a      	mov	r2, r3
 80015ea:	4603      	mov	r3, r0
 80015ec:	70fb      	strb	r3, [r7, #3]
 80015ee:	460b      	mov	r3, r1
 80015f0:	70bb      	strb	r3, [r7, #2]
 80015f2:	4613      	mov	r3, r2
 80015f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80015f6:	78fb      	ldrb	r3, [r7, #3]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	212c      	movs	r1, #44	; 0x2c
 80015fc:	fb01 f303 	mul.w	r3, r1, r3
 8001600:	4413      	add	r3, r2
 8001602:	333b      	adds	r3, #59	; 0x3b
 8001604:	78ba      	ldrb	r2, [r7, #2]
 8001606:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	212c      	movs	r1, #44	; 0x2c
 800160e:	fb01 f303 	mul.w	r3, r1, r3
 8001612:	4413      	add	r3, r2
 8001614:	333f      	adds	r3, #63	; 0x3f
 8001616:	787a      	ldrb	r2, [r7, #1]
 8001618:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800161a:	7c3b      	ldrb	r3, [r7, #16]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d112      	bne.n	8001646 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	212c      	movs	r1, #44	; 0x2c
 8001626:	fb01 f303 	mul.w	r3, r1, r3
 800162a:	4413      	add	r3, r2
 800162c:	3342      	adds	r3, #66	; 0x42
 800162e:	2203      	movs	r2, #3
 8001630:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001632:	78fb      	ldrb	r3, [r7, #3]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	212c      	movs	r1, #44	; 0x2c
 8001638:	fb01 f303 	mul.w	r3, r1, r3
 800163c:	4413      	add	r3, r2
 800163e:	333d      	adds	r3, #61	; 0x3d
 8001640:	7f3a      	ldrb	r2, [r7, #28]
 8001642:	701a      	strb	r2, [r3, #0]
 8001644:	e008      	b.n	8001658 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001646:	78fb      	ldrb	r3, [r7, #3]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	212c      	movs	r1, #44	; 0x2c
 800164c:	fb01 f303 	mul.w	r3, r1, r3
 8001650:	4413      	add	r3, r2
 8001652:	3342      	adds	r3, #66	; 0x42
 8001654:	2202      	movs	r2, #2
 8001656:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001658:	787b      	ldrb	r3, [r7, #1]
 800165a:	2b03      	cmp	r3, #3
 800165c:	f200 80c6 	bhi.w	80017ec <HAL_HCD_HC_SubmitRequest+0x210>
 8001660:	a201      	add	r2, pc, #4	; (adr r2, 8001668 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001666:	bf00      	nop
 8001668:	08001679 	.word	0x08001679
 800166c:	080017d9 	.word	0x080017d9
 8001670:	080016dd 	.word	0x080016dd
 8001674:	0800175b 	.word	0x0800175b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001678:	7c3b      	ldrb	r3, [r7, #16]
 800167a:	2b01      	cmp	r3, #1
 800167c:	f040 80b8 	bne.w	80017f0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001680:	78bb      	ldrb	r3, [r7, #2]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f040 80b4 	bne.w	80017f0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001688:	8b3b      	ldrh	r3, [r7, #24]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d108      	bne.n	80016a0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800168e:	78fb      	ldrb	r3, [r7, #3]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	212c      	movs	r1, #44	; 0x2c
 8001694:	fb01 f303 	mul.w	r3, r1, r3
 8001698:	4413      	add	r3, r2
 800169a:	3355      	adds	r3, #85	; 0x55
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	212c      	movs	r1, #44	; 0x2c
 80016a6:	fb01 f303 	mul.w	r3, r1, r3
 80016aa:	4413      	add	r3, r2
 80016ac:	3355      	adds	r3, #85	; 0x55
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d109      	bne.n	80016c8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016b4:	78fb      	ldrb	r3, [r7, #3]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	212c      	movs	r1, #44	; 0x2c
 80016ba:	fb01 f303 	mul.w	r3, r1, r3
 80016be:	4413      	add	r3, r2
 80016c0:	3342      	adds	r3, #66	; 0x42
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80016c6:	e093      	b.n	80017f0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016c8:	78fb      	ldrb	r3, [r7, #3]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	212c      	movs	r1, #44	; 0x2c
 80016ce:	fb01 f303 	mul.w	r3, r1, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	3342      	adds	r3, #66	; 0x42
 80016d6:	2202      	movs	r2, #2
 80016d8:	701a      	strb	r2, [r3, #0]
      break;
 80016da:	e089      	b.n	80017f0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80016dc:	78bb      	ldrb	r3, [r7, #2]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d11d      	bne.n	800171e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	212c      	movs	r1, #44	; 0x2c
 80016e8:	fb01 f303 	mul.w	r3, r1, r3
 80016ec:	4413      	add	r3, r2
 80016ee:	3355      	adds	r3, #85	; 0x55
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d109      	bne.n	800170a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016f6:	78fb      	ldrb	r3, [r7, #3]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	212c      	movs	r1, #44	; 0x2c
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	4413      	add	r3, r2
 8001702:	3342      	adds	r3, #66	; 0x42
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001708:	e073      	b.n	80017f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800170a:	78fb      	ldrb	r3, [r7, #3]
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	212c      	movs	r1, #44	; 0x2c
 8001710:	fb01 f303 	mul.w	r3, r1, r3
 8001714:	4413      	add	r3, r2
 8001716:	3342      	adds	r3, #66	; 0x42
 8001718:	2202      	movs	r2, #2
 800171a:	701a      	strb	r2, [r3, #0]
      break;
 800171c:	e069      	b.n	80017f2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	212c      	movs	r1, #44	; 0x2c
 8001724:	fb01 f303 	mul.w	r3, r1, r3
 8001728:	4413      	add	r3, r2
 800172a:	3354      	adds	r3, #84	; 0x54
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d109      	bne.n	8001746 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001732:	78fb      	ldrb	r3, [r7, #3]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	212c      	movs	r1, #44	; 0x2c
 8001738:	fb01 f303 	mul.w	r3, r1, r3
 800173c:	4413      	add	r3, r2
 800173e:	3342      	adds	r3, #66	; 0x42
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
      break;
 8001744:	e055      	b.n	80017f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	212c      	movs	r1, #44	; 0x2c
 800174c:	fb01 f303 	mul.w	r3, r1, r3
 8001750:	4413      	add	r3, r2
 8001752:	3342      	adds	r3, #66	; 0x42
 8001754:	2202      	movs	r2, #2
 8001756:	701a      	strb	r2, [r3, #0]
      break;
 8001758:	e04b      	b.n	80017f2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800175a:	78bb      	ldrb	r3, [r7, #2]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d11d      	bne.n	800179c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	212c      	movs	r1, #44	; 0x2c
 8001766:	fb01 f303 	mul.w	r3, r1, r3
 800176a:	4413      	add	r3, r2
 800176c:	3355      	adds	r3, #85	; 0x55
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d109      	bne.n	8001788 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	212c      	movs	r1, #44	; 0x2c
 800177a:	fb01 f303 	mul.w	r3, r1, r3
 800177e:	4413      	add	r3, r2
 8001780:	3342      	adds	r3, #66	; 0x42
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001786:	e034      	b.n	80017f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	212c      	movs	r1, #44	; 0x2c
 800178e:	fb01 f303 	mul.w	r3, r1, r3
 8001792:	4413      	add	r3, r2
 8001794:	3342      	adds	r3, #66	; 0x42
 8001796:	2202      	movs	r2, #2
 8001798:	701a      	strb	r2, [r3, #0]
      break;
 800179a:	e02a      	b.n	80017f2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	212c      	movs	r1, #44	; 0x2c
 80017a2:	fb01 f303 	mul.w	r3, r1, r3
 80017a6:	4413      	add	r3, r2
 80017a8:	3354      	adds	r3, #84	; 0x54
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d109      	bne.n	80017c4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	212c      	movs	r1, #44	; 0x2c
 80017b6:	fb01 f303 	mul.w	r3, r1, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	3342      	adds	r3, #66	; 0x42
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
      break;
 80017c2:	e016      	b.n	80017f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	212c      	movs	r1, #44	; 0x2c
 80017ca:	fb01 f303 	mul.w	r3, r1, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	3342      	adds	r3, #66	; 0x42
 80017d2:	2202      	movs	r2, #2
 80017d4:	701a      	strb	r2, [r3, #0]
      break;
 80017d6:	e00c      	b.n	80017f2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017d8:	78fb      	ldrb	r3, [r7, #3]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	212c      	movs	r1, #44	; 0x2c
 80017de:	fb01 f303 	mul.w	r3, r1, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	3342      	adds	r3, #66	; 0x42
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
      break;
 80017ea:	e002      	b.n	80017f2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80017ec:	bf00      	nop
 80017ee:	e000      	b.n	80017f2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80017f0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	212c      	movs	r1, #44	; 0x2c
 80017f8:	fb01 f303 	mul.w	r3, r1, r3
 80017fc:	4413      	add	r3, r2
 80017fe:	3344      	adds	r3, #68	; 0x44
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	8b3a      	ldrh	r2, [r7, #24]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	202c      	movs	r0, #44	; 0x2c
 800180c:	fb00 f303 	mul.w	r3, r0, r3
 8001810:	440b      	add	r3, r1
 8001812:	334c      	adds	r3, #76	; 0x4c
 8001814:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	212c      	movs	r1, #44	; 0x2c
 800181c:	fb01 f303 	mul.w	r3, r1, r3
 8001820:	4413      	add	r3, r2
 8001822:	3360      	adds	r3, #96	; 0x60
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	212c      	movs	r1, #44	; 0x2c
 800182e:	fb01 f303 	mul.w	r3, r1, r3
 8001832:	4413      	add	r3, r2
 8001834:	3350      	adds	r3, #80	; 0x50
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800183a:	78fb      	ldrb	r3, [r7, #3]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	212c      	movs	r1, #44	; 0x2c
 8001840:	fb01 f303 	mul.w	r3, r1, r3
 8001844:	4413      	add	r3, r2
 8001846:	3339      	adds	r3, #57	; 0x39
 8001848:	78fa      	ldrb	r2, [r7, #3]
 800184a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	212c      	movs	r1, #44	; 0x2c
 8001852:	fb01 f303 	mul.w	r3, r1, r3
 8001856:	4413      	add	r3, r2
 8001858:	3361      	adds	r3, #97	; 0x61
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6818      	ldr	r0, [r3, #0]
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	222c      	movs	r2, #44	; 0x2c
 8001866:	fb02 f303 	mul.w	r3, r2, r3
 800186a:	3338      	adds	r3, #56	; 0x38
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	18d1      	adds	r1, r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	f003 fa9e 	bl	8004db8 <USB_HC_StartXfer>
 800187c:	4603      	mov	r3, r0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop

08001888 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f002 ff9f 	bl	80047e2 <USB_GetMode>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	f040 80f6 	bne.w	8001a98 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f002 ff83 	bl	80047bc <USB_ReadInterrupts>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 80ec 	beq.w	8001a96 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f002 ff7a 	bl	80047bc <USB_ReadInterrupts>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018d2:	d104      	bne.n	80018de <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 ff6a 	bl	80047bc <USB_ReadInterrupts>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018f2:	d104      	bne.n	80018fe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f002 ff5a 	bl	80047bc <USB_ReadInterrupts>
 8001908:	4603      	mov	r3, r0
 800190a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800190e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001912:	d104      	bne.n	800191e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800191c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f002 ff4a 	bl	80047bc <USB_ReadInterrupts>
 8001928:	4603      	mov	r3, r0
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b02      	cmp	r3, #2
 8001930:	d103      	bne.n	800193a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2202      	movs	r2, #2
 8001938:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f002 ff3c 	bl	80047bc <USB_ReadInterrupts>
 8001944:	4603      	mov	r3, r0
 8001946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800194a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800194e:	d11c      	bne.n	800198a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001958:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10f      	bne.n	800198a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800196a:	2110      	movs	r1, #16
 800196c:	6938      	ldr	r0, [r7, #16]
 800196e:	f002 fe2b 	bl	80045c8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001972:	6938      	ldr	r0, [r7, #16]
 8001974:	f002 fe5c 	bl	8004630 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2101      	movs	r1, #1
 800197e:	4618      	mov	r0, r3
 8001980:	f003 f832 	bl	80049e8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f005 fe01 	bl	800758c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f002 ff14 	bl	80047bc <USB_ReadInterrupts>
 8001994:	4603      	mov	r3, r0
 8001996:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800199a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800199e:	d102      	bne.n	80019a6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f001 f89e 	bl	8002ae2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f002 ff06 	bl	80047bc <USB_ReadInterrupts>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d106      	bne.n	80019c8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f005 fdca 	bl	8007554 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2208      	movs	r2, #8
 80019c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f002 fef5 	bl	80047bc <USB_ReadInterrupts>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f003 0310 	and.w	r3, r3, #16
 80019d8:	2b10      	cmp	r3, #16
 80019da:	d101      	bne.n	80019e0 <HAL_HCD_IRQHandler+0x158>
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <HAL_HCD_IRQHandler+0x15a>
 80019e0:	2300      	movs	r3, #0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d012      	beq.n	8001a0c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	699a      	ldr	r2, [r3, #24]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0210 	bic.w	r2, r2, #16
 80019f4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 ffa1 	bl	800293e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699a      	ldr	r2, [r3, #24]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0210 	orr.w	r2, r2, #16
 8001a0a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f002 fed3 	bl	80047bc <USB_ReadInterrupts>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a20:	d13a      	bne.n	8001a98 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f003 fb08 	bl	800503c <USB_HC_ReadInterrupt>
 8001a2c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e025      	b.n	8001a80 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d018      	beq.n	8001a7a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	015a      	lsls	r2, r3, #5
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4413      	add	r3, r2
 8001a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a5e:	d106      	bne.n	8001a6e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	4619      	mov	r1, r3
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f8ab 	bl	8001bc2 <HCD_HC_IN_IRQHandler>
 8001a6c:	e005      	b.n	8001a7a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	4619      	mov	r1, r3
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 fbf9 	bl	800226c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d3d4      	bcc.n	8001a34 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a92:	615a      	str	r2, [r3, #20]
 8001a94:	e000      	b.n	8001a98 <HAL_HCD_IRQHandler+0x210>
      return;
 8001a96:	bf00      	nop
    }
  }
}
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <HAL_HCD_Start+0x16>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e013      	b.n	8001adc <HAL_HCD_Start+0x3e>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f002 fff4 	bl	8004ab0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f002 fd0d 	bl	80044ec <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_HCD_Stop+0x16>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e00d      	b.n	8001b16 <HAL_HCD_Stop+0x32>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f003 fbe2 	bl	80052d0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f002 ff96 	bl	8004a5c <USB_ResetPort>
 8001b30:	4603      	mov	r3, r0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	460b      	mov	r3, r1
 8001b44:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	212c      	movs	r1, #44	; 0x2c
 8001b4c:	fb01 f303 	mul.w	r3, r1, r3
 8001b50:	4413      	add	r3, r2
 8001b52:	3360      	adds	r3, #96	; 0x60
 8001b54:	781b      	ldrb	r3, [r3, #0]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b6e:	78fb      	ldrb	r3, [r7, #3]
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	212c      	movs	r1, #44	; 0x2c
 8001b74:	fb01 f303 	mul.w	r3, r1, r3
 8001b78:	4413      	add	r3, r2
 8001b7a:	3350      	adds	r3, #80	; 0x50
 8001b7c:	681b      	ldr	r3, [r3, #0]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f002 ffda 	bl	8004b50 <USB_GetCurrentFrame>
 8001b9c:	4603      	mov	r3, r0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f002 ffb5 	bl	8004b22 <USB_GetHostSpeed>
 8001bb8:	4603      	mov	r3, r0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b086      	sub	sp, #24
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	015a      	lsls	r2, r3, #5
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d11a      	bne.n	8001c28 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	015a      	lsls	r2, r3, #5
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bfe:	461a      	mov	r2, r3
 8001c00:	2304      	movs	r3, #4
 8001c02:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	212c      	movs	r1, #44	; 0x2c
 8001c0a:	fb01 f303 	mul.w	r3, r1, r3
 8001c0e:	4413      	add	r3, r2
 8001c10:	3361      	adds	r3, #97	; 0x61
 8001c12:	2206      	movs	r2, #6
 8001c14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 fa1c 	bl	800505e <USB_HC_Halt>
 8001c26:	e0af      	b.n	8001d88 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	015a      	lsls	r2, r3, #5
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4413      	add	r3, r2
 8001c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c3e:	d11b      	bne.n	8001c78 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	015a      	lsls	r2, r3, #5
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4413      	add	r3, r2
 8001c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	212c      	movs	r1, #44	; 0x2c
 8001c5a:	fb01 f303 	mul.w	r3, r1, r3
 8001c5e:	4413      	add	r3, r2
 8001c60:	3361      	adds	r3, #97	; 0x61
 8001c62:	2207      	movs	r2, #7
 8001c64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f003 f9f4 	bl	800505e <USB_HC_Halt>
 8001c76:	e087      	b.n	8001d88 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	015a      	lsls	r2, r3, #5
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4413      	add	r3, r2
 8001c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 0320 	and.w	r3, r3, #32
 8001c8a:	2b20      	cmp	r3, #32
 8001c8c:	d109      	bne.n	8001ca2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	015a      	lsls	r2, r3, #5
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4413      	add	r3, r2
 8001c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	6093      	str	r3, [r2, #8]
 8001ca0:	e072      	b.n	8001d88 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	015a      	lsls	r2, r3, #5
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4413      	add	r3, r2
 8001caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0308 	and.w	r3, r3, #8
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d11a      	bne.n	8001cee <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	015a      	lsls	r2, r3, #5
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	2308      	movs	r3, #8
 8001cc8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	212c      	movs	r1, #44	; 0x2c
 8001cd0:	fb01 f303 	mul.w	r3, r1, r3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3361      	adds	r3, #97	; 0x61
 8001cd8:	2205      	movs	r2, #5
 8001cda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	4611      	mov	r1, r2
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f003 f9b9 	bl	800505e <USB_HC_Halt>
 8001cec:	e04c      	b.n	8001d88 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	015a      	lsls	r2, r3, #5
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d04:	d11b      	bne.n	8001d3e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	015a      	lsls	r2, r3, #5
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d12:	461a      	mov	r2, r3
 8001d14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d18:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	212c      	movs	r1, #44	; 0x2c
 8001d20:	fb01 f303 	mul.w	r3, r1, r3
 8001d24:	4413      	add	r3, r2
 8001d26:	3361      	adds	r3, #97	; 0x61
 8001d28:	2208      	movs	r2, #8
 8001d2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f003 f991 	bl	800505e <USB_HC_Halt>
 8001d3c:	e024      	b.n	8001d88 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	015a      	lsls	r2, r3, #5
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4413      	add	r3, r2
 8001d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d50:	2b80      	cmp	r3, #128	; 0x80
 8001d52:	d119      	bne.n	8001d88 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d60:	461a      	mov	r2, r3
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	212c      	movs	r1, #44	; 0x2c
 8001d6c:	fb01 f303 	mul.w	r3, r1, r3
 8001d70:	4413      	add	r3, r2
 8001d72:	3361      	adds	r3, #97	; 0x61
 8001d74:	2206      	movs	r2, #6
 8001d76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f003 f96b 	bl	800505e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	015a      	lsls	r2, r3, #5
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4413      	add	r3, r2
 8001d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d9e:	d112      	bne.n	8001dc6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	4611      	mov	r1, r2
 8001daa:	4618      	mov	r0, r3
 8001dac:	f003 f957 	bl	800505e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001dc4:	e24e      	b.n	8002264 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	f040 80df 	bne.w	8001f9c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d019      	beq.n	8001e1a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	212c      	movs	r1, #44	; 0x2c
 8001dec:	fb01 f303 	mul.w	r3, r1, r3
 8001df0:	4413      	add	r3, r2
 8001df2:	3348      	adds	r3, #72	; 0x48
 8001df4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	0159      	lsls	r1, r3, #5
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	440b      	add	r3, r1
 8001dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001e08:	1ad2      	subs	r2, r2, r3
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	202c      	movs	r0, #44	; 0x2c
 8001e10:	fb00 f303 	mul.w	r3, r0, r3
 8001e14:	440b      	add	r3, r1
 8001e16:	3350      	adds	r3, #80	; 0x50
 8001e18:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	212c      	movs	r1, #44	; 0x2c
 8001e20:	fb01 f303 	mul.w	r3, r1, r3
 8001e24:	4413      	add	r3, r2
 8001e26:	3361      	adds	r3, #97	; 0x61
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	212c      	movs	r1, #44	; 0x2c
 8001e32:	fb01 f303 	mul.w	r3, r1, r3
 8001e36:	4413      	add	r3, r2
 8001e38:	335c      	adds	r3, #92	; 0x5c
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	015a      	lsls	r2, r3, #5
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4413      	add	r3, r2
 8001e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	212c      	movs	r1, #44	; 0x2c
 8001e56:	fb01 f303 	mul.w	r3, r1, r3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	333f      	adds	r3, #63	; 0x3f
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d009      	beq.n	8001e78 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	212c      	movs	r1, #44	; 0x2c
 8001e6a:	fb01 f303 	mul.w	r3, r1, r3
 8001e6e:	4413      	add	r3, r2
 8001e70:	333f      	adds	r3, #63	; 0x3f
 8001e72:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d111      	bne.n	8001e9c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f003 f8eb 	bl	800505e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	015a      	lsls	r2, r3, #5
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4413      	add	r3, r2
 8001e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e94:	461a      	mov	r2, r3
 8001e96:	2310      	movs	r3, #16
 8001e98:	6093      	str	r3, [r2, #8]
 8001e9a:	e03a      	b.n	8001f12 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	212c      	movs	r1, #44	; 0x2c
 8001ea2:	fb01 f303 	mul.w	r3, r1, r3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	333f      	adds	r3, #63	; 0x3f
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	d009      	beq.n	8001ec4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	212c      	movs	r1, #44	; 0x2c
 8001eb6:	fb01 f303 	mul.w	r3, r1, r3
 8001eba:	4413      	add	r3, r2
 8001ebc:	333f      	adds	r3, #63	; 0x3f
 8001ebe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d126      	bne.n	8001f12 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	015a      	lsls	r2, r3, #5
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	0151      	lsls	r1, r2, #5
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	440a      	add	r2, r1
 8001eda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ede:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ee2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	212c      	movs	r1, #44	; 0x2c
 8001eea:	fb01 f303 	mul.w	r3, r1, r3
 8001eee:	4413      	add	r3, r2
 8001ef0:	3360      	adds	r3, #96	; 0x60
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	b2d9      	uxtb	r1, r3
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	202c      	movs	r0, #44	; 0x2c
 8001f00:	fb00 f303 	mul.w	r3, r0, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	3360      	adds	r3, #96	; 0x60
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f005 fb4b 	bl	80075a8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d12b      	bne.n	8001f72 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	212c      	movs	r1, #44	; 0x2c
 8001f20:	fb01 f303 	mul.w	r3, r1, r3
 8001f24:	4413      	add	r3, r2
 8001f26:	3348      	adds	r3, #72	; 0x48
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	202c      	movs	r0, #44	; 0x2c
 8001f30:	fb00 f202 	mul.w	r2, r0, r2
 8001f34:	440a      	add	r2, r1
 8001f36:	3240      	adds	r2, #64	; 0x40
 8001f38:	8812      	ldrh	r2, [r2, #0]
 8001f3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 818e 	beq.w	8002264 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	212c      	movs	r1, #44	; 0x2c
 8001f4e:	fb01 f303 	mul.w	r3, r1, r3
 8001f52:	4413      	add	r3, r2
 8001f54:	3354      	adds	r3, #84	; 0x54
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	f083 0301 	eor.w	r3, r3, #1
 8001f5c:	b2d8      	uxtb	r0, r3
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	212c      	movs	r1, #44	; 0x2c
 8001f64:	fb01 f303 	mul.w	r3, r1, r3
 8001f68:	4413      	add	r3, r2
 8001f6a:	3354      	adds	r3, #84	; 0x54
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	701a      	strb	r2, [r3, #0]
}
 8001f70:	e178      	b.n	8002264 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	212c      	movs	r1, #44	; 0x2c
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3354      	adds	r3, #84	; 0x54
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	f083 0301 	eor.w	r3, r3, #1
 8001f86:	b2d8      	uxtb	r0, r3
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	212c      	movs	r1, #44	; 0x2c
 8001f8e:	fb01 f303 	mul.w	r3, r1, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	3354      	adds	r3, #84	; 0x54
 8001f96:	4602      	mov	r2, r0
 8001f98:	701a      	strb	r2, [r3, #0]
}
 8001f9a:	e163      	b.n	8002264 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	f040 80f6 	bne.w	80021a0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	212c      	movs	r1, #44	; 0x2c
 8001fba:	fb01 f303 	mul.w	r3, r1, r3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3361      	adds	r3, #97	; 0x61
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d109      	bne.n	8001fdc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	212c      	movs	r1, #44	; 0x2c
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3360      	adds	r3, #96	; 0x60
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
 8001fda:	e0c9      	b.n	8002170 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	212c      	movs	r1, #44	; 0x2c
 8001fe2:	fb01 f303 	mul.w	r3, r1, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	3361      	adds	r3, #97	; 0x61
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b05      	cmp	r3, #5
 8001fee:	d109      	bne.n	8002004 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	212c      	movs	r1, #44	; 0x2c
 8001ff6:	fb01 f303 	mul.w	r3, r1, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3360      	adds	r3, #96	; 0x60
 8001ffe:	2205      	movs	r2, #5
 8002000:	701a      	strb	r2, [r3, #0]
 8002002:	e0b5      	b.n	8002170 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	212c      	movs	r1, #44	; 0x2c
 800200a:	fb01 f303 	mul.w	r3, r1, r3
 800200e:	4413      	add	r3, r2
 8002010:	3361      	adds	r3, #97	; 0x61
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b06      	cmp	r3, #6
 8002016:	d009      	beq.n	800202c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	212c      	movs	r1, #44	; 0x2c
 800201e:	fb01 f303 	mul.w	r3, r1, r3
 8002022:	4413      	add	r3, r2
 8002024:	3361      	adds	r3, #97	; 0x61
 8002026:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002028:	2b08      	cmp	r3, #8
 800202a:	d150      	bne.n	80020ce <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	212c      	movs	r1, #44	; 0x2c
 8002032:	fb01 f303 	mul.w	r3, r1, r3
 8002036:	4413      	add	r3, r2
 8002038:	335c      	adds	r3, #92	; 0x5c
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	202c      	movs	r0, #44	; 0x2c
 8002044:	fb00 f303 	mul.w	r3, r0, r3
 8002048:	440b      	add	r3, r1
 800204a:	335c      	adds	r3, #92	; 0x5c
 800204c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	212c      	movs	r1, #44	; 0x2c
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	4413      	add	r3, r2
 800205a:	335c      	adds	r3, #92	; 0x5c
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d912      	bls.n	8002088 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	212c      	movs	r1, #44	; 0x2c
 8002068:	fb01 f303 	mul.w	r3, r1, r3
 800206c:	4413      	add	r3, r2
 800206e:	335c      	adds	r3, #92	; 0x5c
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	212c      	movs	r1, #44	; 0x2c
 800207a:	fb01 f303 	mul.w	r3, r1, r3
 800207e:	4413      	add	r3, r2
 8002080:	3360      	adds	r3, #96	; 0x60
 8002082:	2204      	movs	r2, #4
 8002084:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002086:	e073      	b.n	8002170 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	212c      	movs	r1, #44	; 0x2c
 800208e:	fb01 f303 	mul.w	r3, r1, r3
 8002092:	4413      	add	r3, r2
 8002094:	3360      	adds	r3, #96	; 0x60
 8002096:	2202      	movs	r2, #2
 8002098:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020b0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020b8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	015a      	lsls	r2, r3, #5
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c6:	461a      	mov	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80020cc:	e050      	b.n	8002170 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	212c      	movs	r1, #44	; 0x2c
 80020d4:	fb01 f303 	mul.w	r3, r1, r3
 80020d8:	4413      	add	r3, r2
 80020da:	3361      	adds	r3, #97	; 0x61
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d122      	bne.n	8002128 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	212c      	movs	r1, #44	; 0x2c
 80020e8:	fb01 f303 	mul.w	r3, r1, r3
 80020ec:	4413      	add	r3, r2
 80020ee:	3360      	adds	r3, #96	; 0x60
 80020f0:	2202      	movs	r2, #2
 80020f2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	015a      	lsls	r2, r3, #5
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4413      	add	r3, r2
 80020fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800210a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002112:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	015a      	lsls	r2, r3, #5
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4413      	add	r3, r2
 800211c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002120:	461a      	mov	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	e023      	b.n	8002170 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	212c      	movs	r1, #44	; 0x2c
 800212e:	fb01 f303 	mul.w	r3, r1, r3
 8002132:	4413      	add	r3, r2
 8002134:	3361      	adds	r3, #97	; 0x61
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b07      	cmp	r3, #7
 800213a:	d119      	bne.n	8002170 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	212c      	movs	r1, #44	; 0x2c
 8002142:	fb01 f303 	mul.w	r3, r1, r3
 8002146:	4413      	add	r3, r2
 8002148:	335c      	adds	r3, #92	; 0x5c
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	202c      	movs	r0, #44	; 0x2c
 8002154:	fb00 f303 	mul.w	r3, r0, r3
 8002158:	440b      	add	r3, r1
 800215a:	335c      	adds	r3, #92	; 0x5c
 800215c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	212c      	movs	r1, #44	; 0x2c
 8002164:	fb01 f303 	mul.w	r3, r1, r3
 8002168:	4413      	add	r3, r2
 800216a:	3360      	adds	r3, #96	; 0x60
 800216c:	2204      	movs	r2, #4
 800216e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4413      	add	r3, r2
 8002178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217c:	461a      	mov	r2, r3
 800217e:	2302      	movs	r3, #2
 8002180:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	b2d9      	uxtb	r1, r3
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	202c      	movs	r0, #44	; 0x2c
 800218c:	fb00 f303 	mul.w	r3, r0, r3
 8002190:	4413      	add	r3, r2
 8002192:	3360      	adds	r3, #96	; 0x60
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f005 fa05 	bl	80075a8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800219e:	e061      	b.n	8002264 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	015a      	lsls	r2, r3, #5
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	2b10      	cmp	r3, #16
 80021b4:	d156      	bne.n	8002264 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	212c      	movs	r1, #44	; 0x2c
 80021bc:	fb01 f303 	mul.w	r3, r1, r3
 80021c0:	4413      	add	r3, r2
 80021c2:	333f      	adds	r3, #63	; 0x3f
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d111      	bne.n	80021ee <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	212c      	movs	r1, #44	; 0x2c
 80021d0:	fb01 f303 	mul.w	r3, r1, r3
 80021d4:	4413      	add	r3, r2
 80021d6:	335c      	adds	r3, #92	; 0x5c
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	4611      	mov	r1, r2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f002 ff39 	bl	800505e <USB_HC_Halt>
 80021ec:	e031      	b.n	8002252 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	212c      	movs	r1, #44	; 0x2c
 80021f4:	fb01 f303 	mul.w	r3, r1, r3
 80021f8:	4413      	add	r3, r2
 80021fa:	333f      	adds	r3, #63	; 0x3f
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d009      	beq.n	8002216 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	212c      	movs	r1, #44	; 0x2c
 8002208:	fb01 f303 	mul.w	r3, r1, r3
 800220c:	4413      	add	r3, r2
 800220e:	333f      	adds	r3, #63	; 0x3f
 8002210:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002212:	2b02      	cmp	r3, #2
 8002214:	d11d      	bne.n	8002252 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	212c      	movs	r1, #44	; 0x2c
 800221c:	fb01 f303 	mul.w	r3, r1, r3
 8002220:	4413      	add	r3, r2
 8002222:	335c      	adds	r3, #92	; 0x5c
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d110      	bne.n	8002252 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	212c      	movs	r1, #44	; 0x2c
 8002236:	fb01 f303 	mul.w	r3, r1, r3
 800223a:	4413      	add	r3, r2
 800223c:	3361      	adds	r3, #97	; 0x61
 800223e:	2203      	movs	r2, #3
 8002240:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f002 ff06 	bl	800505e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	015a      	lsls	r2, r3, #5
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4413      	add	r3, r2
 800225a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800225e:	461a      	mov	r2, r3
 8002260:	2310      	movs	r3, #16
 8002262:	6093      	str	r3, [r2, #8]
}
 8002264:	bf00      	nop
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	015a      	lsls	r2, r3, #5
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	4413      	add	r3, r2
 800228e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b04      	cmp	r3, #4
 800229a:	d11a      	bne.n	80022d2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a8:	461a      	mov	r2, r3
 80022aa:	2304      	movs	r3, #4
 80022ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	212c      	movs	r1, #44	; 0x2c
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	3361      	adds	r3, #97	; 0x61
 80022bc:	2206      	movs	r2, #6
 80022be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	4611      	mov	r1, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f002 fec7 	bl	800505e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80022d0:	e331      	b.n	8002936 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0320 	and.w	r3, r3, #32
 80022e4:	2b20      	cmp	r3, #32
 80022e6:	d12e      	bne.n	8002346 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	015a      	lsls	r2, r3, #5
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f4:	461a      	mov	r2, r3
 80022f6:	2320      	movs	r3, #32
 80022f8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	333d      	adds	r3, #61	; 0x3d
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b01      	cmp	r3, #1
 800230c:	f040 8313 	bne.w	8002936 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	212c      	movs	r1, #44	; 0x2c
 8002316:	fb01 f303 	mul.w	r3, r1, r3
 800231a:	4413      	add	r3, r2
 800231c:	333d      	adds	r3, #61	; 0x3d
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	212c      	movs	r1, #44	; 0x2c
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	3360      	adds	r3, #96	; 0x60
 8002330:	2202      	movs	r2, #2
 8002332:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	4611      	mov	r1, r2
 800233e:	4618      	mov	r0, r3
 8002340:	f002 fe8d 	bl	800505e <USB_HC_Halt>
}
 8002344:	e2f7      	b.n	8002936 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	015a      	lsls	r2, r3, #5
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	4413      	add	r3, r2
 800234e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800235c:	d112      	bne.n	8002384 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	4413      	add	r3, r2
 8002366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236a:	461a      	mov	r2, r3
 800236c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002370:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	4611      	mov	r1, r2
 800237c:	4618      	mov	r0, r3
 800237e:	f002 fe6e 	bl	800505e <USB_HC_Halt>
}
 8002382:	e2d8      	b.n	8002936 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	015a      	lsls	r2, r3, #5
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	4413      	add	r3, r2
 800238c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b01      	cmp	r3, #1
 8002398:	d140      	bne.n	800241c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	212c      	movs	r1, #44	; 0x2c
 80023a0:	fb01 f303 	mul.w	r3, r1, r3
 80023a4:	4413      	add	r3, r2
 80023a6:	335c      	adds	r3, #92	; 0x5c
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023be:	2b40      	cmp	r3, #64	; 0x40
 80023c0:	d111      	bne.n	80023e6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	212c      	movs	r1, #44	; 0x2c
 80023c8:	fb01 f303 	mul.w	r3, r1, r3
 80023cc:	4413      	add	r3, r2
 80023ce:	333d      	adds	r3, #61	; 0x3d
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e0:	461a      	mov	r2, r3
 80023e2:	2340      	movs	r3, #64	; 0x40
 80023e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f2:	461a      	mov	r2, r3
 80023f4:	2301      	movs	r3, #1
 80023f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	212c      	movs	r1, #44	; 0x2c
 80023fe:	fb01 f303 	mul.w	r3, r1, r3
 8002402:	4413      	add	r3, r2
 8002404:	3361      	adds	r3, #97	; 0x61
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f002 fe22 	bl	800505e <USB_HC_Halt>
}
 800241a:	e28c      	b.n	8002936 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	015a      	lsls	r2, r3, #5
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	4413      	add	r3, r2
 8002424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242e:	2b40      	cmp	r3, #64	; 0x40
 8002430:	d12c      	bne.n	800248c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	212c      	movs	r1, #44	; 0x2c
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	4413      	add	r3, r2
 800243e:	3361      	adds	r3, #97	; 0x61
 8002440:	2204      	movs	r2, #4
 8002442:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	212c      	movs	r1, #44	; 0x2c
 800244a:	fb01 f303 	mul.w	r3, r1, r3
 800244e:	4413      	add	r3, r2
 8002450:	333d      	adds	r3, #61	; 0x3d
 8002452:	2201      	movs	r2, #1
 8002454:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	212c      	movs	r1, #44	; 0x2c
 800245c:	fb01 f303 	mul.w	r3, r1, r3
 8002460:	4413      	add	r3, r2
 8002462:	335c      	adds	r3, #92	; 0x5c
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	4611      	mov	r1, r2
 8002472:	4618      	mov	r0, r3
 8002474:	f002 fdf3 	bl	800505e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	4413      	add	r3, r2
 8002480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002484:	461a      	mov	r2, r3
 8002486:	2340      	movs	r3, #64	; 0x40
 8002488:	6093      	str	r3, [r2, #8]
}
 800248a:	e254      	b.n	8002936 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	4413      	add	r3, r2
 8002494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d11a      	bne.n	80024d8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ae:	461a      	mov	r2, r3
 80024b0:	2308      	movs	r3, #8
 80024b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	212c      	movs	r1, #44	; 0x2c
 80024ba:	fb01 f303 	mul.w	r3, r1, r3
 80024be:	4413      	add	r3, r2
 80024c0:	3361      	adds	r3, #97	; 0x61
 80024c2:	2205      	movs	r2, #5
 80024c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f002 fdc4 	bl	800505e <USB_HC_Halt>
}
 80024d6:	e22e      	b.n	8002936 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	2b10      	cmp	r3, #16
 80024ec:	d140      	bne.n	8002570 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	212c      	movs	r1, #44	; 0x2c
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	4413      	add	r3, r2
 80024fa:	335c      	adds	r3, #92	; 0x5c
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	212c      	movs	r1, #44	; 0x2c
 8002506:	fb01 f303 	mul.w	r3, r1, r3
 800250a:	4413      	add	r3, r2
 800250c:	3361      	adds	r3, #97	; 0x61
 800250e:	2203      	movs	r2, #3
 8002510:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	212c      	movs	r1, #44	; 0x2c
 8002518:	fb01 f303 	mul.w	r3, r1, r3
 800251c:	4413      	add	r3, r2
 800251e:	333d      	adds	r3, #61	; 0x3d
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d112      	bne.n	800254c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	212c      	movs	r1, #44	; 0x2c
 800252c:	fb01 f303 	mul.w	r3, r1, r3
 8002530:	4413      	add	r3, r2
 8002532:	333c      	adds	r3, #60	; 0x3c
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d108      	bne.n	800254c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	212c      	movs	r1, #44	; 0x2c
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	4413      	add	r3, r2
 8002546:	333d      	adds	r3, #61	; 0x3d
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	4611      	mov	r1, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f002 fd81 	bl	800505e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	4413      	add	r3, r2
 8002564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002568:	461a      	mov	r2, r3
 800256a:	2310      	movs	r3, #16
 800256c:	6093      	str	r3, [r2, #8]
}
 800256e:	e1e2      	b.n	8002936 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	4413      	add	r3, r2
 8002578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002582:	2b80      	cmp	r3, #128	; 0x80
 8002584:	d164      	bne.n	8002650 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d111      	bne.n	80025b2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	212c      	movs	r1, #44	; 0x2c
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	4413      	add	r3, r2
 800259a:	3361      	adds	r3, #97	; 0x61
 800259c:	2206      	movs	r2, #6
 800259e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f002 fd57 	bl	800505e <USB_HC_Halt>
 80025b0:	e044      	b.n	800263c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	212c      	movs	r1, #44	; 0x2c
 80025b8:	fb01 f303 	mul.w	r3, r1, r3
 80025bc:	4413      	add	r3, r2
 80025be:	335c      	adds	r3, #92	; 0x5c
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	202c      	movs	r0, #44	; 0x2c
 80025ca:	fb00 f303 	mul.w	r3, r0, r3
 80025ce:	440b      	add	r3, r1
 80025d0:	335c      	adds	r3, #92	; 0x5c
 80025d2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	212c      	movs	r1, #44	; 0x2c
 80025da:	fb01 f303 	mul.w	r3, r1, r3
 80025de:	4413      	add	r3, r2
 80025e0:	335c      	adds	r3, #92	; 0x5c
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d920      	bls.n	800262a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	212c      	movs	r1, #44	; 0x2c
 80025ee:	fb01 f303 	mul.w	r3, r1, r3
 80025f2:	4413      	add	r3, r2
 80025f4:	335c      	adds	r3, #92	; 0x5c
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	212c      	movs	r1, #44	; 0x2c
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	4413      	add	r3, r2
 8002606:	3360      	adds	r3, #96	; 0x60
 8002608:	2204      	movs	r2, #4
 800260a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	b2d9      	uxtb	r1, r3
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	202c      	movs	r0, #44	; 0x2c
 8002616:	fb00 f303 	mul.w	r3, r0, r3
 800261a:	4413      	add	r3, r2
 800261c:	3360      	adds	r3, #96	; 0x60
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	461a      	mov	r2, r3
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f004 ffc0 	bl	80075a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002628:	e008      	b.n	800263c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	3360      	adds	r3, #96	; 0x60
 8002638:	2202      	movs	r2, #2
 800263a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	4413      	add	r3, r2
 8002644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002648:	461a      	mov	r2, r3
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	6093      	str	r3, [r2, #8]
}
 800264e:	e172      	b.n	8002936 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	4413      	add	r3, r2
 8002658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002666:	d11b      	bne.n	80026a0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	212c      	movs	r1, #44	; 0x2c
 800266e:	fb01 f303 	mul.w	r3, r1, r3
 8002672:	4413      	add	r3, r2
 8002674:	3361      	adds	r3, #97	; 0x61
 8002676:	2208      	movs	r2, #8
 8002678:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	4611      	mov	r1, r2
 8002684:	4618      	mov	r0, r3
 8002686:	f002 fcea 	bl	800505e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	4413      	add	r3, r2
 8002692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002696:	461a      	mov	r2, r3
 8002698:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800269c:	6093      	str	r3, [r2, #8]
}
 800269e:	e14a      	b.n	8002936 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	f040 813f 	bne.w	8002936 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	212c      	movs	r1, #44	; 0x2c
 80026be:	fb01 f303 	mul.w	r3, r1, r3
 80026c2:	4413      	add	r3, r2
 80026c4:	3361      	adds	r3, #97	; 0x61
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d17d      	bne.n	80027c8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	212c      	movs	r1, #44	; 0x2c
 80026d2:	fb01 f303 	mul.w	r3, r1, r3
 80026d6:	4413      	add	r3, r2
 80026d8:	3360      	adds	r3, #96	; 0x60
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	212c      	movs	r1, #44	; 0x2c
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	333f      	adds	r3, #63	; 0x3f
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d00a      	beq.n	8002708 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	212c      	movs	r1, #44	; 0x2c
 80026f8:	fb01 f303 	mul.w	r3, r1, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	333f      	adds	r3, #63	; 0x3f
 8002700:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002702:	2b03      	cmp	r3, #3
 8002704:	f040 8100 	bne.w	8002908 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d113      	bne.n	8002738 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	212c      	movs	r1, #44	; 0x2c
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	4413      	add	r3, r2
 800271c:	3355      	adds	r3, #85	; 0x55
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	f083 0301 	eor.w	r3, r3, #1
 8002724:	b2d8      	uxtb	r0, r3
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	212c      	movs	r1, #44	; 0x2c
 800272c:	fb01 f303 	mul.w	r3, r1, r3
 8002730:	4413      	add	r3, r2
 8002732:	3355      	adds	r3, #85	; 0x55
 8002734:	4602      	mov	r2, r0
 8002736:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	2b01      	cmp	r3, #1
 800273e:	f040 80e3 	bne.w	8002908 <HCD_HC_OUT_IRQHandler+0x69c>
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	212c      	movs	r1, #44	; 0x2c
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	4413      	add	r3, r2
 800274e:	334c      	adds	r3, #76	; 0x4c
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 80d8 	beq.w	8002908 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	212c      	movs	r1, #44	; 0x2c
 800275e:	fb01 f303 	mul.w	r3, r1, r3
 8002762:	4413      	add	r3, r2
 8002764:	334c      	adds	r3, #76	; 0x4c
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	202c      	movs	r0, #44	; 0x2c
 800276e:	fb00 f202 	mul.w	r2, r0, r2
 8002772:	440a      	add	r2, r1
 8002774:	3240      	adds	r2, #64	; 0x40
 8002776:	8812      	ldrh	r2, [r2, #0]
 8002778:	4413      	add	r3, r2
 800277a:	3b01      	subs	r3, #1
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	202c      	movs	r0, #44	; 0x2c
 8002782:	fb00 f202 	mul.w	r2, r0, r2
 8002786:	440a      	add	r2, r1
 8002788:	3240      	adds	r2, #64	; 0x40
 800278a:	8812      	ldrh	r2, [r2, #0]
 800278c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80b5 	beq.w	8002908 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	212c      	movs	r1, #44	; 0x2c
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	3355      	adds	r3, #85	; 0x55
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	f083 0301 	eor.w	r3, r3, #1
 80027b2:	b2d8      	uxtb	r0, r3
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	212c      	movs	r1, #44	; 0x2c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	4413      	add	r3, r2
 80027c0:	3355      	adds	r3, #85	; 0x55
 80027c2:	4602      	mov	r2, r0
 80027c4:	701a      	strb	r2, [r3, #0]
 80027c6:	e09f      	b.n	8002908 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	212c      	movs	r1, #44	; 0x2c
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	3361      	adds	r3, #97	; 0x61
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b03      	cmp	r3, #3
 80027da:	d109      	bne.n	80027f0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	212c      	movs	r1, #44	; 0x2c
 80027e2:	fb01 f303 	mul.w	r3, r1, r3
 80027e6:	4413      	add	r3, r2
 80027e8:	3360      	adds	r3, #96	; 0x60
 80027ea:	2202      	movs	r2, #2
 80027ec:	701a      	strb	r2, [r3, #0]
 80027ee:	e08b      	b.n	8002908 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	212c      	movs	r1, #44	; 0x2c
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	4413      	add	r3, r2
 80027fc:	3361      	adds	r3, #97	; 0x61
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b04      	cmp	r3, #4
 8002802:	d109      	bne.n	8002818 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	212c      	movs	r1, #44	; 0x2c
 800280a:	fb01 f303 	mul.w	r3, r1, r3
 800280e:	4413      	add	r3, r2
 8002810:	3360      	adds	r3, #96	; 0x60
 8002812:	2202      	movs	r2, #2
 8002814:	701a      	strb	r2, [r3, #0]
 8002816:	e077      	b.n	8002908 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	212c      	movs	r1, #44	; 0x2c
 800281e:	fb01 f303 	mul.w	r3, r1, r3
 8002822:	4413      	add	r3, r2
 8002824:	3361      	adds	r3, #97	; 0x61
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b05      	cmp	r3, #5
 800282a:	d109      	bne.n	8002840 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	212c      	movs	r1, #44	; 0x2c
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	3360      	adds	r3, #96	; 0x60
 800283a:	2205      	movs	r2, #5
 800283c:	701a      	strb	r2, [r3, #0]
 800283e:	e063      	b.n	8002908 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	212c      	movs	r1, #44	; 0x2c
 8002846:	fb01 f303 	mul.w	r3, r1, r3
 800284a:	4413      	add	r3, r2
 800284c:	3361      	adds	r3, #97	; 0x61
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b06      	cmp	r3, #6
 8002852:	d009      	beq.n	8002868 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	212c      	movs	r1, #44	; 0x2c
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	3361      	adds	r3, #97	; 0x61
 8002862:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002864:	2b08      	cmp	r3, #8
 8002866:	d14f      	bne.n	8002908 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	212c      	movs	r1, #44	; 0x2c
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	4413      	add	r3, r2
 8002874:	335c      	adds	r3, #92	; 0x5c
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	202c      	movs	r0, #44	; 0x2c
 8002880:	fb00 f303 	mul.w	r3, r0, r3
 8002884:	440b      	add	r3, r1
 8002886:	335c      	adds	r3, #92	; 0x5c
 8002888:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	212c      	movs	r1, #44	; 0x2c
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	335c      	adds	r3, #92	; 0x5c
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2b02      	cmp	r3, #2
 800289c:	d912      	bls.n	80028c4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	212c      	movs	r1, #44	; 0x2c
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	335c      	adds	r3, #92	; 0x5c
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	212c      	movs	r1, #44	; 0x2c
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	3360      	adds	r3, #96	; 0x60
 80028be:	2204      	movs	r2, #4
 80028c0:	701a      	strb	r2, [r3, #0]
 80028c2:	e021      	b.n	8002908 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	212c      	movs	r1, #44	; 0x2c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	3360      	adds	r3, #96	; 0x60
 80028d2:	2202      	movs	r2, #2
 80028d4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028ec:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028f4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002902:	461a      	mov	r2, r3
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	015a      	lsls	r2, r3, #5
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	4413      	add	r3, r2
 8002910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002914:	461a      	mov	r2, r3
 8002916:	2302      	movs	r3, #2
 8002918:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	b2d9      	uxtb	r1, r3
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	202c      	movs	r0, #44	; 0x2c
 8002924:	fb00 f303 	mul.w	r3, r0, r3
 8002928:	4413      	add	r3, r2
 800292a:	3360      	adds	r3, #96	; 0x60
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f004 fe39 	bl	80075a8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002936:	bf00      	nop
 8002938:	3720      	adds	r7, #32
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b08a      	sub	sp, #40	; 0x28
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	0c5b      	lsrs	r3, r3, #17
 8002964:	f003 030f 	and.w	r3, r3, #15
 8002968:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002972:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d004      	beq.n	8002984 <HCD_RXQLVL_IRQHandler+0x46>
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2b05      	cmp	r3, #5
 800297e:	f000 80a9 	beq.w	8002ad4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002982:	e0aa      	b.n	8002ada <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80a6 	beq.w	8002ad8 <HCD_RXQLVL_IRQHandler+0x19a>
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	212c      	movs	r1, #44	; 0x2c
 8002992:	fb01 f303 	mul.w	r3, r1, r3
 8002996:	4413      	add	r3, r2
 8002998:	3344      	adds	r3, #68	; 0x44
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 809b 	beq.w	8002ad8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	212c      	movs	r1, #44	; 0x2c
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	3350      	adds	r3, #80	; 0x50
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	441a      	add	r2, r3
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	202c      	movs	r0, #44	; 0x2c
 80029bc:	fb00 f303 	mul.w	r3, r0, r3
 80029c0:	440b      	add	r3, r1
 80029c2:	334c      	adds	r3, #76	; 0x4c
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d87a      	bhi.n	8002ac0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6818      	ldr	r0, [r3, #0]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	212c      	movs	r1, #44	; 0x2c
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	4413      	add	r3, r2
 80029da:	3344      	adds	r3, #68	; 0x44
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	b292      	uxth	r2, r2
 80029e2:	4619      	mov	r1, r3
 80029e4:	f001 fe92 	bl	800470c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	3344      	adds	r3, #68	; 0x44
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	441a      	add	r2, r3
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	202c      	movs	r0, #44	; 0x2c
 8002a02:	fb00 f303 	mul.w	r3, r0, r3
 8002a06:	440b      	add	r3, r1
 8002a08:	3344      	adds	r3, #68	; 0x44
 8002a0a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	212c      	movs	r1, #44	; 0x2c
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	3350      	adds	r3, #80	; 0x50
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	441a      	add	r2, r3
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	202c      	movs	r0, #44	; 0x2c
 8002a26:	fb00 f303 	mul.w	r3, r0, r3
 8002a2a:	440b      	add	r3, r1
 8002a2c:	3350      	adds	r3, #80	; 0x50
 8002a2e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	0cdb      	lsrs	r3, r3, #19
 8002a40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a44:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	212c      	movs	r1, #44	; 0x2c
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	3340      	adds	r3, #64	; 0x40
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d13c      	bne.n	8002ad8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d039      	beq.n	8002ad8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a7a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a82:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a90:	461a      	mov	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	212c      	movs	r1, #44	; 0x2c
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3354      	adds	r3, #84	; 0x54
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	f083 0301 	eor.w	r3, r3, #1
 8002aaa:	b2d8      	uxtb	r0, r3
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	3354      	adds	r3, #84	; 0x54
 8002aba:	4602      	mov	r2, r0
 8002abc:	701a      	strb	r2, [r3, #0]
      break;
 8002abe:	e00b      	b.n	8002ad8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	212c      	movs	r1, #44	; 0x2c
 8002ac6:	fb01 f303 	mul.w	r3, r1, r3
 8002aca:	4413      	add	r3, r2
 8002acc:	3360      	adds	r3, #96	; 0x60
 8002ace:	2204      	movs	r2, #4
 8002ad0:	701a      	strb	r2, [r3, #0]
      break;
 8002ad2:	e001      	b.n	8002ad8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002ad4:	bf00      	nop
 8002ad6:	e000      	b.n	8002ada <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002ad8:	bf00      	nop
  }
}
 8002ada:	bf00      	nop
 8002adc:	3728      	adds	r7, #40	; 0x28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b086      	sub	sp, #24
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b0e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d10b      	bne.n	8002b32 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d102      	bne.n	8002b2a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f004 fd23 	bl	8007570 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f043 0302 	orr.w	r3, r3, #2
 8002b30:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d132      	bne.n	8002ba2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f043 0308 	orr.w	r3, r3, #8
 8002b42:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d126      	bne.n	8002b9c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d113      	bne.n	8002b7e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002b5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b60:	d106      	bne.n	8002b70 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2102      	movs	r1, #2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f001 ff3d 	bl	80049e8 <USB_InitFSLSPClkSel>
 8002b6e:	e011      	b.n	8002b94 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2101      	movs	r1, #1
 8002b76:	4618      	mov	r0, r3
 8002b78:	f001 ff36 	bl	80049e8 <USB_InitFSLSPClkSel>
 8002b7c:	e00a      	b.n	8002b94 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d106      	bne.n	8002b94 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002b92:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f004 fd15 	bl	80075c4 <HAL_HCD_PortEnabled_Callback>
 8002b9a:	e002      	b.n	8002ba2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f004 fd1f 	bl	80075e0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b20      	cmp	r3, #32
 8002baa:	d103      	bne.n	8002bb4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f043 0320 	orr.w	r3, r3, #32
 8002bb2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bba:	461a      	mov	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	6013      	str	r3, [r2, #0]
}
 8002bc0:	bf00      	nop
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e12b      	b.n	8002e32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fd fecc 	bl	800098c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2224      	movs	r2, #36	; 0x24
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0201 	bic.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c2c:	f001 fa20 	bl	8004070 <HAL_RCC_GetPCLK1Freq>
 8002c30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4a81      	ldr	r2, [pc, #516]	; (8002e3c <HAL_I2C_Init+0x274>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d807      	bhi.n	8002c4c <HAL_I2C_Init+0x84>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4a80      	ldr	r2, [pc, #512]	; (8002e40 <HAL_I2C_Init+0x278>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	bf94      	ite	ls
 8002c44:	2301      	movls	r3, #1
 8002c46:	2300      	movhi	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	e006      	b.n	8002c5a <HAL_I2C_Init+0x92>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4a7d      	ldr	r2, [pc, #500]	; (8002e44 <HAL_I2C_Init+0x27c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	bf94      	ite	ls
 8002c54:	2301      	movls	r3, #1
 8002c56:	2300      	movhi	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e0e7      	b.n	8002e32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4a78      	ldr	r2, [pc, #480]	; (8002e48 <HAL_I2C_Init+0x280>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	0c9b      	lsrs	r3, r3, #18
 8002c6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	4a6a      	ldr	r2, [pc, #424]	; (8002e3c <HAL_I2C_Init+0x274>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d802      	bhi.n	8002c9c <HAL_I2C_Init+0xd4>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	e009      	b.n	8002cb0 <HAL_I2C_Init+0xe8>
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ca2:	fb02 f303 	mul.w	r3, r2, r3
 8002ca6:	4a69      	ldr	r2, [pc, #420]	; (8002e4c <HAL_I2C_Init+0x284>)
 8002ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cac:	099b      	lsrs	r3, r3, #6
 8002cae:	3301      	adds	r3, #1
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	495c      	ldr	r1, [pc, #368]	; (8002e3c <HAL_I2C_Init+0x274>)
 8002ccc:	428b      	cmp	r3, r1
 8002cce:	d819      	bhi.n	8002d04 <HAL_I2C_Init+0x13c>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1e59      	subs	r1, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cde:	1c59      	adds	r1, r3, #1
 8002ce0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ce4:	400b      	ands	r3, r1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_I2C_Init+0x138>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1e59      	subs	r1, r3, #1
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfe:	e051      	b.n	8002da4 <HAL_I2C_Init+0x1dc>
 8002d00:	2304      	movs	r3, #4
 8002d02:	e04f      	b.n	8002da4 <HAL_I2C_Init+0x1dc>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d111      	bne.n	8002d30 <HAL_I2C_Init+0x168>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	1e58      	subs	r0, r3, #1
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6859      	ldr	r1, [r3, #4]
 8002d14:	460b      	mov	r3, r1
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	440b      	add	r3, r1
 8002d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d1e:	3301      	adds	r3, #1
 8002d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bf0c      	ite	eq
 8002d28:	2301      	moveq	r3, #1
 8002d2a:	2300      	movne	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	e012      	b.n	8002d56 <HAL_I2C_Init+0x18e>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	1e58      	subs	r0, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6859      	ldr	r1, [r3, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	0099      	lsls	r1, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d46:	3301      	adds	r3, #1
 8002d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	bf0c      	ite	eq
 8002d50:	2301      	moveq	r3, #1
 8002d52:	2300      	movne	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_I2C_Init+0x196>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e022      	b.n	8002da4 <HAL_I2C_Init+0x1dc>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10e      	bne.n	8002d84 <HAL_I2C_Init+0x1bc>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	1e58      	subs	r0, r3, #1
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6859      	ldr	r1, [r3, #4]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	440b      	add	r3, r1
 8002d74:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d78:	3301      	adds	r3, #1
 8002d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d82:	e00f      	b.n	8002da4 <HAL_I2C_Init+0x1dc>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	1e58      	subs	r0, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6859      	ldr	r1, [r3, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	0099      	lsls	r1, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	6809      	ldr	r1, [r1, #0]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69da      	ldr	r2, [r3, #28]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6911      	ldr	r1, [r2, #16]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	68d2      	ldr	r2, [r2, #12]
 8002dde:	4311      	orrs	r1, r2
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	430b      	orrs	r3, r1
 8002de6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695a      	ldr	r2, [r3, #20]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	000186a0 	.word	0x000186a0
 8002e40:	001e847f 	.word	0x001e847f
 8002e44:	003d08ff 	.word	0x003d08ff
 8002e48:	431bde83 	.word	0x431bde83
 8002e4c:	10624dd3 	.word	0x10624dd3

08002e50 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b088      	sub	sp, #32
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e128      	b.n	80030b4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d109      	bne.n	8002e82 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a90      	ldr	r2, [pc, #576]	; (80030bc <HAL_I2S_Init+0x26c>)
 8002e7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7fd fdcd 	bl	8000a1c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2202      	movs	r2, #2
 8002e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002e98:	f023 030f 	bic.w	r3, r3, #15
 8002e9c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d060      	beq.n	8002f70 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d102      	bne.n	8002ebc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002eb6:	2310      	movs	r3, #16
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	e001      	b.n	8002ec0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002ebc:	2320      	movs	r3, #32
 8002ebe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b20      	cmp	r3, #32
 8002ec6:	d802      	bhi.n	8002ece <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002ece:	2001      	movs	r0, #1
 8002ed0:	f001 f9c4 	bl	800425c <HAL_RCCEx_GetPeriphCLKFreq>
 8002ed4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ede:	d125      	bne.n	8002f2c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d010      	beq.n	8002f0a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	461a      	mov	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f04:	3305      	adds	r3, #5
 8002f06:	613b      	str	r3, [r7, #16]
 8002f08:	e01f      	b.n	8002f4a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f26:	3305      	adds	r3, #5
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	e00e      	b.n	8002f4a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f34:	4613      	mov	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f46:	3305      	adds	r3, #5
 8002f48:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4a5c      	ldr	r2, [pc, #368]	; (80030c0 <HAL_I2S_Init+0x270>)
 8002f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f52:	08db      	lsrs	r3, r3, #3
 8002f54:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	085b      	lsrs	r3, r3, #1
 8002f66:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	021b      	lsls	r3, r3, #8
 8002f6c:	61bb      	str	r3, [r7, #24]
 8002f6e:	e003      	b.n	8002f78 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002f70:	2302      	movs	r3, #2
 8002f72:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d902      	bls.n	8002f84 <HAL_I2S_Init+0x134>
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	2bff      	cmp	r3, #255	; 0xff
 8002f82:	d907      	bls.n	8002f94 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f88:	f043 0210 	orr.w	r2, r3, #16
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e08f      	b.n	80030b4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	ea42 0103 	orr.w	r1, r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002fb2:	f023 030f 	bic.w	r3, r3, #15
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6851      	ldr	r1, [r2, #4]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6892      	ldr	r2, [r2, #8]
 8002fbe:	4311      	orrs	r1, r2
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	68d2      	ldr	r2, [r2, #12]
 8002fc4:	4311      	orrs	r1, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6992      	ldr	r2, [r2, #24]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fd6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d161      	bne.n	80030a4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a38      	ldr	r2, [pc, #224]	; (80030c4 <HAL_I2S_Init+0x274>)
 8002fe4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a37      	ldr	r2, [pc, #220]	; (80030c8 <HAL_I2S_Init+0x278>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d101      	bne.n	8002ff4 <HAL_I2S_Init+0x1a4>
 8002ff0:	4b36      	ldr	r3, [pc, #216]	; (80030cc <HAL_I2S_Init+0x27c>)
 8002ff2:	e001      	b.n	8002ff8 <HAL_I2S_Init+0x1a8>
 8002ff4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	4932      	ldr	r1, [pc, #200]	; (80030c8 <HAL_I2S_Init+0x278>)
 8003000:	428a      	cmp	r2, r1
 8003002:	d101      	bne.n	8003008 <HAL_I2S_Init+0x1b8>
 8003004:	4a31      	ldr	r2, [pc, #196]	; (80030cc <HAL_I2S_Init+0x27c>)
 8003006:	e001      	b.n	800300c <HAL_I2S_Init+0x1bc>
 8003008:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800300c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003010:	f023 030f 	bic.w	r3, r3, #15
 8003014:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a2b      	ldr	r2, [pc, #172]	; (80030c8 <HAL_I2S_Init+0x278>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d101      	bne.n	8003024 <HAL_I2S_Init+0x1d4>
 8003020:	4b2a      	ldr	r3, [pc, #168]	; (80030cc <HAL_I2S_Init+0x27c>)
 8003022:	e001      	b.n	8003028 <HAL_I2S_Init+0x1d8>
 8003024:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003028:	2202      	movs	r2, #2
 800302a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a25      	ldr	r2, [pc, #148]	; (80030c8 <HAL_I2S_Init+0x278>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d101      	bne.n	800303a <HAL_I2S_Init+0x1ea>
 8003036:	4b25      	ldr	r3, [pc, #148]	; (80030cc <HAL_I2S_Init+0x27c>)
 8003038:	e001      	b.n	800303e <HAL_I2S_Init+0x1ee>
 800303a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800304a:	d003      	beq.n	8003054 <HAL_I2S_Init+0x204>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d103      	bne.n	800305c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003054:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	e001      	b.n	8003060 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800305c:	2300      	movs	r3, #0
 800305e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800306a:	4313      	orrs	r3, r2
 800306c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003074:	4313      	orrs	r3, r2
 8003076:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800307e:	4313      	orrs	r3, r2
 8003080:	b29a      	uxth	r2, r3
 8003082:	897b      	ldrh	r3, [r7, #10]
 8003084:	4313      	orrs	r3, r2
 8003086:	b29b      	uxth	r3, r3
 8003088:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800308c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a0d      	ldr	r2, [pc, #52]	; (80030c8 <HAL_I2S_Init+0x278>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d101      	bne.n	800309c <HAL_I2S_Init+0x24c>
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <HAL_I2S_Init+0x27c>)
 800309a:	e001      	b.n	80030a0 <HAL_I2S_Init+0x250>
 800309c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030a0:	897a      	ldrh	r2, [r7, #10]
 80030a2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3720      	adds	r7, #32
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	080031c7 	.word	0x080031c7
 80030c0:	cccccccd 	.word	0xcccccccd
 80030c4:	080032dd 	.word	0x080032dd
 80030c8:	40003800 	.word	0x40003800
 80030cc:	40003400 	.word	0x40003400

080030d0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	881a      	ldrh	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	1c9a      	adds	r2, r3, #2
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10e      	bne.n	8003160 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003150:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff ffb8 	bl	80030d0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317a:	b292      	uxth	r2, r2
 800317c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003182:	1c9a      	adds	r2, r3, #2
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800318c:	b29b      	uxth	r3, r3
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800319a:	b29b      	uxth	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10e      	bne.n	80031be <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031ae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff ff93 	bl	80030e4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b086      	sub	sp, #24
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d13a      	bne.n	8003258 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d109      	bne.n	8003200 <I2S_IRQHandler+0x3a>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f6:	2b40      	cmp	r3, #64	; 0x40
 80031f8:	d102      	bne.n	8003200 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff ffb4 	bl	8003168 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003206:	2b40      	cmp	r3, #64	; 0x40
 8003208:	d126      	bne.n	8003258 <I2S_IRQHandler+0x92>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b20      	cmp	r3, #32
 8003216:	d11f      	bne.n	8003258 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003226:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003228:	2300      	movs	r3, #0
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	613b      	str	r3, [r7, #16]
 800323c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	f043 0202 	orr.w	r2, r3, #2
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff ff50 	bl	80030f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b03      	cmp	r3, #3
 8003262:	d136      	bne.n	80032d2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b02      	cmp	r3, #2
 800326c:	d109      	bne.n	8003282 <I2S_IRQHandler+0xbc>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003278:	2b80      	cmp	r3, #128	; 0x80
 800327a:	d102      	bne.n	8003282 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff ff45 	bl	800310c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b08      	cmp	r3, #8
 800328a:	d122      	bne.n	80032d2 <I2S_IRQHandler+0x10c>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 0320 	and.w	r3, r3, #32
 8003296:	2b20      	cmp	r3, #32
 8003298:	d11b      	bne.n	80032d2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032a8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c4:	f043 0204 	orr.w	r2, r3, #4
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff ff13 	bl	80030f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032d2:	bf00      	nop
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a92      	ldr	r2, [pc, #584]	; (800353c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d101      	bne.n	80032fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80032f6:	4b92      	ldr	r3, [pc, #584]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80032f8:	e001      	b.n	80032fe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80032fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a8b      	ldr	r2, [pc, #556]	; (800353c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d101      	bne.n	8003318 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003314:	4b8a      	ldr	r3, [pc, #552]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003316:	e001      	b.n	800331c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003318:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003328:	d004      	beq.n	8003334 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	f040 8099 	bne.w	8003466 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b02      	cmp	r3, #2
 800333c:	d107      	bne.n	800334e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f925 	bl	8003598 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b01      	cmp	r3, #1
 8003356:	d107      	bne.n	8003368 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f9c8 	bl	80036f8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336e:	2b40      	cmp	r3, #64	; 0x40
 8003370:	d13a      	bne.n	80033e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b00      	cmp	r3, #0
 800337a:	d035      	beq.n	80033e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a6e      	ldr	r2, [pc, #440]	; (800353c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d101      	bne.n	800338a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003386:	4b6e      	ldr	r3, [pc, #440]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003388:	e001      	b.n	800338e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800338a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4969      	ldr	r1, [pc, #420]	; (800353c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003396:	428b      	cmp	r3, r1
 8003398:	d101      	bne.n	800339e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800339a:	4b69      	ldr	r3, [pc, #420]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800339c:	e001      	b.n	80033a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800339e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033a6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	f043 0202 	orr.w	r2, r3, #2
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7ff fe88 	bl	80030f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	f040 80c3 	bne.w	800357a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f003 0320 	and.w	r3, r3, #32
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 80bd 	beq.w	800357a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800340e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a49      	ldr	r2, [pc, #292]	; (800353c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d101      	bne.n	800341e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800341a:	4b49      	ldr	r3, [pc, #292]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800341c:	e001      	b.n	8003422 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800341e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4944      	ldr	r1, [pc, #272]	; (800353c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800342a:	428b      	cmp	r3, r1
 800342c:	d101      	bne.n	8003432 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800342e:	4b44      	ldr	r3, [pc, #272]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003430:	e001      	b.n	8003436 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003432:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003436:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800343a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800343c:	2300      	movs	r3, #0
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	f043 0204 	orr.w	r2, r3, #4
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff fe4a 	bl	80030f8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003464:	e089      	b.n	800357a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b02      	cmp	r3, #2
 800346e:	d107      	bne.n	8003480 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f8be 	bl	80035fc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b01      	cmp	r3, #1
 8003488:	d107      	bne.n	800349a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003490:	2b00      	cmp	r3, #0
 8003492:	d002      	beq.n	800349a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f8fd 	bl	8003694 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a0:	2b40      	cmp	r3, #64	; 0x40
 80034a2:	d12f      	bne.n	8003504 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d02a      	beq.n	8003504 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034bc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1e      	ldr	r2, [pc, #120]	; (800353c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d101      	bne.n	80034cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80034c8:	4b1d      	ldr	r3, [pc, #116]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034ca:	e001      	b.n	80034d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80034cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4919      	ldr	r1, [pc, #100]	; (800353c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80034d8:	428b      	cmp	r3, r1
 80034da:	d101      	bne.n	80034e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80034dc:	4b18      	ldr	r3, [pc, #96]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80034de:	e001      	b.n	80034e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80034e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	f043 0202 	orr.w	r2, r3, #2
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff fdfa 	bl	80030f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b08      	cmp	r3, #8
 800350c:	d136      	bne.n	800357c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b00      	cmp	r3, #0
 8003516:	d031      	beq.n	800357c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a07      	ldr	r2, [pc, #28]	; (800353c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d101      	bne.n	8003526 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003522:	4b07      	ldr	r3, [pc, #28]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003524:	e001      	b.n	800352a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003526:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4902      	ldr	r1, [pc, #8]	; (800353c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003532:	428b      	cmp	r3, r1
 8003534:	d106      	bne.n	8003544 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003536:	4b02      	ldr	r3, [pc, #8]	; (8003540 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003538:	e006      	b.n	8003548 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800353a:	bf00      	nop
 800353c:	40003800 	.word	0x40003800
 8003540:	40003400 	.word	0x40003400
 8003544:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003548:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800354c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800355c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	f043 0204 	orr.w	r2, r3, #4
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff fdc0 	bl	80030f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003578:	e000      	b.n	800357c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800357a:	bf00      	nop
}
 800357c:	bf00      	nop
 800357e:	3720      	adds	r7, #32
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	1c99      	adds	r1, r3, #2
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6251      	str	r1, [r2, #36]	; 0x24
 80035aa:	881a      	ldrh	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d113      	bne.n	80035f2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d106      	bne.n	80035f2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff ffc9 	bl	8003584 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	1c99      	adds	r1, r3, #2
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	6251      	str	r1, [r2, #36]	; 0x24
 800360e:	8819      	ldrh	r1, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1d      	ldr	r2, [pc, #116]	; (800368c <I2SEx_TxISR_I2SExt+0x90>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d101      	bne.n	800361e <I2SEx_TxISR_I2SExt+0x22>
 800361a:	4b1d      	ldr	r3, [pc, #116]	; (8003690 <I2SEx_TxISR_I2SExt+0x94>)
 800361c:	e001      	b.n	8003622 <I2SEx_TxISR_I2SExt+0x26>
 800361e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003622:	460a      	mov	r2, r1
 8003624:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d121      	bne.n	8003682 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a12      	ldr	r2, [pc, #72]	; (800368c <I2SEx_TxISR_I2SExt+0x90>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d101      	bne.n	800364c <I2SEx_TxISR_I2SExt+0x50>
 8003648:	4b11      	ldr	r3, [pc, #68]	; (8003690 <I2SEx_TxISR_I2SExt+0x94>)
 800364a:	e001      	b.n	8003650 <I2SEx_TxISR_I2SExt+0x54>
 800364c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	490d      	ldr	r1, [pc, #52]	; (800368c <I2SEx_TxISR_I2SExt+0x90>)
 8003658:	428b      	cmp	r3, r1
 800365a:	d101      	bne.n	8003660 <I2SEx_TxISR_I2SExt+0x64>
 800365c:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <I2SEx_TxISR_I2SExt+0x94>)
 800365e:	e001      	b.n	8003664 <I2SEx_TxISR_I2SExt+0x68>
 8003660:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003664:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003668:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d106      	bne.n	8003682 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff ff81 	bl	8003584 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40003800 	.word	0x40003800
 8003690:	40003400 	.word	0x40003400

08003694 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68d8      	ldr	r0, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	1c99      	adds	r1, r3, #2
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	62d1      	str	r1, [r2, #44]	; 0x2c
 80036ac:	b282      	uxth	r2, r0
 80036ae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	3b01      	subs	r3, #1
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d113      	bne.n	80036f0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036d6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff ff4a 	bl	8003584 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036f0:	bf00      	nop
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a20      	ldr	r2, [pc, #128]	; (8003788 <I2SEx_RxISR_I2SExt+0x90>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d101      	bne.n	800370e <I2SEx_RxISR_I2SExt+0x16>
 800370a:	4b20      	ldr	r3, [pc, #128]	; (800378c <I2SEx_RxISR_I2SExt+0x94>)
 800370c:	e001      	b.n	8003712 <I2SEx_RxISR_I2SExt+0x1a>
 800370e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003712:	68d8      	ldr	r0, [r3, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	1c99      	adds	r1, r3, #2
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800371e:	b282      	uxth	r2, r0
 8003720:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d121      	bne.n	800377e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a12      	ldr	r2, [pc, #72]	; (8003788 <I2SEx_RxISR_I2SExt+0x90>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d101      	bne.n	8003748 <I2SEx_RxISR_I2SExt+0x50>
 8003744:	4b11      	ldr	r3, [pc, #68]	; (800378c <I2SEx_RxISR_I2SExt+0x94>)
 8003746:	e001      	b.n	800374c <I2SEx_RxISR_I2SExt+0x54>
 8003748:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	490d      	ldr	r1, [pc, #52]	; (8003788 <I2SEx_RxISR_I2SExt+0x90>)
 8003754:	428b      	cmp	r3, r1
 8003756:	d101      	bne.n	800375c <I2SEx_RxISR_I2SExt+0x64>
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <I2SEx_RxISR_I2SExt+0x94>)
 800375a:	e001      	b.n	8003760 <I2SEx_RxISR_I2SExt+0x68>
 800375c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003760:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003764:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d106      	bne.n	800377e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff ff03 	bl	8003584 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40003800 	.word	0x40003800
 800378c:	40003400 	.word	0x40003400

08003790 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e267      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d075      	beq.n	800389a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ae:	4b88      	ldr	r3, [pc, #544]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d00c      	beq.n	80037d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ba:	4b85      	ldr	r3, [pc, #532]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d112      	bne.n	80037ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037c6:	4b82      	ldr	r3, [pc, #520]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037d2:	d10b      	bne.n	80037ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d4:	4b7e      	ldr	r3, [pc, #504]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d05b      	beq.n	8003898 <HAL_RCC_OscConfig+0x108>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d157      	bne.n	8003898 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e242      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f4:	d106      	bne.n	8003804 <HAL_RCC_OscConfig+0x74>
 80037f6:	4b76      	ldr	r3, [pc, #472]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a75      	ldr	r2, [pc, #468]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80037fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	e01d      	b.n	8003840 <HAL_RCC_OscConfig+0xb0>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800380c:	d10c      	bne.n	8003828 <HAL_RCC_OscConfig+0x98>
 800380e:	4b70      	ldr	r3, [pc, #448]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a6f      	ldr	r2, [pc, #444]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 8003814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	4b6d      	ldr	r3, [pc, #436]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a6c      	ldr	r2, [pc, #432]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 8003820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	e00b      	b.n	8003840 <HAL_RCC_OscConfig+0xb0>
 8003828:	4b69      	ldr	r3, [pc, #420]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a68      	ldr	r2, [pc, #416]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 800382e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003832:	6013      	str	r3, [r2, #0]
 8003834:	4b66      	ldr	r3, [pc, #408]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a65      	ldr	r2, [pc, #404]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 800383a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800383e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d013      	beq.n	8003870 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7fd fabc 	bl	8000dc4 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003850:	f7fd fab8 	bl	8000dc4 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b64      	cmp	r3, #100	; 0x64
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e207      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003862:	4b5b      	ldr	r3, [pc, #364]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0f0      	beq.n	8003850 <HAL_RCC_OscConfig+0xc0>
 800386e:	e014      	b.n	800389a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7fd faa8 	bl	8000dc4 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003878:	f7fd faa4 	bl	8000dc4 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b64      	cmp	r3, #100	; 0x64
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e1f3      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388a:	4b51      	ldr	r3, [pc, #324]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0xe8>
 8003896:	e000      	b.n	800389a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d063      	beq.n	800396e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038a6:	4b4a      	ldr	r3, [pc, #296]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 030c 	and.w	r3, r3, #12
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00b      	beq.n	80038ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038b2:	4b47      	ldr	r3, [pc, #284]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d11c      	bne.n	80038f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038be:	4b44      	ldr	r3, [pc, #272]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d116      	bne.n	80038f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ca:	4b41      	ldr	r3, [pc, #260]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d005      	beq.n	80038e2 <HAL_RCC_OscConfig+0x152>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d001      	beq.n	80038e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e1c7      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e2:	4b3b      	ldr	r3, [pc, #236]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4937      	ldr	r1, [pc, #220]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038f6:	e03a      	b.n	800396e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d020      	beq.n	8003942 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003900:	4b34      	ldr	r3, [pc, #208]	; (80039d4 <HAL_RCC_OscConfig+0x244>)
 8003902:	2201      	movs	r2, #1
 8003904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003906:	f7fd fa5d 	bl	8000dc4 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800390e:	f7fd fa59 	bl	8000dc4 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e1a8      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003920:	4b2b      	ldr	r3, [pc, #172]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0f0      	beq.n	800390e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800392c:	4b28      	ldr	r3, [pc, #160]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	4925      	ldr	r1, [pc, #148]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 800393c:	4313      	orrs	r3, r2
 800393e:	600b      	str	r3, [r1, #0]
 8003940:	e015      	b.n	800396e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003942:	4b24      	ldr	r3, [pc, #144]	; (80039d4 <HAL_RCC_OscConfig+0x244>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003948:	f7fd fa3c 	bl	8000dc4 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003950:	f7fd fa38 	bl	8000dc4 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e187      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003962:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d036      	beq.n	80039e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d016      	beq.n	80039b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003982:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <HAL_RCC_OscConfig+0x248>)
 8003984:	2201      	movs	r2, #1
 8003986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003988:	f7fd fa1c 	bl	8000dc4 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003990:	f7fd fa18 	bl	8000dc4 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e167      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a2:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_RCC_OscConfig+0x240>)
 80039a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0x200>
 80039ae:	e01b      	b.n	80039e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b0:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <HAL_RCC_OscConfig+0x248>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b6:	f7fd fa05 	bl	8000dc4 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039bc:	e00e      	b.n	80039dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039be:	f7fd fa01 	bl	8000dc4 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d907      	bls.n	80039dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e150      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
 80039d0:	40023800 	.word	0x40023800
 80039d4:	42470000 	.word	0x42470000
 80039d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039dc:	4b88      	ldr	r3, [pc, #544]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 80039de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1ea      	bne.n	80039be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 8097 	beq.w	8003b24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f6:	2300      	movs	r3, #0
 80039f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039fa:	4b81      	ldr	r3, [pc, #516]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10f      	bne.n	8003a26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a06:	2300      	movs	r3, #0
 8003a08:	60bb      	str	r3, [r7, #8]
 8003a0a:	4b7d      	ldr	r3, [pc, #500]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	4a7c      	ldr	r2, [pc, #496]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a14:	6413      	str	r3, [r2, #64]	; 0x40
 8003a16:	4b7a      	ldr	r3, [pc, #488]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	60bb      	str	r3, [r7, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a22:	2301      	movs	r3, #1
 8003a24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a26:	4b77      	ldr	r3, [pc, #476]	; (8003c04 <HAL_RCC_OscConfig+0x474>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d118      	bne.n	8003a64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a32:	4b74      	ldr	r3, [pc, #464]	; (8003c04 <HAL_RCC_OscConfig+0x474>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a73      	ldr	r2, [pc, #460]	; (8003c04 <HAL_RCC_OscConfig+0x474>)
 8003a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3e:	f7fd f9c1 	bl	8000dc4 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a46:	f7fd f9bd 	bl	8000dc4 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e10c      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a58:	4b6a      	ldr	r3, [pc, #424]	; (8003c04 <HAL_RCC_OscConfig+0x474>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0f0      	beq.n	8003a46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d106      	bne.n	8003a7a <HAL_RCC_OscConfig+0x2ea>
 8003a6c:	4b64      	ldr	r3, [pc, #400]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a70:	4a63      	ldr	r2, [pc, #396]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	6713      	str	r3, [r2, #112]	; 0x70
 8003a78:	e01c      	b.n	8003ab4 <HAL_RCC_OscConfig+0x324>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2b05      	cmp	r3, #5
 8003a80:	d10c      	bne.n	8003a9c <HAL_RCC_OscConfig+0x30c>
 8003a82:	4b5f      	ldr	r3, [pc, #380]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	4a5e      	ldr	r2, [pc, #376]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003a88:	f043 0304 	orr.w	r3, r3, #4
 8003a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a8e:	4b5c      	ldr	r3, [pc, #368]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a92:	4a5b      	ldr	r2, [pc, #364]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	6713      	str	r3, [r2, #112]	; 0x70
 8003a9a:	e00b      	b.n	8003ab4 <HAL_RCC_OscConfig+0x324>
 8003a9c:	4b58      	ldr	r3, [pc, #352]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa0:	4a57      	ldr	r2, [pc, #348]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003aa2:	f023 0301 	bic.w	r3, r3, #1
 8003aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa8:	4b55      	ldr	r3, [pc, #340]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aac:	4a54      	ldr	r2, [pc, #336]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003aae:	f023 0304 	bic.w	r3, r3, #4
 8003ab2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d015      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abc:	f7fd f982 	bl	8000dc4 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac4:	f7fd f97e 	bl	8000dc4 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e0cb      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ada:	4b49      	ldr	r3, [pc, #292]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0ee      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x334>
 8003ae6:	e014      	b.n	8003b12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae8:	f7fd f96c 	bl	8000dc4 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aee:	e00a      	b.n	8003b06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003af0:	f7fd f968 	bl	8000dc4 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e0b5      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b06:	4b3e      	ldr	r3, [pc, #248]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1ee      	bne.n	8003af0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b12:	7dfb      	ldrb	r3, [r7, #23]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d105      	bne.n	8003b24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b18:	4b39      	ldr	r3, [pc, #228]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	4a38      	ldr	r2, [pc, #224]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 80a1 	beq.w	8003c70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b2e:	4b34      	ldr	r3, [pc, #208]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d05c      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d141      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b42:	4b31      	ldr	r3, [pc, #196]	; (8003c08 <HAL_RCC_OscConfig+0x478>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b48:	f7fd f93c 	bl	8000dc4 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b50:	f7fd f938 	bl	8000dc4 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e087      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b62:	4b27      	ldr	r3, [pc, #156]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69da      	ldr	r2, [r3, #28]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	019b      	lsls	r3, r3, #6
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b84:	085b      	lsrs	r3, r3, #1
 8003b86:	3b01      	subs	r3, #1
 8003b88:	041b      	lsls	r3, r3, #16
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	061b      	lsls	r3, r3, #24
 8003b92:	491b      	ldr	r1, [pc, #108]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b98:	4b1b      	ldr	r3, [pc, #108]	; (8003c08 <HAL_RCC_OscConfig+0x478>)
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9e:	f7fd f911 	bl	8000dc4 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ba6:	f7fd f90d 	bl	8000dc4 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e05c      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb8:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d0f0      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x416>
 8003bc4:	e054      	b.n	8003c70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc6:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <HAL_RCC_OscConfig+0x478>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bcc:	f7fd f8fa 	bl	8000dc4 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd4:	f7fd f8f6 	bl	8000dc4 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e045      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be6:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <HAL_RCC_OscConfig+0x470>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f0      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x444>
 8003bf2:	e03d      	b.n	8003c70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d107      	bne.n	8003c0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e038      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
 8003c00:	40023800 	.word	0x40023800
 8003c04:	40007000 	.word	0x40007000
 8003c08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c0c:	4b1b      	ldr	r3, [pc, #108]	; (8003c7c <HAL_RCC_OscConfig+0x4ec>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d028      	beq.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d121      	bne.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d11a      	bne.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d111      	bne.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c52:	085b      	lsrs	r3, r3, #1
 8003c54:	3b01      	subs	r3, #1
 8003c56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d107      	bne.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d001      	beq.n	8003c70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40023800 	.word	0x40023800

08003c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0cc      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c94:	4b68      	ldr	r3, [pc, #416]	; (8003e38 <HAL_RCC_ClockConfig+0x1b8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d90c      	bls.n	8003cbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca2:	4b65      	ldr	r3, [pc, #404]	; (8003e38 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003caa:	4b63      	ldr	r3, [pc, #396]	; (8003e38 <HAL_RCC_ClockConfig+0x1b8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d001      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0b8      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d020      	beq.n	8003d0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cd4:	4b59      	ldr	r3, [pc, #356]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	4a58      	ldr	r2, [pc, #352]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cec:	4b53      	ldr	r3, [pc, #332]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	4a52      	ldr	r2, [pc, #328]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf8:	4b50      	ldr	r3, [pc, #320]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	494d      	ldr	r1, [pc, #308]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d044      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d107      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1e:	4b47      	ldr	r3, [pc, #284]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d119      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e07f      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d003      	beq.n	8003d3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	d107      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3e:	4b3f      	ldr	r3, [pc, #252]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d109      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e06f      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4e:	4b3b      	ldr	r3, [pc, #236]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e067      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d5e:	4b37      	ldr	r3, [pc, #220]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f023 0203 	bic.w	r2, r3, #3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4934      	ldr	r1, [pc, #208]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d70:	f7fd f828 	bl	8000dc4 <HAL_GetTick>
 8003d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d76:	e00a      	b.n	8003d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d78:	f7fd f824 	bl	8000dc4 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e04f      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	4b2b      	ldr	r3, [pc, #172]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 020c 	and.w	r2, r3, #12
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d1eb      	bne.n	8003d78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003da0:	4b25      	ldr	r3, [pc, #148]	; (8003e38 <HAL_RCC_ClockConfig+0x1b8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d20c      	bcs.n	8003dc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dae:	4b22      	ldr	r3, [pc, #136]	; (8003e38 <HAL_RCC_ClockConfig+0x1b8>)
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db6:	4b20      	ldr	r3, [pc, #128]	; (8003e38 <HAL_RCC_ClockConfig+0x1b8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d001      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e032      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d008      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd4:	4b19      	ldr	r3, [pc, #100]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	4916      	ldr	r1, [pc, #88]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003df2:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	490e      	ldr	r1, [pc, #56]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e06:	f000 f821 	bl	8003e4c <HAL_RCC_GetSysClockFreq>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	091b      	lsrs	r3, r3, #4
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	490a      	ldr	r1, [pc, #40]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003e18:	5ccb      	ldrb	r3, [r1, r3]
 8003e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1e:	4a09      	ldr	r2, [pc, #36]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e22:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fc ff88 	bl	8000d3c <HAL_InitTick>

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	40023c00 	.word	0x40023c00
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	08007c98 	.word	0x08007c98
 8003e44:	20000000 	.word	0x20000000
 8003e48:	20000004 	.word	0x20000004

08003e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e50:	b094      	sub	sp, #80	; 0x50
 8003e52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	647b      	str	r3, [r7, #68]	; 0x44
 8003e58:	2300      	movs	r3, #0
 8003e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e64:	4b79      	ldr	r3, [pc, #484]	; (800404c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 030c 	and.w	r3, r3, #12
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d00d      	beq.n	8003e8c <HAL_RCC_GetSysClockFreq+0x40>
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	f200 80e1 	bhi.w	8004038 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_RCC_GetSysClockFreq+0x34>
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d003      	beq.n	8003e86 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e7e:	e0db      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e80:	4b73      	ldr	r3, [pc, #460]	; (8004050 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e82:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e84:	e0db      	b.n	800403e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e86:	4b73      	ldr	r3, [pc, #460]	; (8004054 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e8a:	e0d8      	b.n	800403e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e8c:	4b6f      	ldr	r3, [pc, #444]	; (800404c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e94:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e96:	4b6d      	ldr	r3, [pc, #436]	; (800404c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d063      	beq.n	8003f6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea2:	4b6a      	ldr	r3, [pc, #424]	; (800404c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	099b      	lsrs	r3, r3, #6
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003eac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb4:	633b      	str	r3, [r7, #48]	; 0x30
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ebe:	4622      	mov	r2, r4
 8003ec0:	462b      	mov	r3, r5
 8003ec2:	f04f 0000 	mov.w	r0, #0
 8003ec6:	f04f 0100 	mov.w	r1, #0
 8003eca:	0159      	lsls	r1, r3, #5
 8003ecc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ed0:	0150      	lsls	r0, r2, #5
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4621      	mov	r1, r4
 8003ed8:	1a51      	subs	r1, r2, r1
 8003eda:	6139      	str	r1, [r7, #16]
 8003edc:	4629      	mov	r1, r5
 8003ede:	eb63 0301 	sbc.w	r3, r3, r1
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ef0:	4659      	mov	r1, fp
 8003ef2:	018b      	lsls	r3, r1, #6
 8003ef4:	4651      	mov	r1, sl
 8003ef6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003efa:	4651      	mov	r1, sl
 8003efc:	018a      	lsls	r2, r1, #6
 8003efe:	4651      	mov	r1, sl
 8003f00:	ebb2 0801 	subs.w	r8, r2, r1
 8003f04:	4659      	mov	r1, fp
 8003f06:	eb63 0901 	sbc.w	r9, r3, r1
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	f04f 0300 	mov.w	r3, #0
 8003f12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f1e:	4690      	mov	r8, r2
 8003f20:	4699      	mov	r9, r3
 8003f22:	4623      	mov	r3, r4
 8003f24:	eb18 0303 	adds.w	r3, r8, r3
 8003f28:	60bb      	str	r3, [r7, #8]
 8003f2a:	462b      	mov	r3, r5
 8003f2c:	eb49 0303 	adc.w	r3, r9, r3
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	f04f 0300 	mov.w	r3, #0
 8003f3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f3e:	4629      	mov	r1, r5
 8003f40:	024b      	lsls	r3, r1, #9
 8003f42:	4621      	mov	r1, r4
 8003f44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f48:	4621      	mov	r1, r4
 8003f4a:	024a      	lsls	r2, r1, #9
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	4619      	mov	r1, r3
 8003f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f52:	2200      	movs	r2, #0
 8003f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f5c:	f7fc f934 	bl	80001c8 <__aeabi_uldivmod>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4613      	mov	r3, r2
 8003f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f68:	e058      	b.n	800401c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f6a:	4b38      	ldr	r3, [pc, #224]	; (800404c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	099b      	lsrs	r3, r3, #6
 8003f70:	2200      	movs	r2, #0
 8003f72:	4618      	mov	r0, r3
 8003f74:	4611      	mov	r1, r2
 8003f76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f7a:	623b      	str	r3, [r7, #32]
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f84:	4642      	mov	r2, r8
 8003f86:	464b      	mov	r3, r9
 8003f88:	f04f 0000 	mov.w	r0, #0
 8003f8c:	f04f 0100 	mov.w	r1, #0
 8003f90:	0159      	lsls	r1, r3, #5
 8003f92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f96:	0150      	lsls	r0, r2, #5
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4641      	mov	r1, r8
 8003f9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fbc:	ebb2 040a 	subs.w	r4, r2, sl
 8003fc0:	eb63 050b 	sbc.w	r5, r3, fp
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	f04f 0300 	mov.w	r3, #0
 8003fcc:	00eb      	lsls	r3, r5, #3
 8003fce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fd2:	00e2      	lsls	r2, r4, #3
 8003fd4:	4614      	mov	r4, r2
 8003fd6:	461d      	mov	r5, r3
 8003fd8:	4643      	mov	r3, r8
 8003fda:	18e3      	adds	r3, r4, r3
 8003fdc:	603b      	str	r3, [r7, #0]
 8003fde:	464b      	mov	r3, r9
 8003fe0:	eb45 0303 	adc.w	r3, r5, r3
 8003fe4:	607b      	str	r3, [r7, #4]
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ff2:	4629      	mov	r1, r5
 8003ff4:	028b      	lsls	r3, r1, #10
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	028a      	lsls	r2, r1, #10
 8004000:	4610      	mov	r0, r2
 8004002:	4619      	mov	r1, r3
 8004004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004006:	2200      	movs	r2, #0
 8004008:	61bb      	str	r3, [r7, #24]
 800400a:	61fa      	str	r2, [r7, #28]
 800400c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004010:	f7fc f8da 	bl	80001c8 <__aeabi_uldivmod>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4613      	mov	r3, r2
 800401a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800401c:	4b0b      	ldr	r3, [pc, #44]	; (800404c <HAL_RCC_GetSysClockFreq+0x200>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	0c1b      	lsrs	r3, r3, #16
 8004022:	f003 0303 	and.w	r3, r3, #3
 8004026:	3301      	adds	r3, #1
 8004028:	005b      	lsls	r3, r3, #1
 800402a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800402c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800402e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004030:	fbb2 f3f3 	udiv	r3, r2, r3
 8004034:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004036:	e002      	b.n	800403e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004038:	4b05      	ldr	r3, [pc, #20]	; (8004050 <HAL_RCC_GetSysClockFreq+0x204>)
 800403a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800403c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800403e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004040:	4618      	mov	r0, r3
 8004042:	3750      	adds	r7, #80	; 0x50
 8004044:	46bd      	mov	sp, r7
 8004046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800404a:	bf00      	nop
 800404c:	40023800 	.word	0x40023800
 8004050:	00f42400 	.word	0x00f42400
 8004054:	007a1200 	.word	0x007a1200

08004058 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800405c:	4b03      	ldr	r3, [pc, #12]	; (800406c <HAL_RCC_GetHCLKFreq+0x14>)
 800405e:	681b      	ldr	r3, [r3, #0]
}
 8004060:	4618      	mov	r0, r3
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	20000000 	.word	0x20000000

08004070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004074:	f7ff fff0 	bl	8004058 <HAL_RCC_GetHCLKFreq>
 8004078:	4602      	mov	r2, r0
 800407a:	4b05      	ldr	r3, [pc, #20]	; (8004090 <HAL_RCC_GetPCLK1Freq+0x20>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	0a9b      	lsrs	r3, r3, #10
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	4903      	ldr	r1, [pc, #12]	; (8004094 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004086:	5ccb      	ldrb	r3, [r1, r3]
 8004088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800408c:	4618      	mov	r0, r3
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40023800 	.word	0x40023800
 8004094:	08007ca8 	.word	0x08007ca8

08004098 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d105      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d035      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040c0:	4b62      	ldr	r3, [pc, #392]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040c6:	f7fc fe7d 	bl	8000dc4 <HAL_GetTick>
 80040ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040cc:	e008      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040ce:	f7fc fe79 	bl	8000dc4 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e0b0      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040e0:	4b5b      	ldr	r3, [pc, #364]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1f0      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	019a      	lsls	r2, r3, #6
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	071b      	lsls	r3, r3, #28
 80040f8:	4955      	ldr	r1, [pc, #340]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004100:	4b52      	ldr	r3, [pc, #328]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004102:	2201      	movs	r2, #1
 8004104:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004106:	f7fc fe5d 	bl	8000dc4 <HAL_GetTick>
 800410a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800410c:	e008      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800410e:	f7fc fe59 	bl	8000dc4 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d901      	bls.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e090      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004120:	4b4b      	ldr	r3, [pc, #300]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0f0      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 8083 	beq.w	8004240 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800413a:	2300      	movs	r3, #0
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	4b44      	ldr	r3, [pc, #272]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	4a43      	ldr	r2, [pc, #268]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004148:	6413      	str	r3, [r2, #64]	; 0x40
 800414a:	4b41      	ldr	r3, [pc, #260]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004156:	4b3f      	ldr	r3, [pc, #252]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a3e      	ldr	r2, [pc, #248]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800415c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004160:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004162:	f7fc fe2f 	bl	8000dc4 <HAL_GetTick>
 8004166:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004168:	e008      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800416a:	f7fc fe2b 	bl	8000dc4 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e062      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800417c:	4b35      	ldr	r3, [pc, #212]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0f0      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004188:	4b31      	ldr	r3, [pc, #196]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800418a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004190:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d02f      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d028      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041a6:	4b2a      	ldr	r3, [pc, #168]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041b0:	4b29      	ldr	r3, [pc, #164]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80041b2:	2201      	movs	r2, #1
 80041b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041b6:	4b28      	ldr	r3, [pc, #160]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80041bc:	4a24      	ldr	r2, [pc, #144]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041c2:	4b23      	ldr	r3, [pc, #140]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d114      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80041ce:	f7fc fdf9 	bl	8000dc4 <HAL_GetTick>
 80041d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d4:	e00a      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041d6:	f7fc fdf5 	bl	8000dc4 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d901      	bls.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e02a      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ec:	4b18      	ldr	r3, [pc, #96]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0ee      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004200:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004204:	d10d      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004206:	4b12      	ldr	r3, [pc, #72]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800421a:	490d      	ldr	r1, [pc, #52]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800421c:	4313      	orrs	r3, r2
 800421e:	608b      	str	r3, [r1, #8]
 8004220:	e005      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004222:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	4a0a      	ldr	r2, [pc, #40]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004228:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800422c:	6093      	str	r3, [r2, #8]
 800422e:	4b08      	ldr	r3, [pc, #32]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004230:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800423a:	4905      	ldr	r1, [pc, #20]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800423c:	4313      	orrs	r3, r2
 800423e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	42470068 	.word	0x42470068
 8004250:	40023800 	.word	0x40023800
 8004254:	40007000 	.word	0x40007000
 8004258:	42470e40 	.word	0x42470e40

0800425c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d13e      	bne.n	80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800427a:	4b23      	ldr	r3, [pc, #140]	; (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d005      	beq.n	8004296 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d12f      	bne.n	80042f0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004290:	4b1e      	ldr	r3, [pc, #120]	; (800430c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004292:	617b      	str	r3, [r7, #20]
          break;
 8004294:	e02f      	b.n	80042f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004296:	4b1c      	ldr	r3, [pc, #112]	; (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042a2:	d108      	bne.n	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80042a4:	4b18      	ldr	r3, [pc, #96]	; (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042ac:	4a18      	ldr	r2, [pc, #96]	; (8004310 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80042ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b2:	613b      	str	r3, [r7, #16]
 80042b4:	e007      	b.n	80042c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80042b6:	4b14      	ldr	r3, [pc, #80]	; (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042be:	4a15      	ldr	r2, [pc, #84]	; (8004314 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80042c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80042c6:	4b10      	ldr	r3, [pc, #64]	; (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80042c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042cc:	099b      	lsrs	r3, r3, #6
 80042ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	fb02 f303 	mul.w	r3, r2, r3
 80042d8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80042da:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80042dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e0:	0f1b      	lsrs	r3, r3, #28
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ec:	617b      	str	r3, [r7, #20]
          break;
 80042ee:	e002      	b.n	80042f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]
          break;
 80042f4:	bf00      	nop
        }
      }
      break;
 80042f6:	bf00      	nop
    }
  }
  return frequency;
 80042f8:	697b      	ldr	r3, [r7, #20]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40023800 	.word	0x40023800
 800430c:	00bb8000 	.word	0x00bb8000
 8004310:	007a1200 	.word	0x007a1200
 8004314:	00f42400 	.word	0x00f42400

08004318 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e07b      	b.n	8004422 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	2b00      	cmp	r3, #0
 8004330:	d108      	bne.n	8004344 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800433a:	d009      	beq.n	8004350 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	61da      	str	r2, [r3, #28]
 8004342:	e005      	b.n	8004350 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fc fbd6 	bl	8000b1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004386:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	431a      	orrs	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d4:	ea42 0103 	orr.w	r1, r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	0c1b      	lsrs	r3, r3, #16
 80043ee:	f003 0104 	and.w	r1, r3, #4
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	f003 0210 	and.w	r2, r3, #16
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69da      	ldr	r2, [r3, #28]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004410:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800442a:	b084      	sub	sp, #16
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	f107 001c 	add.w	r0, r7, #28
 8004438:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800443c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443e:	2b01      	cmp	r3, #1
 8004440:	d122      	bne.n	8004488 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004446:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800446a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800446c:	2b01      	cmp	r3, #1
 800446e:	d105      	bne.n	800447c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f9bf 	bl	8004800 <USB_CoreReset>
 8004482:	4603      	mov	r3, r0
 8004484:	73fb      	strb	r3, [r7, #15]
 8004486:	e01a      	b.n	80044be <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f9b3 	bl	8004800 <USB_CoreReset>
 800449a:	4603      	mov	r3, r0
 800449c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800449e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d106      	bne.n	80044b2 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	639a      	str	r2, [r3, #56]	; 0x38
 80044b0:	e005      	b.n	80044be <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80044be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d10b      	bne.n	80044dc <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f043 0206 	orr.w	r2, r3, #6
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f043 0220 	orr.w	r2, r3, #32
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044e8:	b004      	add	sp, #16
 80044ea:	4770      	bx	lr

080044ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f043 0201 	orr.w	r2, r3, #1
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f023 0201 	bic.w	r2, r3, #1
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	460b      	mov	r3, r1
 800453a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800454c:	78fb      	ldrb	r3, [r7, #3]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d115      	bne.n	800457e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800455e:	2001      	movs	r0, #1
 8004560:	f7fc fc3c 	bl	8000ddc <HAL_Delay>
      ms++;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3301      	adds	r3, #1
 8004568:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f939 	bl	80047e2 <USB_GetMode>
 8004570:	4603      	mov	r3, r0
 8004572:	2b01      	cmp	r3, #1
 8004574:	d01e      	beq.n	80045b4 <USB_SetCurrentMode+0x84>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2b31      	cmp	r3, #49	; 0x31
 800457a:	d9f0      	bls.n	800455e <USB_SetCurrentMode+0x2e>
 800457c:	e01a      	b.n	80045b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800457e:	78fb      	ldrb	r3, [r7, #3]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d115      	bne.n	80045b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004590:	2001      	movs	r0, #1
 8004592:	f7fc fc23 	bl	8000ddc <HAL_Delay>
      ms++;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	3301      	adds	r3, #1
 800459a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f920 	bl	80047e2 <USB_GetMode>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d005      	beq.n	80045b4 <USB_SetCurrentMode+0x84>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b31      	cmp	r3, #49	; 0x31
 80045ac:	d9f0      	bls.n	8004590 <USB_SetCurrentMode+0x60>
 80045ae:	e001      	b.n	80045b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e005      	b.n	80045c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b32      	cmp	r3, #50	; 0x32
 80045b8:	d101      	bne.n	80045be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	3301      	adds	r3, #1
 80045da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4a13      	ldr	r2, [pc, #76]	; (800462c <USB_FlushTxFifo+0x64>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d901      	bls.n	80045e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e01b      	b.n	8004620 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	daf2      	bge.n	80045d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	019b      	lsls	r3, r3, #6
 80045f8:	f043 0220 	orr.w	r2, r3, #32
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	3301      	adds	r3, #1
 8004604:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4a08      	ldr	r2, [pc, #32]	; (800462c <USB_FlushTxFifo+0x64>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d901      	bls.n	8004612 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e006      	b.n	8004620 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b20      	cmp	r3, #32
 800461c:	d0f0      	beq.n	8004600 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	00030d40 	.word	0x00030d40

08004630 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	3301      	adds	r3, #1
 8004640:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4a11      	ldr	r2, [pc, #68]	; (800468c <USB_FlushRxFifo+0x5c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e018      	b.n	8004680 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	daf2      	bge.n	800463c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2210      	movs	r2, #16
 800465e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	3301      	adds	r3, #1
 8004664:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4a08      	ldr	r2, [pc, #32]	; (800468c <USB_FlushRxFifo+0x5c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e006      	b.n	8004680 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f003 0310 	and.w	r3, r3, #16
 800467a:	2b10      	cmp	r3, #16
 800467c:	d0f0      	beq.n	8004660 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	00030d40 	.word	0x00030d40

08004690 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004690:	b480      	push	{r7}
 8004692:	b089      	sub	sp, #36	; 0x24
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	4611      	mov	r1, r2
 800469c:	461a      	mov	r2, r3
 800469e:	460b      	mov	r3, r1
 80046a0:	71fb      	strb	r3, [r7, #7]
 80046a2:	4613      	mov	r3, r2
 80046a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80046ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d123      	bne.n	80046fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80046b6:	88bb      	ldrh	r3, [r7, #4]
 80046b8:	3303      	adds	r3, #3
 80046ba:	089b      	lsrs	r3, r3, #2
 80046bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80046be:	2300      	movs	r3, #0
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	e018      	b.n	80046f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80046c4:	79fb      	ldrb	r3, [r7, #7]
 80046c6:	031a      	lsls	r2, r3, #12
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d0:	461a      	mov	r2, r3
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	3301      	adds	r3, #1
 80046dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	3301      	adds	r3, #1
 80046e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	3301      	adds	r3, #1
 80046e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	3301      	adds	r3, #1
 80046ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	3301      	adds	r3, #1
 80046f4:	61bb      	str	r3, [r7, #24]
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d3e2      	bcc.n	80046c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3724      	adds	r7, #36	; 0x24
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800470c:	b480      	push	{r7}
 800470e:	b08b      	sub	sp, #44	; 0x2c
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	4613      	mov	r3, r2
 8004718:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004722:	88fb      	ldrh	r3, [r7, #6]
 8004724:	089b      	lsrs	r3, r3, #2
 8004726:	b29b      	uxth	r3, r3
 8004728:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800472a:	88fb      	ldrh	r3, [r7, #6]
 800472c:	f003 0303 	and.w	r3, r3, #3
 8004730:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004732:	2300      	movs	r3, #0
 8004734:	623b      	str	r3, [r7, #32]
 8004736:	e014      	b.n	8004762 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	601a      	str	r2, [r3, #0]
    pDest++;
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	3301      	adds	r3, #1
 8004748:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	3301      	adds	r3, #1
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	3301      	adds	r3, #1
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	3301      	adds	r3, #1
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	3301      	adds	r3, #1
 8004760:	623b      	str	r3, [r7, #32]
 8004762:	6a3a      	ldr	r2, [r7, #32]
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	429a      	cmp	r2, r3
 8004768:	d3e6      	bcc.n	8004738 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800476a:	8bfb      	ldrh	r3, [r7, #30]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d01e      	beq.n	80047ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800477a:	461a      	mov	r2, r3
 800477c:	f107 0310 	add.w	r3, r7, #16
 8004780:	6812      	ldr	r2, [r2, #0]
 8004782:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	b2db      	uxtb	r3, r3
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	fa22 f303 	lsr.w	r3, r2, r3
 8004790:	b2da      	uxtb	r2, r3
 8004792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004794:	701a      	strb	r2, [r3, #0]
      i++;
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	3301      	adds	r3, #1
 800479a:	623b      	str	r3, [r7, #32]
      pDest++;
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	3301      	adds	r3, #1
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80047a2:	8bfb      	ldrh	r3, [r7, #30]
 80047a4:	3b01      	subs	r3, #1
 80047a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80047a8:	8bfb      	ldrh	r3, [r7, #30]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1ea      	bne.n	8004784 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	372c      	adds	r7, #44	; 0x2c
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	4013      	ands	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80047d4:	68fb      	ldr	r3, [r7, #12]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	f003 0301 	and.w	r3, r3, #1
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	3301      	adds	r3, #1
 8004810:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4a13      	ldr	r2, [pc, #76]	; (8004864 <USB_CoreReset+0x64>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e01b      	b.n	8004856 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	daf2      	bge.n	800480c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	f043 0201 	orr.w	r2, r3, #1
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	3301      	adds	r3, #1
 800483a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4a09      	ldr	r2, [pc, #36]	; (8004864 <USB_CoreReset+0x64>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d901      	bls.n	8004848 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e006      	b.n	8004856 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b01      	cmp	r3, #1
 8004852:	d0f0      	beq.n	8004836 <USB_CoreReset+0x36>

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	00030d40 	.word	0x00030d40

08004868 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004868:	b084      	sub	sp, #16
 800486a:	b580      	push	{r7, lr}
 800486c:	b086      	sub	sp, #24
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
 8004872:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004876:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004888:	461a      	mov	r2, r3
 800488a:	2300      	movs	r3, #0
 800488c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004892:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048aa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d018      	beq.n	80048f0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80048be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d10a      	bne.n	80048da <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048d2:	f043 0304 	orr.w	r3, r3, #4
 80048d6:	6013      	str	r3, [r2, #0]
 80048d8:	e014      	b.n	8004904 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048e8:	f023 0304 	bic.w	r3, r3, #4
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	e009      	b.n	8004904 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048fe:	f023 0304 	bic.w	r3, r3, #4
 8004902:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004904:	2110      	movs	r1, #16
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7ff fe5e 	bl	80045c8 <USB_FlushTxFifo>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff fe8a 	bl	8004630 <USB_FlushRxFifo>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004926:	2300      	movs	r3, #0
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	e015      	b.n	8004958 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004938:	461a      	mov	r2, r3
 800493a:	f04f 33ff 	mov.w	r3, #4294967295
 800493e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4413      	add	r3, r2
 8004948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800494c:	461a      	mov	r2, r3
 800494e:	2300      	movs	r3, #0
 8004950:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	3301      	adds	r3, #1
 8004956:	613b      	str	r3, [r7, #16]
 8004958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	429a      	cmp	r2, r3
 800495e:	d3e5      	bcc.n	800492c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f04f 32ff 	mov.w	r2, #4294967295
 800496c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00b      	beq.n	8004992 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004980:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a13      	ldr	r2, [pc, #76]	; (80049d4 <USB_HostInit+0x16c>)
 8004986:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a13      	ldr	r2, [pc, #76]	; (80049d8 <USB_HostInit+0x170>)
 800498c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004990:	e009      	b.n	80049a6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2280      	movs	r2, #128	; 0x80
 8004996:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a10      	ldr	r2, [pc, #64]	; (80049dc <USB_HostInit+0x174>)
 800499c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a0f      	ldr	r2, [pc, #60]	; (80049e0 <USB_HostInit+0x178>)
 80049a2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80049a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d105      	bne.n	80049b8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	f043 0210 	orr.w	r2, r3, #16
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699a      	ldr	r2, [r3, #24]
 80049bc:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <USB_HostInit+0x17c>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049d0:	b004      	add	sp, #16
 80049d2:	4770      	bx	lr
 80049d4:	01000200 	.word	0x01000200
 80049d8:	00e00300 	.word	0x00e00300
 80049dc:	00600080 	.word	0x00600080
 80049e0:	004000e0 	.word	0x004000e0
 80049e4:	a3200008 	.word	0xa3200008

080049e8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a06:	f023 0303 	bic.w	r3, r3, #3
 8004a0a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	78fb      	ldrb	r3, [r7, #3]
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	68f9      	ldr	r1, [r7, #12]
 8004a1c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a20:	4313      	orrs	r3, r2
 8004a22:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d107      	bne.n	8004a3a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a30:	461a      	mov	r2, r3
 8004a32:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004a36:	6053      	str	r3, [r2, #4]
 8004a38:	e009      	b.n	8004a4e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d106      	bne.n	8004a4e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a46:	461a      	mov	r2, r3
 8004a48:	f241 7370 	movw	r3, #6000	; 0x1770
 8004a4c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a7c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a8a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004a8c:	2064      	movs	r0, #100	; 0x64
 8004a8e:	f7fc f9a5 	bl	8000ddc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004a9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a9e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004aa0:	200a      	movs	r0, #10
 8004aa2:	f7fc f99b 	bl	8000ddc <HAL_Delay>

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004ad4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d109      	bne.n	8004af4 <USB_DriveVbus+0x44>
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d106      	bne.n	8004af4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004aee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004af2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afe:	d109      	bne.n	8004b14 <USB_DriveVbus+0x64>
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b12:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b085      	sub	sp, #20
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	0c5b      	lsrs	r3, r3, #17
 8004b40:	f003 0303 	and.w	r3, r3, #3
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	b29b      	uxth	r3, r3
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
	...

08004b74 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	4608      	mov	r0, r1
 8004b7e:	4611      	mov	r1, r2
 8004b80:	461a      	mov	r2, r3
 8004b82:	4603      	mov	r3, r0
 8004b84:	70fb      	strb	r3, [r7, #3]
 8004b86:	460b      	mov	r3, r1
 8004b88:	70bb      	strb	r3, [r7, #2]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004b96:	78fb      	ldrb	r3, [r7, #3]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ba8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004baa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004bae:	2b03      	cmp	r3, #3
 8004bb0:	d87e      	bhi.n	8004cb0 <USB_HC_Init+0x13c>
 8004bb2:	a201      	add	r2, pc, #4	; (adr r2, 8004bb8 <USB_HC_Init+0x44>)
 8004bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb8:	08004bc9 	.word	0x08004bc9
 8004bbc:	08004c73 	.word	0x08004c73
 8004bc0:	08004bc9 	.word	0x08004bc9
 8004bc4:	08004c35 	.word	0x08004c35
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004bc8:	78fb      	ldrb	r3, [r7, #3]
 8004bca:	015a      	lsls	r2, r3, #5
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	4413      	add	r3, r2
 8004bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	f240 439d 	movw	r3, #1181	; 0x49d
 8004bda:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004bdc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	da10      	bge.n	8004c06 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	78fa      	ldrb	r2, [r7, #3]
 8004bf4:	0151      	lsls	r1, r2, #5
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	440a      	add	r2, r1
 8004bfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c02:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004c04:	e057      	b.n	8004cb6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d051      	beq.n	8004cb6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004c12:	78fb      	ldrb	r3, [r7, #3]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	78fa      	ldrb	r2, [r7, #3]
 8004c22:	0151      	lsls	r1, r2, #5
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	440a      	add	r2, r1
 8004c28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c2c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004c30:	60d3      	str	r3, [r2, #12]
      break;
 8004c32:	e040      	b.n	8004cb6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c40:	461a      	mov	r2, r3
 8004c42:	f240 639d 	movw	r3, #1693	; 0x69d
 8004c46:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004c48:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	da34      	bge.n	8004cba <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	78fa      	ldrb	r2, [r7, #3]
 8004c60:	0151      	lsls	r1, r2, #5
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	440a      	add	r2, r1
 8004c66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c6e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004c70:	e023      	b.n	8004cba <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c72:	78fb      	ldrb	r3, [r7, #3]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f240 2325 	movw	r3, #549	; 0x225
 8004c84:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004c86:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	da17      	bge.n	8004cbe <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004c8e:	78fb      	ldrb	r3, [r7, #3]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	78fa      	ldrb	r2, [r7, #3]
 8004c9e:	0151      	lsls	r1, r2, #5
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	440a      	add	r2, r1
 8004ca4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ca8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004cac:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004cae:	e006      	b.n	8004cbe <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	77fb      	strb	r3, [r7, #31]
      break;
 8004cb4:	e004      	b.n	8004cc0 <USB_HC_Init+0x14c>
      break;
 8004cb6:	bf00      	nop
 8004cb8:	e002      	b.n	8004cc0 <USB_HC_Init+0x14c>
      break;
 8004cba:	bf00      	nop
 8004cbc:	e000      	b.n	8004cc0 <USB_HC_Init+0x14c>
      break;
 8004cbe:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	78fa      	ldrb	r2, [r7, #3]
 8004cd0:	0151      	lsls	r1, r2, #5
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	440a      	add	r2, r1
 8004cd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cda:	f043 0302 	orr.w	r3, r3, #2
 8004cde:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ce6:	699a      	ldr	r2, [r3, #24]
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	2101      	movs	r1, #1
 8004cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf4:	6939      	ldr	r1, [r7, #16]
 8004cf6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004d0a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	da03      	bge.n	8004d1a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d16:	61bb      	str	r3, [r7, #24]
 8004d18:	e001      	b.n	8004d1e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f7ff feff 	bl	8004b22 <USB_GetHostSpeed>
 8004d24:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004d26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d106      	bne.n	8004d3c <USB_HC_Init+0x1c8>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d003      	beq.n	8004d3c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004d34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d38:	617b      	str	r3, [r7, #20]
 8004d3a:	e001      	b.n	8004d40 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d40:	787b      	ldrb	r3, [r7, #1]
 8004d42:	059b      	lsls	r3, r3, #22
 8004d44:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004d48:	78bb      	ldrb	r3, [r7, #2]
 8004d4a:	02db      	lsls	r3, r3, #11
 8004d4c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d50:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004d52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d56:	049b      	lsls	r3, r3, #18
 8004d58:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004d5c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004d5e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004d60:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004d64:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d6a:	78fb      	ldrb	r3, [r7, #3]
 8004d6c:	0159      	lsls	r1, r3, #5
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	440b      	add	r3, r1
 8004d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d76:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d7c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004d7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d003      	beq.n	8004d8e <USB_HC_Init+0x21a>
 8004d86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d10f      	bne.n	8004dae <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004d8e:	78fb      	ldrb	r3, [r7, #3]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	78fa      	ldrb	r2, [r7, #3]
 8004d9e:	0151      	lsls	r1, r2, #5
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	440a      	add	r2, r1
 8004da4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004da8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dac:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004dae:	7ffb      	ldrb	r3, [r7, #31]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3720      	adds	r7, #32
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b08c      	sub	sp, #48	; 0x30
 8004dbc:	af02      	add	r7, sp, #8
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	785b      	ldrb	r3, [r3, #1]
 8004dce:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dd4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d02d      	beq.n	8004e3e <USB_HC_StartXfer+0x86>
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	791b      	ldrb	r3, [r3, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d129      	bne.n	8004e3e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004dea:	79fb      	ldrb	r3, [r7, #7]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d117      	bne.n	8004e20 <USB_HC_StartXfer+0x68>
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	79db      	ldrb	r3, [r3, #7]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <USB_HC_StartXfer+0x48>
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	79db      	ldrb	r3, [r3, #7]
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d10f      	bne.n	8004e20 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	0151      	lsls	r1, r2, #5
 8004e12:	6a3a      	ldr	r2, [r7, #32]
 8004e14:	440a      	add	r2, r1
 8004e16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004e20:	79fb      	ldrb	r3, [r7, #7]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10b      	bne.n	8004e3e <USB_HC_StartXfer+0x86>
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	795b      	ldrb	r3, [r3, #5]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d107      	bne.n	8004e3e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	785b      	ldrb	r3, [r3, #1]
 8004e32:	4619      	mov	r1, r3
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 fa0f 	bl	8005258 <USB_DoPing>
      return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e0f8      	b.n	8005030 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d018      	beq.n	8004e78 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	8912      	ldrh	r2, [r2, #8]
 8004e4e:	4413      	add	r3, r2
 8004e50:	3b01      	subs	r3, #1
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	8912      	ldrh	r2, [r2, #8]
 8004e56:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e5a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004e5c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004e5e:	8b7b      	ldrh	r3, [r7, #26]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d90b      	bls.n	8004e7c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004e64:	8b7b      	ldrh	r3, [r7, #26]
 8004e66:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004e68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	8912      	ldrh	r2, [r2, #8]
 8004e6e:	fb03 f202 	mul.w	r2, r3, r2
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	611a      	str	r2, [r3, #16]
 8004e76:	e001      	b.n	8004e7c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	78db      	ldrb	r3, [r3, #3]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d007      	beq.n	8004e94 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004e84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	8912      	ldrh	r2, [r2, #8]
 8004e8a:	fb03 f202 	mul.w	r2, r3, r2
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	611a      	str	r2, [r3, #16]
 8004e92:	e003      	b.n	8004e9c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	695a      	ldr	r2, [r3, #20]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004ea4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ea6:	04d9      	lsls	r1, r3, #19
 8004ea8:	4b63      	ldr	r3, [pc, #396]	; (8005038 <USB_HC_StartXfer+0x280>)
 8004eaa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004eac:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	7a9b      	ldrb	r3, [r3, #10]
 8004eb2:	075b      	lsls	r3, r3, #29
 8004eb4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004eb8:	69f9      	ldr	r1, [r7, #28]
 8004eba:	0148      	lsls	r0, r1, #5
 8004ebc:	6a39      	ldr	r1, [r7, #32]
 8004ebe:	4401      	add	r1, r0
 8004ec0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004ec4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ec6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d009      	beq.n	8004ee2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	68d9      	ldr	r1, [r3, #12]
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ede:	460a      	mov	r2, r1
 8004ee0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	bf0c      	ite	eq
 8004ef2:	2301      	moveq	r3, #1
 8004ef4:	2300      	movne	r3, #0
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69fa      	ldr	r2, [r7, #28]
 8004f0a:	0151      	lsls	r1, r2, #5
 8004f0c:	6a3a      	ldr	r2, [r7, #32]
 8004f0e:	440a      	add	r2, r1
 8004f10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f18:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	7e7b      	ldrb	r3, [r7, #25]
 8004f2a:	075b      	lsls	r3, r3, #29
 8004f2c:	69f9      	ldr	r1, [r7, #28]
 8004f2e:	0148      	lsls	r0, r1, #5
 8004f30:	6a39      	ldr	r1, [r7, #32]
 8004f32:	4401      	add	r1, r0
 8004f34:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f52:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	78db      	ldrb	r3, [r3, #3]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d004      	beq.n	8004f66 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f62:	613b      	str	r3, [r7, #16]
 8004f64:	e003      	b.n	8004f6e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f6c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f74:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f82:	461a      	mov	r2, r3
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004f88:	79fb      	ldrb	r3, [r7, #7]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	e04e      	b.n	8005030 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	78db      	ldrb	r3, [r3, #3]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d149      	bne.n	800502e <USB_HC_StartXfer+0x276>
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d045      	beq.n	800502e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	79db      	ldrb	r3, [r3, #7]
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	d830      	bhi.n	800500c <USB_HC_StartXfer+0x254>
 8004faa:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <USB_HC_StartXfer+0x1f8>)
 8004fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb0:	08004fc1 	.word	0x08004fc1
 8004fb4:	08004fe5 	.word	0x08004fe5
 8004fb8:	08004fc1 	.word	0x08004fc1
 8004fbc:	08004fe5 	.word	0x08004fe5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	3303      	adds	r3, #3
 8004fc6:	089b      	lsrs	r3, r3, #2
 8004fc8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004fca:	8afa      	ldrh	r2, [r7, #22]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d91c      	bls.n	8005010 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	f043 0220 	orr.w	r2, r3, #32
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	619a      	str	r2, [r3, #24]
        }
        break;
 8004fe2:	e015      	b.n	8005010 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	3303      	adds	r3, #3
 8004fea:	089b      	lsrs	r3, r3, #2
 8004fec:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004fee:	8afa      	ldrh	r2, [r7, #22]
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d90a      	bls.n	8005014 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	619a      	str	r2, [r3, #24]
        }
        break;
 800500a:	e003      	b.n	8005014 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800500c:	bf00      	nop
 800500e:	e002      	b.n	8005016 <USB_HC_StartXfer+0x25e>
        break;
 8005010:	bf00      	nop
 8005012:	e000      	b.n	8005016 <USB_HC_StartXfer+0x25e>
        break;
 8005014:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	68d9      	ldr	r1, [r3, #12]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	785a      	ldrb	r2, [r3, #1]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	b29b      	uxth	r3, r3
 8005024:	2000      	movs	r0, #0
 8005026:	9000      	str	r0, [sp, #0]
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f7ff fb31 	bl	8004690 <USB_WritePacket>
  }

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3728      	adds	r7, #40	; 0x28
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	1ff80000 	.word	0x1ff80000

0800503c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	b29b      	uxth	r3, r3
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800505e:	b480      	push	{r7}
 8005060:	b089      	sub	sp, #36	; 0x24
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
 8005066:	460b      	mov	r3, r1
 8005068:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800506e:	78fb      	ldrb	r3, [r7, #3]
 8005070:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005072:	2300      	movs	r3, #0
 8005074:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	4413      	add	r3, r2
 800507e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	0c9b      	lsrs	r3, r3, #18
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	4413      	add	r3, r2
 8005094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	0fdb      	lsrs	r3, r3, #31
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 0320 	and.w	r3, r3, #32
 80050aa:	2b20      	cmp	r3, #32
 80050ac:	d104      	bne.n	80050b8 <USB_HC_Halt+0x5a>
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	e0c8      	b.n	800524a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d002      	beq.n	80050c4 <USB_HC_Halt+0x66>
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d163      	bne.n	800518c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	0151      	lsls	r1, r2, #5
 80050d6:	69fa      	ldr	r2, [r7, #28]
 80050d8:	440a      	add	r2, r1
 80050da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050e2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f003 0320 	and.w	r3, r3, #32
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f040 80ab 	bne.w	8005248 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d133      	bne.n	8005166 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	4413      	add	r3, r2
 8005106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	0151      	lsls	r1, r2, #5
 8005110:	69fa      	ldr	r2, [r7, #28]
 8005112:	440a      	add	r2, r1
 8005114:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005118:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800511c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	4413      	add	r3, r2
 8005126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	0151      	lsls	r1, r2, #5
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	440a      	add	r2, r1
 8005134:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005138:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800513c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	3301      	adds	r3, #1
 8005142:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800514a:	d81d      	bhi.n	8005188 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	4413      	add	r3, r2
 8005154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800515e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005162:	d0ec      	beq.n	800513e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005164:	e070      	b.n	8005248 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	4413      	add	r3, r2
 800516e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	0151      	lsls	r1, r2, #5
 8005178:	69fa      	ldr	r2, [r7, #28]
 800517a:	440a      	add	r2, r1
 800517c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005180:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005184:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005186:	e05f      	b.n	8005248 <USB_HC_Halt+0x1ea>
            break;
 8005188:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800518a:	e05d      	b.n	8005248 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	4413      	add	r3, r2
 8005194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	0151      	lsls	r1, r2, #5
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	440a      	add	r2, r1
 80051a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051aa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d133      	bne.n	8005224 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	0151      	lsls	r1, r2, #5
 80051ce:	69fa      	ldr	r2, [r7, #28]
 80051d0:	440a      	add	r2, r1
 80051d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051da:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	0151      	lsls	r1, r2, #5
 80051ee:	69fa      	ldr	r2, [r7, #28]
 80051f0:	440a      	add	r2, r1
 80051f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051fa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	3301      	adds	r3, #1
 8005200:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005208:	d81d      	bhi.n	8005246 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	4413      	add	r3, r2
 8005212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800521c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005220:	d0ec      	beq.n	80051fc <USB_HC_Halt+0x19e>
 8005222:	e011      	b.n	8005248 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	4413      	add	r3, r2
 800522c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	0151      	lsls	r1, r2, #5
 8005236:	69fa      	ldr	r2, [r7, #28]
 8005238:	440a      	add	r2, r1
 800523a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800523e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005242:	6013      	str	r3, [r2, #0]
 8005244:	e000      	b.n	8005248 <USB_HC_Halt+0x1ea>
          break;
 8005246:	bf00      	nop
    }
  }

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3724      	adds	r7, #36	; 0x24
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
	...

08005258 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	460b      	mov	r3, r1
 8005262:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005268:	78fb      	ldrb	r3, [r7, #3]
 800526a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800526c:	2301      	movs	r3, #1
 800526e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	04da      	lsls	r2, r3, #19
 8005274:	4b15      	ldr	r3, [pc, #84]	; (80052cc <USB_DoPing+0x74>)
 8005276:	4013      	ands	r3, r2
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	0151      	lsls	r1, r2, #5
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	440a      	add	r2, r1
 8005280:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005284:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005288:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	4413      	add	r3, r2
 8005292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052a0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052a8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b6:	461a      	mov	r2, r3
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	1ff80000 	.word	0x1ff80000

080052d0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b088      	sub	sp, #32
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7ff f912 	bl	800450e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052ea:	2110      	movs	r1, #16
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7ff f96b 	bl	80045c8 <USB_FlushTxFifo>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f7ff f997 	bl	8004630 <USB_FlushRxFifo>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800530c:	2300      	movs	r3, #0
 800530e:	61bb      	str	r3, [r7, #24]
 8005310:	e01f      	b.n	8005352 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	4413      	add	r3, r2
 800531a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005328:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005330:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005338:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	4413      	add	r3, r2
 8005342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005346:	461a      	mov	r2, r3
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	3301      	adds	r3, #1
 8005350:	61bb      	str	r3, [r7, #24]
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	2b0f      	cmp	r3, #15
 8005356:	d9dc      	bls.n	8005312 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005358:	2300      	movs	r3, #0
 800535a:	61bb      	str	r3, [r7, #24]
 800535c:	e034      	b.n	80053c8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	4413      	add	r3, r2
 8005366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005374:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800537c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005384:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	4413      	add	r3, r2
 800538e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005392:	461a      	mov	r2, r3
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	3301      	adds	r3, #1
 800539c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053a4:	d80c      	bhi.n	80053c0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053bc:	d0ec      	beq.n	8005398 <USB_StopHost+0xc8>
 80053be:	e000      	b.n	80053c2 <USB_StopHost+0xf2>
        break;
 80053c0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	3301      	adds	r3, #1
 80053c6:	61bb      	str	r3, [r7, #24]
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	2b0f      	cmp	r3, #15
 80053cc:	d9c7      	bls.n	800535e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053d4:	461a      	mov	r2, r3
 80053d6:	f04f 33ff 	mov.w	r3, #4294967295
 80053da:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f04f 32ff 	mov.w	r2, #4294967295
 80053e2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff f881 	bl	80044ec <USB_EnableGlobalInt>

  return ret;
 80053ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3720      	adds	r7, #32
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80053f4:	b590      	push	{r4, r7, lr}
 80053f6:	b089      	sub	sp, #36	; 0x24
 80053f8:	af04      	add	r7, sp, #16
 80053fa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80053fc:	2301      	movs	r3, #1
 80053fe:	2202      	movs	r2, #2
 8005400:	2102      	movs	r1, #2
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fc66 	bl	8005cd4 <USBH_FindInterface>
 8005408:	4603      	mov	r3, r0
 800540a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800540c:	7bfb      	ldrb	r3, [r7, #15]
 800540e:	2bff      	cmp	r3, #255	; 0xff
 8005410:	d002      	beq.n	8005418 <USBH_CDC_InterfaceInit+0x24>
 8005412:	7bfb      	ldrb	r3, [r7, #15]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d901      	bls.n	800541c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005418:	2302      	movs	r3, #2
 800541a:	e13d      	b.n	8005698 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800541c:	7bfb      	ldrb	r3, [r7, #15]
 800541e:	4619      	mov	r1, r3
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 fc3b 	bl	8005c9c <USBH_SelectInterface>
 8005426:	4603      	mov	r3, r0
 8005428:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800542a:	7bbb      	ldrb	r3, [r7, #14]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005430:	2302      	movs	r3, #2
 8005432:	e131      	b.n	8005698 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800543a:	2050      	movs	r0, #80	; 0x50
 800543c:	f002 fad2 	bl	80079e4 <malloc>
 8005440:	4603      	mov	r3, r0
 8005442:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005454:	2302      	movs	r3, #2
 8005456:	e11f      	b.n	8005698 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005458:	2250      	movs	r2, #80	; 0x50
 800545a:	2100      	movs	r1, #0
 800545c:	68b8      	ldr	r0, [r7, #8]
 800545e:	f002 fb7d 	bl	8007b5c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	211a      	movs	r1, #26
 8005468:	fb01 f303 	mul.w	r3, r1, r3
 800546c:	4413      	add	r3, r2
 800546e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	b25b      	sxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	da15      	bge.n	80054a6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	211a      	movs	r1, #26
 8005480:	fb01 f303 	mul.w	r3, r1, r3
 8005484:	4413      	add	r3, r2
 8005486:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800548a:	781a      	ldrb	r2, [r3, #0]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005490:	7bfb      	ldrb	r3, [r7, #15]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	211a      	movs	r1, #26
 8005496:	fb01 f303 	mul.w	r3, r1, r3
 800549a:	4413      	add	r3, r2
 800549c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80054a0:	881a      	ldrh	r2, [r3, #0]
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	785b      	ldrb	r3, [r3, #1]
 80054aa:	4619      	mov	r1, r3
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f001 ff2e 	bl	800730e <USBH_AllocPipe>
 80054b2:	4603      	mov	r3, r0
 80054b4:	461a      	mov	r2, r3
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	7819      	ldrb	r1, [r3, #0]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	7858      	ldrb	r0, [r3, #1]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	8952      	ldrh	r2, [r2, #10]
 80054d2:	9202      	str	r2, [sp, #8]
 80054d4:	2203      	movs	r2, #3
 80054d6:	9201      	str	r2, [sp, #4]
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	4623      	mov	r3, r4
 80054dc:	4602      	mov	r2, r0
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f001 fee6 	bl	80072b0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	2200      	movs	r2, #0
 80054ea:	4619      	mov	r1, r3
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f002 f9f5 	bl	80078dc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80054f2:	2300      	movs	r3, #0
 80054f4:	2200      	movs	r2, #0
 80054f6:	210a      	movs	r1, #10
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 fbeb 	bl	8005cd4 <USBH_FindInterface>
 80054fe:	4603      	mov	r3, r0
 8005500:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005502:	7bfb      	ldrb	r3, [r7, #15]
 8005504:	2bff      	cmp	r3, #255	; 0xff
 8005506:	d002      	beq.n	800550e <USBH_CDC_InterfaceInit+0x11a>
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d901      	bls.n	8005512 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800550e:	2302      	movs	r3, #2
 8005510:	e0c2      	b.n	8005698 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005512:	7bfb      	ldrb	r3, [r7, #15]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	211a      	movs	r1, #26
 8005518:	fb01 f303 	mul.w	r3, r1, r3
 800551c:	4413      	add	r3, r2
 800551e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	b25b      	sxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	da16      	bge.n	8005558 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	211a      	movs	r1, #26
 8005530:	fb01 f303 	mul.w	r3, r1, r3
 8005534:	4413      	add	r3, r2
 8005536:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800553a:	781a      	ldrb	r2, [r3, #0]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005540:	7bfb      	ldrb	r3, [r7, #15]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	211a      	movs	r1, #26
 8005546:	fb01 f303 	mul.w	r3, r1, r3
 800554a:	4413      	add	r3, r2
 800554c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005550:	881a      	ldrh	r2, [r3, #0]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	835a      	strh	r2, [r3, #26]
 8005556:	e015      	b.n	8005584 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005558:	7bfb      	ldrb	r3, [r7, #15]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	211a      	movs	r1, #26
 800555e:	fb01 f303 	mul.w	r3, r1, r3
 8005562:	4413      	add	r3, r2
 8005564:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005568:	781a      	ldrb	r2, [r3, #0]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800556e:	7bfb      	ldrb	r3, [r7, #15]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	211a      	movs	r1, #26
 8005574:	fb01 f303 	mul.w	r3, r1, r3
 8005578:	4413      	add	r3, r2
 800557a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800557e:	881a      	ldrh	r2, [r3, #0]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005584:	7bfb      	ldrb	r3, [r7, #15]
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	211a      	movs	r1, #26
 800558a:	fb01 f303 	mul.w	r3, r1, r3
 800558e:	4413      	add	r3, r2
 8005590:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	b25b      	sxtb	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	da16      	bge.n	80055ca <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	211a      	movs	r1, #26
 80055a2:	fb01 f303 	mul.w	r3, r1, r3
 80055a6:	4413      	add	r3, r2
 80055a8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80055ac:	781a      	ldrb	r2, [r3, #0]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	211a      	movs	r1, #26
 80055b8:	fb01 f303 	mul.w	r3, r1, r3
 80055bc:	4413      	add	r3, r2
 80055be:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80055c2:	881a      	ldrh	r2, [r3, #0]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	835a      	strh	r2, [r3, #26]
 80055c8:	e015      	b.n	80055f6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	211a      	movs	r1, #26
 80055d0:	fb01 f303 	mul.w	r3, r1, r3
 80055d4:	4413      	add	r3, r2
 80055d6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80055da:	781a      	ldrb	r2, [r3, #0]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	211a      	movs	r1, #26
 80055e6:	fb01 f303 	mul.w	r3, r1, r3
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80055f0:	881a      	ldrh	r2, [r3, #0]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	7b9b      	ldrb	r3, [r3, #14]
 80055fa:	4619      	mov	r1, r3
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f001 fe86 	bl	800730e <USBH_AllocPipe>
 8005602:	4603      	mov	r3, r0
 8005604:	461a      	mov	r2, r3
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	7bdb      	ldrb	r3, [r3, #15]
 800560e:	4619      	mov	r1, r3
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f001 fe7c 	bl	800730e <USBH_AllocPipe>
 8005616:	4603      	mov	r3, r0
 8005618:	461a      	mov	r2, r3
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	7b59      	ldrb	r1, [r3, #13]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	7b98      	ldrb	r0, [r3, #14]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	8b12      	ldrh	r2, [r2, #24]
 8005636:	9202      	str	r2, [sp, #8]
 8005638:	2202      	movs	r2, #2
 800563a:	9201      	str	r2, [sp, #4]
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	4623      	mov	r3, r4
 8005640:	4602      	mov	r2, r0
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f001 fe34 	bl	80072b0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	7b19      	ldrb	r1, [r3, #12]
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	7bd8      	ldrb	r0, [r3, #15]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	8b52      	ldrh	r2, [r2, #26]
 8005660:	9202      	str	r2, [sp, #8]
 8005662:	2202      	movs	r2, #2
 8005664:	9201      	str	r2, [sp, #4]
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	4623      	mov	r3, r4
 800566a:	4602      	mov	r2, r0
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f001 fe1f 	bl	80072b0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	7b5b      	ldrb	r3, [r3, #13]
 800567e:	2200      	movs	r2, #0
 8005680:	4619      	mov	r1, r3
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f002 f92a 	bl	80078dc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	7b1b      	ldrb	r3, [r3, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	4619      	mov	r1, r3
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f002 f923 	bl	80078dc <USBH_LL_SetToggle>

  return USBH_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	bd90      	pop	{r4, r7, pc}

080056a0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00e      	beq.n	80056d8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	4619      	mov	r1, r3
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f001 fe14 	bl	80072ee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	4619      	mov	r1, r3
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f001 fe3f 	bl	8007350 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	7b1b      	ldrb	r3, [r3, #12]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00e      	beq.n	80056fe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	7b1b      	ldrb	r3, [r3, #12]
 80056e4:	4619      	mov	r1, r3
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f001 fe01 	bl	80072ee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	7b1b      	ldrb	r3, [r3, #12]
 80056f0:	4619      	mov	r1, r3
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f001 fe2c 	bl	8007350 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	7b5b      	ldrb	r3, [r3, #13]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00e      	beq.n	8005724 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	7b5b      	ldrb	r3, [r3, #13]
 800570a:	4619      	mov	r1, r3
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f001 fdee 	bl	80072ee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	7b5b      	ldrb	r3, [r3, #13]
 8005716:	4619      	mov	r1, r3
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f001 fe19 	bl	8007350 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00b      	beq.n	8005748 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005736:	69db      	ldr	r3, [r3, #28]
 8005738:	4618      	mov	r0, r3
 800573a:	f002 f95b 	bl	80079f4 <free>
    phost->pActiveClass->pData = 0U;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005744:	2200      	movs	r2, #0
 8005746:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b084      	sub	sp, #16
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	3340      	adds	r3, #64	; 0x40
 8005768:	4619      	mov	r1, r3
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f8b1 	bl	80058d2 <GetLineCoding>
 8005770:	4603      	mov	r3, r0
 8005772:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005774:	7afb      	ldrb	r3, [r7, #11]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d105      	bne.n	8005786 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005780:	2102      	movs	r1, #2
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005786:	7afb      	ldrb	r3, [r7, #11]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005798:	2301      	movs	r3, #1
 800579a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	d877      	bhi.n	80058a4 <USBH_CDC_Process+0x114>
 80057b4:	a201      	add	r2, pc, #4	; (adr r2, 80057bc <USBH_CDC_Process+0x2c>)
 80057b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ba:	bf00      	nop
 80057bc:	080057d1 	.word	0x080057d1
 80057c0:	080057d7 	.word	0x080057d7
 80057c4:	08005807 	.word	0x08005807
 80057c8:	0800587b 	.word	0x0800587b
 80057cc:	08005889 	.word	0x08005889
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	73fb      	strb	r3, [r7, #15]
      break;
 80057d4:	e06d      	b.n	80058b2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057da:	4619      	mov	r1, r3
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f897 	bl	8005910 <SetLineCoding>
 80057e2:	4603      	mov	r3, r0
 80057e4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80057e6:	7bbb      	ldrb	r3, [r7, #14]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d104      	bne.n	80057f6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80057f4:	e058      	b.n	80058a8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80057f6:	7bbb      	ldrb	r3, [r7, #14]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d055      	beq.n	80058a8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2204      	movs	r2, #4
 8005800:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005804:	e050      	b.n	80058a8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	3340      	adds	r3, #64	; 0x40
 800580a:	4619      	mov	r1, r3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f860 	bl	80058d2 <GetLineCoding>
 8005812:	4603      	mov	r3, r0
 8005814:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005816:	7bbb      	ldrb	r3, [r7, #14]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d126      	bne.n	800586a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800582e:	791b      	ldrb	r3, [r3, #4]
 8005830:	429a      	cmp	r2, r3
 8005832:	d13b      	bne.n	80058ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800583e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005840:	429a      	cmp	r2, r3
 8005842:	d133      	bne.n	80058ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800584e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005850:	429a      	cmp	r2, r3
 8005852:	d12b      	bne.n	80058ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800585c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800585e:	429a      	cmp	r2, r3
 8005860:	d124      	bne.n	80058ac <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f958 	bl	8005b18 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005868:	e020      	b.n	80058ac <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800586a:	7bbb      	ldrb	r3, [r7, #14]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d01d      	beq.n	80058ac <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2204      	movs	r2, #4
 8005874:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005878:	e018      	b.n	80058ac <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f867 	bl	800594e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f8da 	bl	8005a3a <CDC_ProcessReception>
      break;
 8005886:	e014      	b.n	80058b2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005888:	2100      	movs	r1, #0
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 ffef 	bl	800686e <USBH_ClrFeature>
 8005890:	4603      	mov	r3, r0
 8005892:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005894:	7bbb      	ldrb	r3, [r7, #14]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10a      	bne.n	80058b0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80058a2:	e005      	b.n	80058b0 <USBH_CDC_Process+0x120>

    default:
      break;
 80058a4:	bf00      	nop
 80058a6:	e004      	b.n	80058b2 <USBH_CDC_Process+0x122>
      break;
 80058a8:	bf00      	nop
 80058aa:	e002      	b.n	80058b2 <USBH_CDC_Process+0x122>
      break;
 80058ac:	bf00      	nop
 80058ae:	e000      	b.n	80058b2 <USBH_CDC_Process+0x122>
      break;
 80058b0:	bf00      	nop

  }

  return status;
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b082      	sub	sp, #8
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	22a1      	movs	r2, #161	; 0xa1
 80058e0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2221      	movs	r2, #33	; 0x21
 80058e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2207      	movs	r2, #7
 80058f8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2207      	movs	r2, #7
 80058fe:	4619      	mov	r1, r3
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f001 fa83 	bl	8006e0c <USBH_CtlReq>
 8005906:	4603      	mov	r3, r0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2221      	movs	r2, #33	; 0x21
 800591e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2207      	movs	r2, #7
 8005936:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2207      	movs	r2, #7
 800593c:	4619      	mov	r1, r3
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f001 fa64 	bl	8006e0c <USBH_CtlReq>
 8005944:	4603      	mov	r3, r0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b086      	sub	sp, #24
 8005952:	af02      	add	r7, sp, #8
 8005954:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005960:	2300      	movs	r3, #0
 8005962:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800596a:	2b01      	cmp	r3, #1
 800596c:	d002      	beq.n	8005974 <CDC_ProcessTransmission+0x26>
 800596e:	2b02      	cmp	r3, #2
 8005970:	d023      	beq.n	80059ba <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005972:	e05e      	b.n	8005a32 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	8b12      	ldrh	r2, [r2, #24]
 800597c:	4293      	cmp	r3, r2
 800597e:	d90b      	bls.n	8005998 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	69d9      	ldr	r1, [r3, #28]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8b1a      	ldrh	r2, [r3, #24]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	7b5b      	ldrb	r3, [r3, #13]
 800598c:	2001      	movs	r0, #1
 800598e:	9000      	str	r0, [sp, #0]
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f001 fc4a 	bl	800722a <USBH_BulkSendData>
 8005996:	e00b      	b.n	80059b0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	7b5b      	ldrb	r3, [r3, #13]
 80059a6:	2001      	movs	r0, #1
 80059a8:	9000      	str	r0, [sp, #0]
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f001 fc3d 	bl	800722a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2202      	movs	r2, #2
 80059b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80059b8:	e03b      	b.n	8005a32 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	7b5b      	ldrb	r3, [r3, #13]
 80059be:	4619      	mov	r1, r3
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f001 ff61 	bl	8007888 <USBH_LL_GetURBState>
 80059c6:	4603      	mov	r3, r0
 80059c8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80059ca:	7afb      	ldrb	r3, [r7, #11]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d128      	bne.n	8005a22 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	8b12      	ldrh	r2, [r2, #24]
 80059d8:	4293      	cmp	r3, r2
 80059da:	d90e      	bls.n	80059fa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	8b12      	ldrh	r2, [r2, #24]
 80059e4:	1a9a      	subs	r2, r3, r2
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	69db      	ldr	r3, [r3, #28]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	8b12      	ldrh	r2, [r2, #24]
 80059f2:	441a      	add	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	61da      	str	r2, [r3, #28]
 80059f8:	e002      	b.n	8005a00 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d004      	beq.n	8005a12 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005a10:	e00e      	b.n	8005a30 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f868 	bl	8005af0 <USBH_CDC_TransmitCallback>
      break;
 8005a20:	e006      	b.n	8005a30 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005a22:	7afb      	ldrb	r3, [r7, #11]
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d103      	bne.n	8005a30 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005a30:	bf00      	nop
  }
}
 8005a32:	bf00      	nop
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b086      	sub	sp, #24
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d002      	beq.n	8005a60 <CDC_ProcessReception+0x26>
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d00e      	beq.n	8005a7c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005a5e:	e043      	b.n	8005ae8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	6a19      	ldr	r1, [r3, #32]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	8b5a      	ldrh	r2, [r3, #26]
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	7b1b      	ldrb	r3, [r3, #12]
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f001 fc01 	bl	8007274 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2204      	movs	r2, #4
 8005a76:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005a7a:	e035      	b.n	8005ae8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	7b1b      	ldrb	r3, [r3, #12]
 8005a80:	4619      	mov	r1, r3
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f001 ff00 	bl	8007888 <USBH_LL_GetURBState>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005a8c:	7cfb      	ldrb	r3, [r7, #19]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d129      	bne.n	8005ae6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	7b1b      	ldrb	r3, [r3, #12]
 8005a96:	4619      	mov	r1, r3
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f001 fe63 	bl	8007764 <USBH_LL_GetLastXferSize>
 8005a9e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d016      	beq.n	8005ad8 <CDC_ProcessReception+0x9e>
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	8b5b      	ldrh	r3, [r3, #26]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d910      	bls.n	8005ad8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	1ad2      	subs	r2, r2, r3
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	6a1a      	ldr	r2, [r3, #32]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	441a      	add	r2, r3
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2203      	movs	r2, #3
 8005ad2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005ad6:	e006      	b.n	8005ae6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f80f 	bl	8005b04 <USBH_CDC_ReceiveCallback>
      break;
 8005ae6:	bf00      	nop
  }
}
 8005ae8:	bf00      	nop
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	4613      	mov	r3, r2
 8005b38:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005b40:	2302      	movs	r3, #2
 8005b42:	e029      	b.n	8005b98 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	79fa      	ldrb	r2, [r7, #7]
 8005b48:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 f81f 	bl	8005ba0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d003      	beq.n	8005b90 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f001 fd33 	bl	80075fc <USBH_LL_Init>

  return USBH_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005bac:	2300      	movs	r3, #0
 8005bae:	60fb      	str	r3, [r7, #12]
 8005bb0:	e009      	b.n	8005bc6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	33e0      	adds	r3, #224	; 0xe0
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b0f      	cmp	r3, #15
 8005bca:	d9f2      	bls.n	8005bb2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005bcc:	2300      	movs	r3, #0
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	e009      	b.n	8005be6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005bdc:	2200      	movs	r2, #0
 8005bde:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3301      	adds	r3, #1
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bec:	d3f1      	bcc.n	8005bd2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2240      	movs	r2, #64	; 0x40
 8005c12:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d016      	beq.n	8005c8a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10e      	bne.n	8005c84 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005c6c:	1c59      	adds	r1, r3, #1
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	33de      	adds	r3, #222	; 0xde
 8005c78:	6839      	ldr	r1, [r7, #0]
 8005c7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	73fb      	strb	r3, [r7, #15]
 8005c82:	e004      	b.n	8005c8e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005c84:	2302      	movs	r3, #2
 8005c86:	73fb      	strb	r3, [r7, #15]
 8005c88:	e001      	b.n	8005c8e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005cb2:	78fa      	ldrb	r2, [r7, #3]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d204      	bcs.n	8005cc2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	78fa      	ldrb	r2, [r7, #3]
 8005cbc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005cc0:	e001      	b.n	8005cc6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	4608      	mov	r0, r1
 8005cde:	4611      	mov	r1, r2
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	70fb      	strb	r3, [r7, #3]
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	70bb      	strb	r3, [r7, #2]
 8005cea:	4613      	mov	r3, r2
 8005cec:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005cfc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005cfe:	e025      	b.n	8005d4c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005d00:	7dfb      	ldrb	r3, [r7, #23]
 8005d02:	221a      	movs	r2, #26
 8005d04:	fb02 f303 	mul.w	r3, r2, r3
 8005d08:	3308      	adds	r3, #8
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	3302      	adds	r3, #2
 8005d10:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	795b      	ldrb	r3, [r3, #5]
 8005d16:	78fa      	ldrb	r2, [r7, #3]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d002      	beq.n	8005d22 <USBH_FindInterface+0x4e>
 8005d1c:	78fb      	ldrb	r3, [r7, #3]
 8005d1e:	2bff      	cmp	r3, #255	; 0xff
 8005d20:	d111      	bne.n	8005d46 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005d26:	78ba      	ldrb	r2, [r7, #2]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d002      	beq.n	8005d32 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005d2c:	78bb      	ldrb	r3, [r7, #2]
 8005d2e:	2bff      	cmp	r3, #255	; 0xff
 8005d30:	d109      	bne.n	8005d46 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005d36:	787a      	ldrb	r2, [r7, #1]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d002      	beq.n	8005d42 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005d3c:	787b      	ldrb	r3, [r7, #1]
 8005d3e:	2bff      	cmp	r3, #255	; 0xff
 8005d40:	d101      	bne.n	8005d46 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005d42:	7dfb      	ldrb	r3, [r7, #23]
 8005d44:	e006      	b.n	8005d54 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005d46:	7dfb      	ldrb	r3, [r7, #23]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005d4c:	7dfb      	ldrb	r3, [r7, #23]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d9d6      	bls.n	8005d00 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005d52:	23ff      	movs	r3, #255	; 0xff
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f001 fc83 	bl	8007674 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8005d6e:	2101      	movs	r1, #1
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f001 fd9c 	bl	80078ae <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b088      	sub	sp, #32
 8005d84:	af04      	add	r7, sp, #16
 8005d86:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005d88:	2302      	movs	r3, #2
 8005d8a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d102      	bne.n	8005da2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2203      	movs	r2, #3
 8005da0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b0b      	cmp	r3, #11
 8005daa:	f200 81be 	bhi.w	800612a <USBH_Process+0x3aa>
 8005dae:	a201      	add	r2, pc, #4	; (adr r2, 8005db4 <USBH_Process+0x34>)
 8005db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db4:	08005de5 	.word	0x08005de5
 8005db8:	08005e17 	.word	0x08005e17
 8005dbc:	08005e7f 	.word	0x08005e7f
 8005dc0:	080060c5 	.word	0x080060c5
 8005dc4:	0800612b 	.word	0x0800612b
 8005dc8:	08005f23 	.word	0x08005f23
 8005dcc:	0800606b 	.word	0x0800606b
 8005dd0:	08005f59 	.word	0x08005f59
 8005dd4:	08005f79 	.word	0x08005f79
 8005dd8:	08005f99 	.word	0x08005f99
 8005ddc:	08005fdd 	.word	0x08005fdd
 8005de0:	080060ad 	.word	0x080060ad
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 819e 	beq.w	800612e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005df8:	20c8      	movs	r0, #200	; 0xc8
 8005dfa:	f001 fd9f 	bl	800793c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f001 fc95 	bl	800772e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005e14:	e18b      	b.n	800612e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d107      	bne.n	8005e30 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005e2e:	e18d      	b.n	800614c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005e36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e3a:	d914      	bls.n	8005e66 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005e42:	3301      	adds	r3, #1
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	d903      	bls.n	8005e5e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	220d      	movs	r2, #13
 8005e5a:	701a      	strb	r2, [r3, #0]
      break;
 8005e5c:	e176      	b.n	800614c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	701a      	strb	r2, [r3, #0]
      break;
 8005e64:	e172      	b.n	800614c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005e6c:	f103 020a 	add.w	r2, r3, #10
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005e76:	200a      	movs	r0, #10
 8005e78:	f001 fd60 	bl	800793c <USBH_Delay>
      break;
 8005e7c:	e166      	b.n	800614c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d005      	beq.n	8005e94 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e8e:	2104      	movs	r1, #4
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005e94:	2064      	movs	r0, #100	; 0x64
 8005e96:	f001 fd51 	bl	800793c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f001 fc20 	bl	80076e0 <USBH_LL_GetSpeed>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2205      	movs	r2, #5
 8005eae:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f001 fa2b 	bl	800730e <USBH_AllocPipe>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	461a      	mov	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005ec0:	2180      	movs	r1, #128	; 0x80
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f001 fa23 	bl	800730e <USBH_AllocPipe>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	461a      	mov	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	7919      	ldrb	r1, [r3, #4]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005ee4:	b292      	uxth	r2, r2
 8005ee6:	9202      	str	r2, [sp, #8]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	9201      	str	r2, [sp, #4]
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2280      	movs	r2, #128	; 0x80
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f001 f9dc 	bl	80072b0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	7959      	ldrb	r1, [r3, #5]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005f0c:	b292      	uxth	r2, r2
 8005f0e:	9202      	str	r2, [sp, #8]
 8005f10:	2200      	movs	r2, #0
 8005f12:	9201      	str	r2, [sp, #4]
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	4603      	mov	r3, r0
 8005f18:	2200      	movs	r2, #0
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f001 f9c8 	bl	80072b0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005f20:	e114      	b.n	800614c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f918 	bl	8006158 <USBH_HandleEnum>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005f2c:	7bbb      	ldrb	r3, [r7, #14]
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f040 80fe 	bne.w	8006132 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d103      	bne.n	8005f50 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2208      	movs	r2, #8
 8005f4c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005f4e:	e0f0      	b.n	8006132 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2207      	movs	r2, #7
 8005f54:	701a      	strb	r2, [r3, #0]
      break;
 8005f56:	e0ec      	b.n	8006132 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 80e9 	beq.w	8006136 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2208      	movs	r2, #8
 8005f74:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8005f76:	e0de      	b.n	8006136 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	4619      	mov	r1, r3
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fc2c 	bl	80067e0 <USBH_SetCfg>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f040 80d5 	bne.w	800613a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2209      	movs	r2, #9
 8005f94:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005f96:	e0d0      	b.n	800613a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005f9e:	f003 0320 	and.w	r3, r3, #32
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d016      	beq.n	8005fd4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fc3c 	bl	8006826 <USBH_SetFeature>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005fb2:	7bbb      	ldrb	r3, [r7, #14]
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d103      	bne.n	8005fc2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	220a      	movs	r2, #10
 8005fbe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005fc0:	e0bd      	b.n	800613e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8005fc2:	7bbb      	ldrb	r3, [r7, #14]
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b03      	cmp	r3, #3
 8005fc8:	f040 80b9 	bne.w	800613e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	220a      	movs	r2, #10
 8005fd0:	701a      	strb	r2, [r3, #0]
      break;
 8005fd2:	e0b4      	b.n	800613e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	220a      	movs	r2, #10
 8005fd8:	701a      	strb	r2, [r3, #0]
      break;
 8005fda:	e0b0      	b.n	800613e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 80ad 	beq.w	8006142 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	73fb      	strb	r3, [r7, #15]
 8005ff4:	e016      	b.n	8006024 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005ff6:	7bfa      	ldrb	r2, [r7, #15]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	32de      	adds	r2, #222	; 0xde
 8005ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006000:	791a      	ldrb	r2, [r3, #4]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006008:	429a      	cmp	r2, r3
 800600a:	d108      	bne.n	800601e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800600c:	7bfa      	ldrb	r2, [r7, #15]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	32de      	adds	r2, #222	; 0xde
 8006012:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800601c:	e005      	b.n	800602a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800601e:	7bfb      	ldrb	r3, [r7, #15]
 8006020:	3301      	adds	r3, #1
 8006022:	73fb      	strb	r3, [r7, #15]
 8006024:	7bfb      	ldrb	r3, [r7, #15]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0e5      	beq.n	8005ff6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006030:	2b00      	cmp	r3, #0
 8006032:	d016      	beq.n	8006062 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	4798      	blx	r3
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d109      	bne.n	800605a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2206      	movs	r2, #6
 800604a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006052:	2103      	movs	r1, #3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006058:	e073      	b.n	8006142 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	220d      	movs	r2, #13
 800605e:	701a      	strb	r2, [r3, #0]
      break;
 8006060:	e06f      	b.n	8006142 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	220d      	movs	r2, #13
 8006066:	701a      	strb	r2, [r3, #0]
      break;
 8006068:	e06b      	b.n	8006142 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006070:	2b00      	cmp	r3, #0
 8006072:	d017      	beq.n	80060a4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	4798      	blx	r3
 8006080:	4603      	mov	r3, r0
 8006082:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006084:	7bbb      	ldrb	r3, [r7, #14]
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	d103      	bne.n	8006094 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	220b      	movs	r2, #11
 8006090:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006092:	e058      	b.n	8006146 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006094:	7bbb      	ldrb	r3, [r7, #14]
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b02      	cmp	r3, #2
 800609a:	d154      	bne.n	8006146 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	220d      	movs	r2, #13
 80060a0:	701a      	strb	r2, [r3, #0]
      break;
 80060a2:	e050      	b.n	8006146 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	220d      	movs	r2, #13
 80060a8:	701a      	strb	r2, [r3, #0]
      break;
 80060aa:	e04c      	b.n	8006146 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d049      	beq.n	800614a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	4798      	blx	r3
      }
      break;
 80060c2:	e042      	b.n	800614a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7ff fd67 	bl	8005ba0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d009      	beq.n	80060f0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d005      	beq.n	8006106 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006100:	2105      	movs	r1, #5
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b01      	cmp	r3, #1
 8006110:	d107      	bne.n	8006122 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff fe20 	bl	8005d60 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006120:	e014      	b.n	800614c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f001 faa6 	bl	8007674 <USBH_LL_Start>
      break;
 8006128:	e010      	b.n	800614c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800612a:	bf00      	nop
 800612c:	e00e      	b.n	800614c <USBH_Process+0x3cc>
      break;
 800612e:	bf00      	nop
 8006130:	e00c      	b.n	800614c <USBH_Process+0x3cc>
      break;
 8006132:	bf00      	nop
 8006134:	e00a      	b.n	800614c <USBH_Process+0x3cc>
    break;
 8006136:	bf00      	nop
 8006138:	e008      	b.n	800614c <USBH_Process+0x3cc>
      break;
 800613a:	bf00      	nop
 800613c:	e006      	b.n	800614c <USBH_Process+0x3cc>
      break;
 800613e:	bf00      	nop
 8006140:	e004      	b.n	800614c <USBH_Process+0x3cc>
      break;
 8006142:	bf00      	nop
 8006144:	e002      	b.n	800614c <USBH_Process+0x3cc>
      break;
 8006146:	bf00      	nop
 8006148:	e000      	b.n	800614c <USBH_Process+0x3cc>
      break;
 800614a:	bf00      	nop
  }
  return USBH_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop

08006158 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b088      	sub	sp, #32
 800615c:	af04      	add	r7, sp, #16
 800615e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006160:	2301      	movs	r3, #1
 8006162:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006164:	2301      	movs	r3, #1
 8006166:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	785b      	ldrb	r3, [r3, #1]
 800616c:	2b07      	cmp	r3, #7
 800616e:	f200 81c1 	bhi.w	80064f4 <USBH_HandleEnum+0x39c>
 8006172:	a201      	add	r2, pc, #4	; (adr r2, 8006178 <USBH_HandleEnum+0x20>)
 8006174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006178:	08006199 	.word	0x08006199
 800617c:	08006257 	.word	0x08006257
 8006180:	080062c1 	.word	0x080062c1
 8006184:	0800634f 	.word	0x0800634f
 8006188:	080063b9 	.word	0x080063b9
 800618c:	08006429 	.word	0x08006429
 8006190:	0800646f 	.word	0x0800646f
 8006194:	080064b5 	.word	0x080064b5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006198:	2108      	movs	r1, #8
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fa50 	bl	8006640 <USBH_Get_DevDesc>
 80061a0:	4603      	mov	r3, r0
 80061a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80061a4:	7bbb      	ldrb	r3, [r7, #14]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d130      	bne.n	800620c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	7919      	ldrb	r1, [r3, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80061ce:	b292      	uxth	r2, r2
 80061d0:	9202      	str	r2, [sp, #8]
 80061d2:	2200      	movs	r2, #0
 80061d4:	9201      	str	r2, [sp, #4]
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	4603      	mov	r3, r0
 80061da:	2280      	movs	r2, #128	; 0x80
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f001 f867 	bl	80072b0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	7959      	ldrb	r1, [r3, #5]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80061f6:	b292      	uxth	r2, r2
 80061f8:	9202      	str	r2, [sp, #8]
 80061fa:	2200      	movs	r2, #0
 80061fc:	9201      	str	r2, [sp, #4]
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	4603      	mov	r3, r0
 8006202:	2200      	movs	r2, #0
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f001 f853 	bl	80072b0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800620a:	e175      	b.n	80064f8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800620c:	7bbb      	ldrb	r3, [r7, #14]
 800620e:	2b03      	cmp	r3, #3
 8006210:	f040 8172 	bne.w	80064f8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800621a:	3301      	adds	r3, #1
 800621c:	b2da      	uxtb	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800622a:	2b03      	cmp	r3, #3
 800622c:	d903      	bls.n	8006236 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	220d      	movs	r2, #13
 8006232:	701a      	strb	r2, [r3, #0]
      break;
 8006234:	e160      	b.n	80064f8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	795b      	ldrb	r3, [r3, #5]
 800623a:	4619      	mov	r1, r3
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f001 f887 	bl	8007350 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	791b      	ldrb	r3, [r3, #4]
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f001 f881 	bl	8007350 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	701a      	strb	r2, [r3, #0]
      break;
 8006254:	e150      	b.n	80064f8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006256:	2112      	movs	r1, #18
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f9f1 	bl	8006640 <USBH_Get_DevDesc>
 800625e:	4603      	mov	r3, r0
 8006260:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006262:	7bbb      	ldrb	r3, [r7, #14]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d103      	bne.n	8006270 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800626e:	e145      	b.n	80064fc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006270:	7bbb      	ldrb	r3, [r7, #14]
 8006272:	2b03      	cmp	r3, #3
 8006274:	f040 8142 	bne.w	80064fc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800627e:	3301      	adds	r3, #1
 8006280:	b2da      	uxtb	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800628e:	2b03      	cmp	r3, #3
 8006290:	d903      	bls.n	800629a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	220d      	movs	r2, #13
 8006296:	701a      	strb	r2, [r3, #0]
      break;
 8006298:	e130      	b.n	80064fc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	795b      	ldrb	r3, [r3, #5]
 800629e:	4619      	mov	r1, r3
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f001 f855 	bl	8007350 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	791b      	ldrb	r3, [r3, #4]
 80062aa:	4619      	mov	r1, r3
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f001 f84f 	bl	8007350 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	701a      	strb	r2, [r3, #0]
      break;
 80062be:	e11d      	b.n	80064fc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80062c0:	2101      	movs	r1, #1
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fa68 	bl	8006798 <USBH_SetAddress>
 80062c8:	4603      	mov	r3, r0
 80062ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80062cc:	7bbb      	ldrb	r3, [r7, #14]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d132      	bne.n	8006338 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80062d2:	2002      	movs	r0, #2
 80062d4:	f001 fb32 	bl	800793c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2203      	movs	r2, #3
 80062e4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	7919      	ldrb	r1, [r3, #4]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80062fa:	b292      	uxth	r2, r2
 80062fc:	9202      	str	r2, [sp, #8]
 80062fe:	2200      	movs	r2, #0
 8006300:	9201      	str	r2, [sp, #4]
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	4603      	mov	r3, r0
 8006306:	2280      	movs	r2, #128	; 0x80
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 ffd1 	bl	80072b0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	7959      	ldrb	r1, [r3, #5]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006322:	b292      	uxth	r2, r2
 8006324:	9202      	str	r2, [sp, #8]
 8006326:	2200      	movs	r2, #0
 8006328:	9201      	str	r2, [sp, #4]
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	4603      	mov	r3, r0
 800632e:	2200      	movs	r2, #0
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 ffbd 	bl	80072b0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006336:	e0e3      	b.n	8006500 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006338:	7bbb      	ldrb	r3, [r7, #14]
 800633a:	2b03      	cmp	r3, #3
 800633c:	f040 80e0 	bne.w	8006500 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	220d      	movs	r2, #13
 8006344:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	705a      	strb	r2, [r3, #1]
      break;
 800634c:	e0d8      	b.n	8006500 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800634e:	2109      	movs	r1, #9
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f99d 	bl	8006690 <USBH_Get_CfgDesc>
 8006356:	4603      	mov	r3, r0
 8006358:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800635a:	7bbb      	ldrb	r3, [r7, #14]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d103      	bne.n	8006368 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2204      	movs	r2, #4
 8006364:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006366:	e0cd      	b.n	8006504 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006368:	7bbb      	ldrb	r3, [r7, #14]
 800636a:	2b03      	cmp	r3, #3
 800636c:	f040 80ca 	bne.w	8006504 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006376:	3301      	adds	r3, #1
 8006378:	b2da      	uxtb	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006386:	2b03      	cmp	r3, #3
 8006388:	d903      	bls.n	8006392 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	220d      	movs	r2, #13
 800638e:	701a      	strb	r2, [r3, #0]
      break;
 8006390:	e0b8      	b.n	8006504 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	795b      	ldrb	r3, [r3, #5]
 8006396:	4619      	mov	r1, r3
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 ffd9 	bl	8007350 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	791b      	ldrb	r3, [r3, #4]
 80063a2:	4619      	mov	r1, r3
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 ffd3 	bl	8007350 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	701a      	strb	r2, [r3, #0]
      break;
 80063b6:	e0a5      	b.n	8006504 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80063be:	4619      	mov	r1, r3
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f965 	bl	8006690 <USBH_Get_CfgDesc>
 80063c6:	4603      	mov	r3, r0
 80063c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80063ca:	7bbb      	ldrb	r3, [r7, #14]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d103      	bne.n	80063d8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2205      	movs	r2, #5
 80063d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80063d6:	e097      	b.n	8006508 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063d8:	7bbb      	ldrb	r3, [r7, #14]
 80063da:	2b03      	cmp	r3, #3
 80063dc:	f040 8094 	bne.w	8006508 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063e6:	3301      	adds	r3, #1
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	d903      	bls.n	8006402 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	220d      	movs	r2, #13
 80063fe:	701a      	strb	r2, [r3, #0]
      break;
 8006400:	e082      	b.n	8006508 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	795b      	ldrb	r3, [r3, #5]
 8006406:	4619      	mov	r1, r3
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 ffa1 	bl	8007350 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	791b      	ldrb	r3, [r3, #4]
 8006412:	4619      	mov	r1, r3
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 ff9b 	bl	8007350 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	701a      	strb	r2, [r3, #0]
      break;
 8006426:	e06f      	b.n	8006508 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800642e:	2b00      	cmp	r3, #0
 8006430:	d019      	beq.n	8006466 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800643e:	23ff      	movs	r3, #255	; 0xff
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f949 	bl	80066d8 <USBH_Get_StringDesc>
 8006446:	4603      	mov	r3, r0
 8006448:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800644a:	7bbb      	ldrb	r3, [r7, #14]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d103      	bne.n	8006458 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2206      	movs	r2, #6
 8006454:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006456:	e059      	b.n	800650c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006458:	7bbb      	ldrb	r3, [r7, #14]
 800645a:	2b03      	cmp	r3, #3
 800645c:	d156      	bne.n	800650c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2206      	movs	r2, #6
 8006462:	705a      	strb	r2, [r3, #1]
      break;
 8006464:	e052      	b.n	800650c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2206      	movs	r2, #6
 800646a:	705a      	strb	r2, [r3, #1]
      break;
 800646c:	e04e      	b.n	800650c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006474:	2b00      	cmp	r3, #0
 8006476:	d019      	beq.n	80064ac <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006484:	23ff      	movs	r3, #255	; 0xff
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f926 	bl	80066d8 <USBH_Get_StringDesc>
 800648c:	4603      	mov	r3, r0
 800648e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006490:	7bbb      	ldrb	r3, [r7, #14]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d103      	bne.n	800649e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2207      	movs	r2, #7
 800649a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800649c:	e038      	b.n	8006510 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800649e:	7bbb      	ldrb	r3, [r7, #14]
 80064a0:	2b03      	cmp	r3, #3
 80064a2:	d135      	bne.n	8006510 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2207      	movs	r2, #7
 80064a8:	705a      	strb	r2, [r3, #1]
      break;
 80064aa:	e031      	b.n	8006510 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2207      	movs	r2, #7
 80064b0:	705a      	strb	r2, [r3, #1]
      break;
 80064b2:	e02d      	b.n	8006510 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d017      	beq.n	80064ee <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80064ca:	23ff      	movs	r3, #255	; 0xff
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 f903 	bl	80066d8 <USBH_Get_StringDesc>
 80064d2:	4603      	mov	r3, r0
 80064d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80064d6:	7bbb      	ldrb	r3, [r7, #14]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d102      	bne.n	80064e2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80064dc:	2300      	movs	r3, #0
 80064de:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80064e0:	e018      	b.n	8006514 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064e2:	7bbb      	ldrb	r3, [r7, #14]
 80064e4:	2b03      	cmp	r3, #3
 80064e6:	d115      	bne.n	8006514 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80064e8:	2300      	movs	r3, #0
 80064ea:	73fb      	strb	r3, [r7, #15]
      break;
 80064ec:	e012      	b.n	8006514 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80064ee:	2300      	movs	r3, #0
 80064f0:	73fb      	strb	r3, [r7, #15]
      break;
 80064f2:	e00f      	b.n	8006514 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80064f4:	bf00      	nop
 80064f6:	e00e      	b.n	8006516 <USBH_HandleEnum+0x3be>
      break;
 80064f8:	bf00      	nop
 80064fa:	e00c      	b.n	8006516 <USBH_HandleEnum+0x3be>
      break;
 80064fc:	bf00      	nop
 80064fe:	e00a      	b.n	8006516 <USBH_HandleEnum+0x3be>
      break;
 8006500:	bf00      	nop
 8006502:	e008      	b.n	8006516 <USBH_HandleEnum+0x3be>
      break;
 8006504:	bf00      	nop
 8006506:	e006      	b.n	8006516 <USBH_HandleEnum+0x3be>
      break;
 8006508:	bf00      	nop
 800650a:	e004      	b.n	8006516 <USBH_HandleEnum+0x3be>
      break;
 800650c:	bf00      	nop
 800650e:	e002      	b.n	8006516 <USBH_HandleEnum+0x3be>
      break;
 8006510:	bf00      	nop
 8006512:	e000      	b.n	8006516 <USBH_HandleEnum+0x3be>
      break;
 8006514:	bf00      	nop
  }
  return Status;
 8006516:	7bfb      	ldrb	r3, [r7, #15]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006532:	bf00      	nop
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b082      	sub	sp, #8
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800654c:	1c5a      	adds	r2, r3, #1
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f804 	bl	8006562 <USBH_HandleSof>
}
 800655a:	bf00      	nop
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b082      	sub	sp, #8
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b0b      	cmp	r3, #11
 8006572:	d10a      	bne.n	800658a <USBH_HandleSof+0x28>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800657a:	2b00      	cmp	r3, #0
 800657c:	d005      	beq.n	800658a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	4798      	blx	r3
  }
}
 800658a:	bf00      	nop
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006592:	b480      	push	{r7}
 8006594:	b083      	sub	sp, #12
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80065a2:	bf00      	nop
}
 80065a4:	370c      	adds	r7, #12
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b083      	sub	sp, #12
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80065be:	bf00      	nop
}
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b083      	sub	sp, #12
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f001 f846 	bl	80076aa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	791b      	ldrb	r3, [r3, #4]
 8006622:	4619      	mov	r1, r3
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fe93 	bl	8007350 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	795b      	ldrb	r3, [r3, #5]
 800662e:	4619      	mov	r1, r3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 fe8d 	bl	8007350 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af02      	add	r7, sp, #8
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006652:	78fb      	ldrb	r3, [r7, #3]
 8006654:	b29b      	uxth	r3, r3
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	4613      	mov	r3, r2
 800665a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800665e:	2100      	movs	r1, #0
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f864 	bl	800672e <USBH_GetDescriptor>
 8006666:	4603      	mov	r3, r0
 8006668:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800666a:	7bfb      	ldrb	r3, [r7, #15]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10a      	bne.n	8006686 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800667c:	78fa      	ldrb	r2, [r7, #3]
 800667e:	b292      	uxth	r2, r2
 8006680:	4619      	mov	r1, r3
 8006682:	f000 f919 	bl	80068b8 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006686:	7bfb      	ldrb	r3, [r7, #15]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af02      	add	r7, sp, #8
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	331c      	adds	r3, #28
 80066a0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80066a2:	887b      	ldrh	r3, [r7, #2]
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066ac:	2100      	movs	r1, #0
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f83d 	bl	800672e <USBH_GetDescriptor>
 80066b4:	4603      	mov	r3, r0
 80066b6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d107      	bne.n	80066ce <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80066be:	887b      	ldrh	r3, [r7, #2]
 80066c0:	461a      	mov	r2, r3
 80066c2:	68b9      	ldr	r1, [r7, #8]
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f989 	bl	80069dc <USBH_ParseCfgDesc>
 80066ca:	4603      	mov	r3, r0
 80066cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b088      	sub	sp, #32
 80066dc:	af02      	add	r7, sp, #8
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	607a      	str	r2, [r7, #4]
 80066e2:	461a      	mov	r2, r3
 80066e4:	460b      	mov	r3, r1
 80066e6:	72fb      	strb	r3, [r7, #11]
 80066e8:	4613      	mov	r3, r2
 80066ea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80066ec:	7afb      	ldrb	r3, [r7, #11]
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80066f4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80066fc:	893b      	ldrh	r3, [r7, #8]
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	460b      	mov	r3, r1
 8006702:	2100      	movs	r1, #0
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 f812 	bl	800672e <USBH_GetDescriptor>
 800670a:	4603      	mov	r3, r0
 800670c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800670e:	7dfb      	ldrb	r3, [r7, #23]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d107      	bne.n	8006724 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800671a:	893a      	ldrh	r2, [r7, #8]
 800671c:	6879      	ldr	r1, [r7, #4]
 800671e:	4618      	mov	r0, r3
 8006720:	f000 fb26 	bl	8006d70 <USBH_ParseStringDesc>
  }

  return status;
 8006724:	7dfb      	ldrb	r3, [r7, #23]
}
 8006726:	4618      	mov	r0, r3
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	60f8      	str	r0, [r7, #12]
 8006736:	607b      	str	r3, [r7, #4]
 8006738:	460b      	mov	r3, r1
 800673a:	72fb      	strb	r3, [r7, #11]
 800673c:	4613      	mov	r3, r2
 800673e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	789b      	ldrb	r3, [r3, #2]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d11c      	bne.n	8006782 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006748:	7afb      	ldrb	r3, [r7, #11]
 800674a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800674e:	b2da      	uxtb	r2, r3
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2206      	movs	r2, #6
 8006758:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	893a      	ldrh	r2, [r7, #8]
 800675e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006760:	893b      	ldrh	r3, [r7, #8]
 8006762:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800676a:	d104      	bne.n	8006776 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f240 4209 	movw	r2, #1033	; 0x409
 8006772:	829a      	strh	r2, [r3, #20]
 8006774:	e002      	b.n	800677c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8b3a      	ldrh	r2, [r7, #24]
 8006780:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006782:	8b3b      	ldrh	r3, [r7, #24]
 8006784:	461a      	mov	r2, r3
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 fb3f 	bl	8006e0c <USBH_CtlReq>
 800678e:	4603      	mov	r3, r0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	460b      	mov	r3, r1
 80067a2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	789b      	ldrb	r3, [r3, #2]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d10f      	bne.n	80067cc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2205      	movs	r2, #5
 80067b6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80067b8:	78fb      	ldrb	r3, [r7, #3]
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80067cc:	2200      	movs	r2, #0
 80067ce:	2100      	movs	r1, #0
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fb1b 	bl	8006e0c <USBH_CtlReq>
 80067d6:	4603      	mov	r3, r0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	460b      	mov	r3, r1
 80067ea:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	789b      	ldrb	r3, [r3, #2]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d10e      	bne.n	8006812 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2209      	movs	r2, #9
 80067fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	887a      	ldrh	r2, [r7, #2]
 8006804:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006812:	2200      	movs	r2, #0
 8006814:	2100      	movs	r1, #0
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 faf8 	bl	8006e0c <USBH_CtlReq>
 800681c:	4603      	mov	r3, r0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	460b      	mov	r3, r1
 8006830:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	789b      	ldrb	r3, [r3, #2]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d10f      	bne.n	800685a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2203      	movs	r2, #3
 8006844:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006846:	78fb      	ldrb	r3, [r7, #3]
 8006848:	b29a      	uxth	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800685a:	2200      	movs	r2, #0
 800685c:	2100      	movs	r1, #0
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fad4 	bl	8006e0c <USBH_CtlReq>
 8006864:	4603      	mov	r3, r0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b082      	sub	sp, #8
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	460b      	mov	r3, r1
 8006878:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	789b      	ldrb	r3, [r3, #2]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d10f      	bne.n	80068a2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2202      	movs	r2, #2
 8006886:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	b29a      	uxth	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80068a2:	2200      	movs	r2, #0
 80068a4:	2100      	movs	r1, #0
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fab0 	bl	8006e0c <USBH_CtlReq>
 80068ac:	4603      	mov	r3, r0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
	...

080068b8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	4613      	mov	r3, r2
 80068c4:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	781a      	ldrb	r2, [r3, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	785a      	ldrb	r2, [r3, #1]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	3302      	adds	r3, #2
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	b29a      	uxth	r2, r3
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	3303      	adds	r3, #3
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	021b      	lsls	r3, r3, #8
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	4313      	orrs	r3, r2
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	791a      	ldrb	r2, [r3, #4]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	795a      	ldrb	r2, [r3, #5]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	799a      	ldrb	r2, [r3, #6]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	79da      	ldrb	r2, [r3, #7]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	79db      	ldrb	r3, [r3, #7]
 8006916:	2b20      	cmp	r3, #32
 8006918:	dc0f      	bgt.n	800693a <USBH_ParseDevDesc+0x82>
 800691a:	2b08      	cmp	r3, #8
 800691c:	db14      	blt.n	8006948 <USBH_ParseDevDesc+0x90>
 800691e:	3b08      	subs	r3, #8
 8006920:	4a2d      	ldr	r2, [pc, #180]	; (80069d8 <USBH_ParseDevDesc+0x120>)
 8006922:	fa22 f303 	lsr.w	r3, r2, r3
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b00      	cmp	r3, #0
 800692c:	bf14      	ite	ne
 800692e:	2301      	movne	r3, #1
 8006930:	2300      	moveq	r3, #0
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	d102      	bne.n	800693e <USBH_ParseDevDesc+0x86>
 8006938:	e006      	b.n	8006948 <USBH_ParseDevDesc+0x90>
 800693a:	2b40      	cmp	r3, #64	; 0x40
 800693c:	d104      	bne.n	8006948 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	79da      	ldrb	r2, [r3, #7]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	71da      	strb	r2, [r3, #7]
      break;
 8006946:	e003      	b.n	8006950 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2240      	movs	r2, #64	; 0x40
 800694c:	71da      	strb	r2, [r3, #7]
      break;
 800694e:	bf00      	nop
  }

  if (length > 8U)
 8006950:	88fb      	ldrh	r3, [r7, #6]
 8006952:	2b08      	cmp	r3, #8
 8006954:	d939      	bls.n	80069ca <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	3308      	adds	r3, #8
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	b29a      	uxth	r2, r3
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	3309      	adds	r3, #9
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	b29b      	uxth	r3, r3
 8006966:	021b      	lsls	r3, r3, #8
 8006968:	b29b      	uxth	r3, r3
 800696a:	4313      	orrs	r3, r2
 800696c:	b29a      	uxth	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	330a      	adds	r3, #10
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	b29a      	uxth	r2, r3
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	330b      	adds	r3, #11
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	b29b      	uxth	r3, r3
 8006982:	021b      	lsls	r3, r3, #8
 8006984:	b29b      	uxth	r3, r3
 8006986:	4313      	orrs	r3, r2
 8006988:	b29a      	uxth	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	330c      	adds	r3, #12
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	b29a      	uxth	r2, r3
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	330d      	adds	r3, #13
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	b29b      	uxth	r3, r3
 800699e:	021b      	lsls	r3, r3, #8
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	4313      	orrs	r3, r2
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	7b9a      	ldrb	r2, [r3, #14]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	7bda      	ldrb	r2, [r3, #15]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	7c1a      	ldrb	r2, [r3, #16]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	7c5a      	ldrb	r2, [r3, #17]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	745a      	strb	r2, [r3, #17]
  }
}
 80069ca:	bf00      	nop
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	01000101 	.word	0x01000101

080069dc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08c      	sub	sp, #48	; 0x30
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	4613      	mov	r3, r2
 80069e8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80069f0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	781a      	ldrb	r2, [r3, #0]
 8006a10:	6a3b      	ldr	r3, [r7, #32]
 8006a12:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	785a      	ldrb	r2, [r3, #1]
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	3302      	adds	r3, #2
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	3303      	adds	r3, #3
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	021b      	lsls	r3, r3, #8
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	4313      	orrs	r3, r2
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a38:	bf28      	it	cs
 8006a3a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	791a      	ldrb	r2, [r3, #4]
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	795a      	ldrb	r2, [r3, #5]
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	799a      	ldrb	r2, [r3, #6]
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	79da      	ldrb	r2, [r3, #7]
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	7a1a      	ldrb	r2, [r3, #8]
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	2b09      	cmp	r3, #9
 8006a72:	d002      	beq.n	8006a7a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	2209      	movs	r2, #9
 8006a78:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006a7a:	88fb      	ldrh	r3, [r7, #6]
 8006a7c:	2b09      	cmp	r3, #9
 8006a7e:	f240 809d 	bls.w	8006bbc <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8006a82:	2309      	movs	r3, #9
 8006a84:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006a86:	2300      	movs	r3, #0
 8006a88:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006a8a:	e081      	b.n	8006b90 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006a8c:	f107 0316 	add.w	r3, r7, #22
 8006a90:	4619      	mov	r1, r3
 8006a92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a94:	f000 f99f 	bl	8006dd6 <USBH_GetNextDesc>
 8006a98:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8006a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9c:	785b      	ldrb	r3, [r3, #1]
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	d176      	bne.n	8006b90 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8006aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	2b09      	cmp	r3, #9
 8006aa8:	d002      	beq.n	8006ab0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8006aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aac:	2209      	movs	r2, #9
 8006aae:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8006ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ab4:	221a      	movs	r2, #26
 8006ab6:	fb02 f303 	mul.w	r3, r2, r3
 8006aba:	3308      	adds	r3, #8
 8006abc:	6a3a      	ldr	r2, [r7, #32]
 8006abe:	4413      	add	r3, r2
 8006ac0:	3302      	adds	r3, #2
 8006ac2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006ac4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ac6:	69f8      	ldr	r0, [r7, #28]
 8006ac8:	f000 f87e 	bl	8006bc8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006ad6:	e043      	b.n	8006b60 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006ad8:	f107 0316 	add.w	r3, r7, #22
 8006adc:	4619      	mov	r1, r3
 8006ade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ae0:	f000 f979 	bl	8006dd6 <USBH_GetNextDesc>
 8006ae4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae8:	785b      	ldrb	r3, [r3, #1]
 8006aea:	2b05      	cmp	r3, #5
 8006aec:	d138      	bne.n	8006b60 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	795b      	ldrb	r3, [r3, #5]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d10f      	bne.n	8006b16 <USBH_ParseCfgDesc+0x13a>
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	799b      	ldrb	r3, [r3, #6]
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d10b      	bne.n	8006b16 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	79db      	ldrb	r3, [r3, #7]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10f      	bne.n	8006b26 <USBH_ParseCfgDesc+0x14a>
 8006b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	2b09      	cmp	r3, #9
 8006b0c:	d00b      	beq.n	8006b26 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8006b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b10:	2209      	movs	r2, #9
 8006b12:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006b14:	e007      	b.n	8006b26 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8006b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	2b07      	cmp	r3, #7
 8006b1c:	d004      	beq.n	8006b28 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8006b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b20:	2207      	movs	r2, #7
 8006b22:	701a      	strb	r2, [r3, #0]
 8006b24:	e000      	b.n	8006b28 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8006b26:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006b28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b2c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006b30:	3201      	adds	r2, #1
 8006b32:	00d2      	lsls	r2, r2, #3
 8006b34:	211a      	movs	r1, #26
 8006b36:	fb01 f303 	mul.w	r3, r1, r3
 8006b3a:	4413      	add	r3, r2
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	6a3a      	ldr	r2, [r7, #32]
 8006b40:	4413      	add	r3, r2
 8006b42:	3304      	adds	r3, #4
 8006b44:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8006b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b48:	69b9      	ldr	r1, [r7, #24]
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f000 f86b 	bl	8006c26 <USBH_ParseEPDesc>
 8006b50:	4603      	mov	r3, r0
 8006b52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8006b56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	791b      	ldrb	r3, [r3, #4]
 8006b64:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d204      	bcs.n	8006b76 <USBH_ParseCfgDesc+0x19a>
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	885a      	ldrh	r2, [r3, #2]
 8006b70:	8afb      	ldrh	r3, [r7, #22]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d8b0      	bhi.n	8006ad8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	791b      	ldrb	r3, [r3, #4]
 8006b7a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d201      	bcs.n	8006b86 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e01c      	b.n	8006bc0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8006b86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d805      	bhi.n	8006ba4 <USBH_ParseCfgDesc+0x1c8>
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	885a      	ldrh	r2, [r3, #2]
 8006b9c:	8afb      	ldrh	r3, [r7, #22]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	f63f af74 	bhi.w	8006a8c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	791b      	ldrb	r3, [r3, #4]
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	bf28      	it	cs
 8006bac:	2302      	movcs	r3, #2
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d201      	bcs.n	8006bbc <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e001      	b.n	8006bc0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8006bbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3730      	adds	r7, #48	; 0x30
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	781a      	ldrb	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	785a      	ldrb	r2, [r3, #1]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	789a      	ldrb	r2, [r3, #2]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	78da      	ldrb	r2, [r3, #3]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	791a      	ldrb	r2, [r3, #4]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	795a      	ldrb	r2, [r3, #5]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	799a      	ldrb	r2, [r3, #6]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	79da      	ldrb	r2, [r3, #7]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	7a1a      	ldrb	r2, [r3, #8]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	721a      	strb	r2, [r3, #8]
}
 8006c1a:	bf00      	nop
 8006c1c:	370c      	adds	r7, #12
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b087      	sub	sp, #28
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	60f8      	str	r0, [r7, #12]
 8006c2e:	60b9      	str	r1, [r7, #8]
 8006c30:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	781a      	ldrb	r2, [r3, #0]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	785a      	ldrb	r2, [r3, #1]
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	789a      	ldrb	r2, [r3, #2]
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	78da      	ldrb	r2, [r3, #3]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	3304      	adds	r3, #4
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	3305      	adds	r3, #5
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	021b      	lsls	r3, r3, #8
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	b29a      	uxth	r2, r3
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	799a      	ldrb	r2, [r3, #6]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	889b      	ldrh	r3, [r3, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d102      	bne.n	8006c88 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8006c82:	2303      	movs	r3, #3
 8006c84:	75fb      	strb	r3, [r7, #23]
 8006c86:	e033      	b.n	8006cf0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	889b      	ldrh	r3, [r3, #4]
 8006c8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006c90:	f023 0307 	bic.w	r3, r3, #7
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	889b      	ldrh	r3, [r3, #4]
 8006c9e:	b21a      	sxth	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3304      	adds	r3, #4
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	b299      	uxth	r1, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	3305      	adds	r3, #5
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	021b      	lsls	r3, r3, #8
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	430b      	orrs	r3, r1
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d110      	bne.n	8006ce2 <USBH_ParseEPDesc+0xbc>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	b299      	uxth	r1, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	3305      	adds	r3, #5
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	021b      	lsls	r3, r3, #8
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	430b      	orrs	r3, r1
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	b21b      	sxth	r3, r3
 8006cda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cde:	b21b      	sxth	r3, r3
 8006ce0:	e001      	b.n	8006ce6 <USBH_ParseEPDesc+0xc0>
 8006ce2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	b21b      	sxth	r3, r3
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d116      	bne.n	8006d28 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	78db      	ldrb	r3, [r3, #3]
 8006cfe:	f003 0303 	and.w	r3, r3, #3
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d005      	beq.n	8006d12 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	78db      	ldrb	r3, [r3, #3]
 8006d0a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	d127      	bne.n	8006d62 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	799b      	ldrb	r3, [r3, #6]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d003      	beq.n	8006d22 <USBH_ParseEPDesc+0xfc>
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	799b      	ldrb	r3, [r3, #6]
 8006d1e:	2b10      	cmp	r3, #16
 8006d20:	d91f      	bls.n	8006d62 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006d22:	2303      	movs	r3, #3
 8006d24:	75fb      	strb	r3, [r7, #23]
 8006d26:	e01c      	b.n	8006d62 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	78db      	ldrb	r3, [r3, #3]
 8006d2c:	f003 0303 	and.w	r3, r3, #3
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d10a      	bne.n	8006d4a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	799b      	ldrb	r3, [r3, #6]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d003      	beq.n	8006d44 <USBH_ParseEPDesc+0x11e>
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	799b      	ldrb	r3, [r3, #6]
 8006d40:	2b10      	cmp	r3, #16
 8006d42:	d90e      	bls.n	8006d62 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006d44:	2303      	movs	r3, #3
 8006d46:	75fb      	strb	r3, [r7, #23]
 8006d48:	e00b      	b.n	8006d62 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	78db      	ldrb	r3, [r3, #3]
 8006d4e:	f003 0303 	and.w	r3, r3, #3
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	d105      	bne.n	8006d62 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	799b      	ldrb	r3, [r3, #6]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8006d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	371c      	adds	r7, #28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b087      	sub	sp, #28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	3301      	adds	r3, #1
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d120      	bne.n	8006dca <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	1e9a      	subs	r2, r3, #2
 8006d8e:	88fb      	ldrh	r3, [r7, #6]
 8006d90:	4293      	cmp	r3, r2
 8006d92:	bf28      	it	cs
 8006d94:	4613      	movcs	r3, r2
 8006d96:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	3302      	adds	r3, #2
 8006d9c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006d9e:	2300      	movs	r3, #0
 8006da0:	82fb      	strh	r3, [r7, #22]
 8006da2:	e00b      	b.n	8006dbc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006da4:	8afb      	ldrh	r3, [r7, #22]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	4413      	add	r3, r2
 8006daa:	781a      	ldrb	r2, [r3, #0]
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	3301      	adds	r3, #1
 8006db4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006db6:	8afb      	ldrh	r3, [r7, #22]
 8006db8:	3302      	adds	r3, #2
 8006dba:	82fb      	strh	r3, [r7, #22]
 8006dbc:	8afa      	ldrh	r2, [r7, #22]
 8006dbe:	8abb      	ldrh	r3, [r7, #20]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d3ef      	bcc.n	8006da4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	701a      	strb	r2, [r3, #0]
  }
}
 8006dca:	bf00      	nop
 8006dcc:	371c      	adds	r7, #28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b085      	sub	sp, #20
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	881a      	ldrh	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	4413      	add	r3, r2
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b086      	sub	sp, #24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	4613      	mov	r3, r2
 8006e18:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	789b      	ldrb	r3, [r3, #2]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d002      	beq.n	8006e2c <USBH_CtlReq+0x20>
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d00f      	beq.n	8006e4a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006e2a:	e027      	b.n	8006e7c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	88fa      	ldrh	r2, [r7, #6]
 8006e36:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2202      	movs	r2, #2
 8006e42:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006e44:	2301      	movs	r3, #1
 8006e46:	75fb      	strb	r3, [r7, #23]
      break;
 8006e48:	e018      	b.n	8006e7c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f000 f81c 	bl	8006e88 <USBH_HandleControl>
 8006e50:	4603      	mov	r3, r0
 8006e52:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006e54:	7dfb      	ldrb	r3, [r7, #23]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <USBH_CtlReq+0x54>
 8006e5a:	7dfb      	ldrb	r3, [r7, #23]
 8006e5c:	2b03      	cmp	r3, #3
 8006e5e:	d106      	bne.n	8006e6e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2201      	movs	r2, #1
 8006e64:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	761a      	strb	r2, [r3, #24]
      break;
 8006e6c:	e005      	b.n	8006e7a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d102      	bne.n	8006e7a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2201      	movs	r2, #1
 8006e78:	709a      	strb	r2, [r3, #2]
      break;
 8006e7a:	bf00      	nop
  }
  return status;
 8006e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af02      	add	r7, sp, #8
 8006e8e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006e90:	2301      	movs	r3, #1
 8006e92:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e94:	2300      	movs	r3, #0
 8006e96:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	7e1b      	ldrb	r3, [r3, #24]
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	2b0a      	cmp	r3, #10
 8006ea0:	f200 8156 	bhi.w	8007150 <USBH_HandleControl+0x2c8>
 8006ea4:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <USBH_HandleControl+0x24>)
 8006ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eaa:	bf00      	nop
 8006eac:	08006ed9 	.word	0x08006ed9
 8006eb0:	08006ef3 	.word	0x08006ef3
 8006eb4:	08006f5d 	.word	0x08006f5d
 8006eb8:	08006f83 	.word	0x08006f83
 8006ebc:	08006fbb 	.word	0x08006fbb
 8006ec0:	08006fe5 	.word	0x08006fe5
 8006ec4:	08007037 	.word	0x08007037
 8006ec8:	08007059 	.word	0x08007059
 8006ecc:	08007095 	.word	0x08007095
 8006ed0:	080070bb 	.word	0x080070bb
 8006ed4:	080070f9 	.word	0x080070f9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f103 0110 	add.w	r1, r3, #16
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	795b      	ldrb	r3, [r3, #5]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f943 	bl	8007170 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2202      	movs	r2, #2
 8006eee:	761a      	strb	r2, [r3, #24]
      break;
 8006ef0:	e139      	b.n	8007166 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	795b      	ldrb	r3, [r3, #5]
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fcc5 	bl	8007888 <USBH_LL_GetURBState>
 8006efe:	4603      	mov	r3, r0
 8006f00:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006f02:	7bbb      	ldrb	r3, [r7, #14]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d11e      	bne.n	8006f46 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	7c1b      	ldrb	r3, [r3, #16]
 8006f0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f10:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	8adb      	ldrh	r3, [r3, #22]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00a      	beq.n	8006f30 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006f1a:	7b7b      	ldrb	r3, [r7, #13]
 8006f1c:	2b80      	cmp	r3, #128	; 0x80
 8006f1e:	d103      	bne.n	8006f28 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2203      	movs	r2, #3
 8006f24:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006f26:	e115      	b.n	8007154 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2205      	movs	r2, #5
 8006f2c:	761a      	strb	r2, [r3, #24]
      break;
 8006f2e:	e111      	b.n	8007154 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006f30:	7b7b      	ldrb	r3, [r7, #13]
 8006f32:	2b80      	cmp	r3, #128	; 0x80
 8006f34:	d103      	bne.n	8006f3e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2209      	movs	r2, #9
 8006f3a:	761a      	strb	r2, [r3, #24]
      break;
 8006f3c:	e10a      	b.n	8007154 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2207      	movs	r2, #7
 8006f42:	761a      	strb	r2, [r3, #24]
      break;
 8006f44:	e106      	b.n	8007154 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006f46:	7bbb      	ldrb	r3, [r7, #14]
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	d003      	beq.n	8006f54 <USBH_HandleControl+0xcc>
 8006f4c:	7bbb      	ldrb	r3, [r7, #14]
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	f040 8100 	bne.w	8007154 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	220b      	movs	r2, #11
 8006f58:	761a      	strb	r2, [r3, #24]
      break;
 8006f5a:	e0fb      	b.n	8007154 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6899      	ldr	r1, [r3, #8]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	899a      	ldrh	r2, [r3, #12]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	791b      	ldrb	r3, [r3, #4]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f93a 	bl	80071ee <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2204      	movs	r2, #4
 8006f7e:	761a      	strb	r2, [r3, #24]
      break;
 8006f80:	e0f1      	b.n	8007166 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	791b      	ldrb	r3, [r3, #4]
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fc7d 	bl	8007888 <USBH_LL_GetURBState>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006f92:	7bbb      	ldrb	r3, [r7, #14]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d102      	bne.n	8006f9e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2209      	movs	r2, #9
 8006f9c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006f9e:	7bbb      	ldrb	r3, [r7, #14]
 8006fa0:	2b05      	cmp	r3, #5
 8006fa2:	d102      	bne.n	8006faa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006fa8:	e0d6      	b.n	8007158 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006faa:	7bbb      	ldrb	r3, [r7, #14]
 8006fac:	2b04      	cmp	r3, #4
 8006fae:	f040 80d3 	bne.w	8007158 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	220b      	movs	r2, #11
 8006fb6:	761a      	strb	r2, [r3, #24]
      break;
 8006fb8:	e0ce      	b.n	8007158 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6899      	ldr	r1, [r3, #8]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	899a      	ldrh	r2, [r3, #12]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	795b      	ldrb	r3, [r3, #5]
 8006fc6:	2001      	movs	r0, #1
 8006fc8:	9000      	str	r0, [sp, #0]
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f8ea 	bl	80071a4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2206      	movs	r2, #6
 8006fe0:	761a      	strb	r2, [r3, #24]
      break;
 8006fe2:	e0c0      	b.n	8007166 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	795b      	ldrb	r3, [r3, #5]
 8006fe8:	4619      	mov	r1, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fc4c 	bl	8007888 <USBH_LL_GetURBState>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d103      	bne.n	8007002 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2207      	movs	r2, #7
 8006ffe:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007000:	e0ac      	b.n	800715c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007002:	7bbb      	ldrb	r3, [r7, #14]
 8007004:	2b05      	cmp	r3, #5
 8007006:	d105      	bne.n	8007014 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	220c      	movs	r2, #12
 800700c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800700e:	2303      	movs	r3, #3
 8007010:	73fb      	strb	r3, [r7, #15]
      break;
 8007012:	e0a3      	b.n	800715c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007014:	7bbb      	ldrb	r3, [r7, #14]
 8007016:	2b02      	cmp	r3, #2
 8007018:	d103      	bne.n	8007022 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2205      	movs	r2, #5
 800701e:	761a      	strb	r2, [r3, #24]
      break;
 8007020:	e09c      	b.n	800715c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007022:	7bbb      	ldrb	r3, [r7, #14]
 8007024:	2b04      	cmp	r3, #4
 8007026:	f040 8099 	bne.w	800715c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	220b      	movs	r2, #11
 800702e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007030:	2302      	movs	r3, #2
 8007032:	73fb      	strb	r3, [r7, #15]
      break;
 8007034:	e092      	b.n	800715c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	791b      	ldrb	r3, [r3, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	2100      	movs	r1, #0
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f8d5 	bl	80071ee <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800704a:	b29a      	uxth	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2208      	movs	r2, #8
 8007054:	761a      	strb	r2, [r3, #24]

      break;
 8007056:	e086      	b.n	8007166 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	791b      	ldrb	r3, [r3, #4]
 800705c:	4619      	mov	r1, r3
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fc12 	bl	8007888 <USBH_LL_GetURBState>
 8007064:	4603      	mov	r3, r0
 8007066:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007068:	7bbb      	ldrb	r3, [r7, #14]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d105      	bne.n	800707a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	220d      	movs	r2, #13
 8007072:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007074:	2300      	movs	r3, #0
 8007076:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007078:	e072      	b.n	8007160 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800707a:	7bbb      	ldrb	r3, [r7, #14]
 800707c:	2b04      	cmp	r3, #4
 800707e:	d103      	bne.n	8007088 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	220b      	movs	r2, #11
 8007084:	761a      	strb	r2, [r3, #24]
      break;
 8007086:	e06b      	b.n	8007160 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007088:	7bbb      	ldrb	r3, [r7, #14]
 800708a:	2b05      	cmp	r3, #5
 800708c:	d168      	bne.n	8007160 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800708e:	2303      	movs	r3, #3
 8007090:	73fb      	strb	r3, [r7, #15]
      break;
 8007092:	e065      	b.n	8007160 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	795b      	ldrb	r3, [r3, #5]
 8007098:	2201      	movs	r2, #1
 800709a:	9200      	str	r2, [sp, #0]
 800709c:	2200      	movs	r2, #0
 800709e:	2100      	movs	r1, #0
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f87f 	bl	80071a4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	220a      	movs	r2, #10
 80070b6:	761a      	strb	r2, [r3, #24]
      break;
 80070b8:	e055      	b.n	8007166 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	795b      	ldrb	r3, [r3, #5]
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fbe1 	bl	8007888 <USBH_LL_GetURBState>
 80070c6:	4603      	mov	r3, r0
 80070c8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80070ca:	7bbb      	ldrb	r3, [r7, #14]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d105      	bne.n	80070dc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	220d      	movs	r2, #13
 80070d8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80070da:	e043      	b.n	8007164 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80070dc:	7bbb      	ldrb	r3, [r7, #14]
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d103      	bne.n	80070ea <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2209      	movs	r2, #9
 80070e6:	761a      	strb	r2, [r3, #24]
      break;
 80070e8:	e03c      	b.n	8007164 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80070ea:	7bbb      	ldrb	r3, [r7, #14]
 80070ec:	2b04      	cmp	r3, #4
 80070ee:	d139      	bne.n	8007164 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	220b      	movs	r2, #11
 80070f4:	761a      	strb	r2, [r3, #24]
      break;
 80070f6:	e035      	b.n	8007164 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	7e5b      	ldrb	r3, [r3, #25]
 80070fc:	3301      	adds	r3, #1
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	765a      	strb	r2, [r3, #25]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	7e5b      	ldrb	r3, [r3, #25]
 8007108:	2b02      	cmp	r3, #2
 800710a:	d806      	bhi.n	800711a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007118:	e025      	b.n	8007166 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007120:	2106      	movs	r1, #6
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	795b      	ldrb	r3, [r3, #5]
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 f90c 	bl	8007350 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	791b      	ldrb	r3, [r3, #4]
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f906 	bl	8007350 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800714a:	2302      	movs	r3, #2
 800714c:	73fb      	strb	r3, [r7, #15]
      break;
 800714e:	e00a      	b.n	8007166 <USBH_HandleControl+0x2de>

    default:
      break;
 8007150:	bf00      	nop
 8007152:	e008      	b.n	8007166 <USBH_HandleControl+0x2de>
      break;
 8007154:	bf00      	nop
 8007156:	e006      	b.n	8007166 <USBH_HandleControl+0x2de>
      break;
 8007158:	bf00      	nop
 800715a:	e004      	b.n	8007166 <USBH_HandleControl+0x2de>
      break;
 800715c:	bf00      	nop
 800715e:	e002      	b.n	8007166 <USBH_HandleControl+0x2de>
      break;
 8007160:	bf00      	nop
 8007162:	e000      	b.n	8007166 <USBH_HandleControl+0x2de>
      break;
 8007164:	bf00      	nop
  }

  return status;
 8007166:	7bfb      	ldrb	r3, [r7, #15]
}
 8007168:	4618      	mov	r0, r3
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b088      	sub	sp, #32
 8007174:	af04      	add	r7, sp, #16
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	4613      	mov	r3, r2
 800717c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800717e:	79f9      	ldrb	r1, [r7, #7]
 8007180:	2300      	movs	r3, #0
 8007182:	9303      	str	r3, [sp, #12]
 8007184:	2308      	movs	r3, #8
 8007186:	9302      	str	r3, [sp, #8]
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	9301      	str	r3, [sp, #4]
 800718c:	2300      	movs	r3, #0
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	2300      	movs	r3, #0
 8007192:	2200      	movs	r2, #0
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 fb46 	bl	8007826 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b088      	sub	sp, #32
 80071a8:	af04      	add	r7, sp, #16
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	4611      	mov	r1, r2
 80071b0:	461a      	mov	r2, r3
 80071b2:	460b      	mov	r3, r1
 80071b4:	80fb      	strh	r3, [r7, #6]
 80071b6:	4613      	mov	r3, r2
 80071b8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d001      	beq.n	80071c8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80071c8:	7979      	ldrb	r1, [r7, #5]
 80071ca:	7e3b      	ldrb	r3, [r7, #24]
 80071cc:	9303      	str	r3, [sp, #12]
 80071ce:	88fb      	ldrh	r3, [r7, #6]
 80071d0:	9302      	str	r3, [sp, #8]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	9301      	str	r3, [sp, #4]
 80071d6:	2301      	movs	r3, #1
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	2300      	movs	r3, #0
 80071dc:	2200      	movs	r2, #0
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f000 fb21 	bl	8007826 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b088      	sub	sp, #32
 80071f2:	af04      	add	r7, sp, #16
 80071f4:	60f8      	str	r0, [r7, #12]
 80071f6:	60b9      	str	r1, [r7, #8]
 80071f8:	4611      	mov	r1, r2
 80071fa:	461a      	mov	r2, r3
 80071fc:	460b      	mov	r3, r1
 80071fe:	80fb      	strh	r3, [r7, #6]
 8007200:	4613      	mov	r3, r2
 8007202:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007204:	7979      	ldrb	r1, [r7, #5]
 8007206:	2300      	movs	r3, #0
 8007208:	9303      	str	r3, [sp, #12]
 800720a:	88fb      	ldrh	r3, [r7, #6]
 800720c:	9302      	str	r3, [sp, #8]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	9301      	str	r3, [sp, #4]
 8007212:	2301      	movs	r3, #1
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	2300      	movs	r3, #0
 8007218:	2201      	movs	r2, #1
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f000 fb03 	bl	8007826 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007220:	2300      	movs	r3, #0

}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b088      	sub	sp, #32
 800722e:	af04      	add	r7, sp, #16
 8007230:	60f8      	str	r0, [r7, #12]
 8007232:	60b9      	str	r1, [r7, #8]
 8007234:	4611      	mov	r1, r2
 8007236:	461a      	mov	r2, r3
 8007238:	460b      	mov	r3, r1
 800723a:	80fb      	strh	r3, [r7, #6]
 800723c:	4613      	mov	r3, r2
 800723e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007246:	2b00      	cmp	r3, #0
 8007248:	d001      	beq.n	800724e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800724a:	2300      	movs	r3, #0
 800724c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800724e:	7979      	ldrb	r1, [r7, #5]
 8007250:	7e3b      	ldrb	r3, [r7, #24]
 8007252:	9303      	str	r3, [sp, #12]
 8007254:	88fb      	ldrh	r3, [r7, #6]
 8007256:	9302      	str	r3, [sp, #8]
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	9301      	str	r3, [sp, #4]
 800725c:	2301      	movs	r3, #1
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	2302      	movs	r3, #2
 8007262:	2200      	movs	r2, #0
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f000 fade 	bl	8007826 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b088      	sub	sp, #32
 8007278:	af04      	add	r7, sp, #16
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	4611      	mov	r1, r2
 8007280:	461a      	mov	r2, r3
 8007282:	460b      	mov	r3, r1
 8007284:	80fb      	strh	r3, [r7, #6]
 8007286:	4613      	mov	r3, r2
 8007288:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800728a:	7979      	ldrb	r1, [r7, #5]
 800728c:	2300      	movs	r3, #0
 800728e:	9303      	str	r3, [sp, #12]
 8007290:	88fb      	ldrh	r3, [r7, #6]
 8007292:	9302      	str	r3, [sp, #8]
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	9301      	str	r3, [sp, #4]
 8007298:	2301      	movs	r3, #1
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	2302      	movs	r3, #2
 800729e:	2201      	movs	r2, #1
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 fac0 	bl	8007826 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af04      	add	r7, sp, #16
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	4608      	mov	r0, r1
 80072ba:	4611      	mov	r1, r2
 80072bc:	461a      	mov	r2, r3
 80072be:	4603      	mov	r3, r0
 80072c0:	70fb      	strb	r3, [r7, #3]
 80072c2:	460b      	mov	r3, r1
 80072c4:	70bb      	strb	r3, [r7, #2]
 80072c6:	4613      	mov	r3, r2
 80072c8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80072ca:	7878      	ldrb	r0, [r7, #1]
 80072cc:	78ba      	ldrb	r2, [r7, #2]
 80072ce:	78f9      	ldrb	r1, [r7, #3]
 80072d0:	8b3b      	ldrh	r3, [r7, #24]
 80072d2:	9302      	str	r3, [sp, #8]
 80072d4:	7d3b      	ldrb	r3, [r7, #20]
 80072d6:	9301      	str	r3, [sp, #4]
 80072d8:	7c3b      	ldrb	r3, [r7, #16]
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	4603      	mov	r3, r0
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fa53 	bl	800778a <USBH_LL_OpenPipe>

  return USBH_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b082      	sub	sp, #8
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	460b      	mov	r3, r1
 80072f8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80072fa:	78fb      	ldrb	r3, [r7, #3]
 80072fc:	4619      	mov	r1, r3
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 fa72 	bl	80077e8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b084      	sub	sp, #16
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	460b      	mov	r3, r1
 8007318:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f836 	bl	800738c <USBH_GetFreePipe>
 8007320:	4603      	mov	r3, r0
 8007322:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007324:	89fb      	ldrh	r3, [r7, #14]
 8007326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800732a:	4293      	cmp	r3, r2
 800732c:	d00a      	beq.n	8007344 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800732e:	78fa      	ldrb	r2, [r7, #3]
 8007330:	89fb      	ldrh	r3, [r7, #14]
 8007332:	f003 030f 	and.w	r3, r3, #15
 8007336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800733a:	6879      	ldr	r1, [r7, #4]
 800733c:	33e0      	adds	r3, #224	; 0xe0
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	440b      	add	r3, r1
 8007342:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007344:	89fb      	ldrh	r3, [r7, #14]
 8007346:	b2db      	uxtb	r3, r3
}
 8007348:	4618      	mov	r0, r3
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	460b      	mov	r3, r1
 800735a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800735c:	78fb      	ldrb	r3, [r7, #3]
 800735e:	2b0f      	cmp	r3, #15
 8007360:	d80d      	bhi.n	800737e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007362:	78fb      	ldrb	r3, [r7, #3]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	33e0      	adds	r3, #224	; 0xe0
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	78fb      	ldrb	r3, [r7, #3]
 8007370:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007374:	6879      	ldr	r1, [r7, #4]
 8007376:	33e0      	adds	r3, #224	; 0xe0
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	440b      	add	r3, r1
 800737c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007398:	2300      	movs	r3, #0
 800739a:	73fb      	strb	r3, [r7, #15]
 800739c:	e00f      	b.n	80073be <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800739e:	7bfb      	ldrb	r3, [r7, #15]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	33e0      	adds	r3, #224	; 0xe0
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d102      	bne.n	80073b8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	e007      	b.n	80073c8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
 80073ba:	3301      	adds	r3, #1
 80073bc:	73fb      	strb	r3, [r7, #15]
 80073be:	7bfb      	ldrb	r3, [r7, #15]
 80073c0:	2b0f      	cmp	r3, #15
 80073c2:	d9ec      	bls.n	800739e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80073c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80073d8:	2201      	movs	r2, #1
 80073da:	490e      	ldr	r1, [pc, #56]	; (8007414 <MX_USB_HOST_Init+0x40>)
 80073dc:	480e      	ldr	r0, [pc, #56]	; (8007418 <MX_USB_HOST_Init+0x44>)
 80073de:	f7fe fba5 	bl	8005b2c <USBH_Init>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80073e8:	f7f9 faa2 	bl	8000930 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80073ec:	490b      	ldr	r1, [pc, #44]	; (800741c <MX_USB_HOST_Init+0x48>)
 80073ee:	480a      	ldr	r0, [pc, #40]	; (8007418 <MX_USB_HOST_Init+0x44>)
 80073f0:	f7fe fc2a 	bl	8005c48 <USBH_RegisterClass>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d001      	beq.n	80073fe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80073fa:	f7f9 fa99 	bl	8000930 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80073fe:	4806      	ldr	r0, [pc, #24]	; (8007418 <MX_USB_HOST_Init+0x44>)
 8007400:	f7fe fcae 	bl	8005d60 <USBH_Start>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800740a:	f7f9 fa91 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800740e:	bf00      	nop
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	08007435 	.word	0x08007435
 8007418:	20000194 	.word	0x20000194
 800741c:	2000000c 	.word	0x2000000c

08007420 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007424:	4802      	ldr	r0, [pc, #8]	; (8007430 <MX_USB_HOST_Process+0x10>)
 8007426:	f7fe fcab 	bl	8005d80 <USBH_Process>
}
 800742a:	bf00      	nop
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop
 8007430:	20000194 	.word	0x20000194

08007434 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007434:	b480      	push	{r7}
 8007436:	b083      	sub	sp, #12
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	460b      	mov	r3, r1
 800743e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007440:	78fb      	ldrb	r3, [r7, #3]
 8007442:	3b01      	subs	r3, #1
 8007444:	2b04      	cmp	r3, #4
 8007446:	d819      	bhi.n	800747c <USBH_UserProcess+0x48>
 8007448:	a201      	add	r2, pc, #4	; (adr r2, 8007450 <USBH_UserProcess+0x1c>)
 800744a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800744e:	bf00      	nop
 8007450:	0800747d 	.word	0x0800747d
 8007454:	0800746d 	.word	0x0800746d
 8007458:	0800747d 	.word	0x0800747d
 800745c:	08007475 	.word	0x08007475
 8007460:	08007465 	.word	0x08007465
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007464:	4b09      	ldr	r3, [pc, #36]	; (800748c <USBH_UserProcess+0x58>)
 8007466:	2203      	movs	r2, #3
 8007468:	701a      	strb	r2, [r3, #0]
  break;
 800746a:	e008      	b.n	800747e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800746c:	4b07      	ldr	r3, [pc, #28]	; (800748c <USBH_UserProcess+0x58>)
 800746e:	2202      	movs	r2, #2
 8007470:	701a      	strb	r2, [r3, #0]
  break;
 8007472:	e004      	b.n	800747e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007474:	4b05      	ldr	r3, [pc, #20]	; (800748c <USBH_UserProcess+0x58>)
 8007476:	2201      	movs	r2, #1
 8007478:	701a      	strb	r2, [r3, #0]
  break;
 800747a:	e000      	b.n	800747e <USBH_UserProcess+0x4a>

  default:
  break;
 800747c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800747e:	bf00      	nop
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	2000056c 	.word	0x2000056c

08007490 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b08a      	sub	sp, #40	; 0x28
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007498:	f107 0314 	add.w	r3, r7, #20
 800749c:	2200      	movs	r2, #0
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	605a      	str	r2, [r3, #4]
 80074a2:	609a      	str	r2, [r3, #8]
 80074a4:	60da      	str	r2, [r3, #12]
 80074a6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074b0:	d147      	bne.n	8007542 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074b2:	2300      	movs	r3, #0
 80074b4:	613b      	str	r3, [r7, #16]
 80074b6:	4b25      	ldr	r3, [pc, #148]	; (800754c <HAL_HCD_MspInit+0xbc>)
 80074b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ba:	4a24      	ldr	r2, [pc, #144]	; (800754c <HAL_HCD_MspInit+0xbc>)
 80074bc:	f043 0301 	orr.w	r3, r3, #1
 80074c0:	6313      	str	r3, [r2, #48]	; 0x30
 80074c2:	4b22      	ldr	r3, [pc, #136]	; (800754c <HAL_HCD_MspInit+0xbc>)
 80074c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	613b      	str	r3, [r7, #16]
 80074cc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80074ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074d4:	2300      	movs	r3, #0
 80074d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074d8:	2300      	movs	r3, #0
 80074da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80074dc:	f107 0314 	add.w	r3, r7, #20
 80074e0:	4619      	mov	r1, r3
 80074e2:	481b      	ldr	r0, [pc, #108]	; (8007550 <HAL_HCD_MspInit+0xc0>)
 80074e4:	f7f9 fdb0 	bl	8001048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80074e8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80074ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074ee:	2302      	movs	r3, #2
 80074f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074f6:	2300      	movs	r3, #0
 80074f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80074fa:	230a      	movs	r3, #10
 80074fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074fe:	f107 0314 	add.w	r3, r7, #20
 8007502:	4619      	mov	r1, r3
 8007504:	4812      	ldr	r0, [pc, #72]	; (8007550 <HAL_HCD_MspInit+0xc0>)
 8007506:	f7f9 fd9f 	bl	8001048 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800750a:	4b10      	ldr	r3, [pc, #64]	; (800754c <HAL_HCD_MspInit+0xbc>)
 800750c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800750e:	4a0f      	ldr	r2, [pc, #60]	; (800754c <HAL_HCD_MspInit+0xbc>)
 8007510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007514:	6353      	str	r3, [r2, #52]	; 0x34
 8007516:	2300      	movs	r3, #0
 8007518:	60fb      	str	r3, [r7, #12]
 800751a:	4b0c      	ldr	r3, [pc, #48]	; (800754c <HAL_HCD_MspInit+0xbc>)
 800751c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751e:	4a0b      	ldr	r2, [pc, #44]	; (800754c <HAL_HCD_MspInit+0xbc>)
 8007520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007524:	6453      	str	r3, [r2, #68]	; 0x44
 8007526:	4b09      	ldr	r3, [pc, #36]	; (800754c <HAL_HCD_MspInit+0xbc>)
 8007528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800752a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800752e:	60fb      	str	r3, [r7, #12]
 8007530:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007532:	2200      	movs	r2, #0
 8007534:	2100      	movs	r1, #0
 8007536:	2043      	movs	r0, #67	; 0x43
 8007538:	f7f9 fd4f 	bl	8000fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800753c:	2043      	movs	r0, #67	; 0x43
 800753e:	f7f9 fd68 	bl	8001012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007542:	bf00      	nop
 8007544:	3728      	adds	r7, #40	; 0x28
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	40023800 	.word	0x40023800
 8007550:	40020000 	.word	0x40020000

08007554 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007562:	4618      	mov	r0, r3
 8007564:	f7fe ffeb 	bl	800653e <USBH_LL_IncTimer>
}
 8007568:	bf00      	nop
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800757e:	4618      	mov	r0, r3
 8007580:	f7ff f823 	bl	80065ca <USBH_LL_Connect>
}
 8007584:	bf00      	nop
 8007586:	3708      	adds	r7, #8
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800759a:	4618      	mov	r0, r3
 800759c:	f7ff f82c 	bl	80065f8 <USBH_LL_Disconnect>
}
 80075a0:	bf00      	nop
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	460b      	mov	r3, r1
 80075b2:	70fb      	strb	r3, [r7, #3]
 80075b4:	4613      	mov	r3, r2
 80075b6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7fe ffdd 	bl	8006592 <USBH_LL_PortEnabled>
}
 80075d8:	bf00      	nop
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fe ffdd 	bl	80065ae <USBH_LL_PortDisabled>
}
 80075f4:	bf00      	nop
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800760a:	2b01      	cmp	r3, #1
 800760c:	d12a      	bne.n	8007664 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800760e:	4a18      	ldr	r2, [pc, #96]	; (8007670 <USBH_LL_Init+0x74>)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a15      	ldr	r2, [pc, #84]	; (8007670 <USBH_LL_Init+0x74>)
 800761a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800761e:	4b14      	ldr	r3, [pc, #80]	; (8007670 <USBH_LL_Init+0x74>)
 8007620:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007624:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007626:	4b12      	ldr	r3, [pc, #72]	; (8007670 <USBH_LL_Init+0x74>)
 8007628:	2208      	movs	r2, #8
 800762a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800762c:	4b10      	ldr	r3, [pc, #64]	; (8007670 <USBH_LL_Init+0x74>)
 800762e:	2201      	movs	r2, #1
 8007630:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007632:	4b0f      	ldr	r3, [pc, #60]	; (8007670 <USBH_LL_Init+0x74>)
 8007634:	2200      	movs	r2, #0
 8007636:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007638:	4b0d      	ldr	r3, [pc, #52]	; (8007670 <USBH_LL_Init+0x74>)
 800763a:	2202      	movs	r2, #2
 800763c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800763e:	4b0c      	ldr	r3, [pc, #48]	; (8007670 <USBH_LL_Init+0x74>)
 8007640:	2200      	movs	r2, #0
 8007642:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007644:	480a      	ldr	r0, [pc, #40]	; (8007670 <USBH_LL_Init+0x74>)
 8007646:	f7f9 feb4 	bl	80013b2 <HAL_HCD_Init>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007650:	f7f9 f96e 	bl	8000930 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007654:	4806      	ldr	r0, [pc, #24]	; (8007670 <USBH_LL_Init+0x74>)
 8007656:	f7fa fa98 	bl	8001b8a <HAL_HCD_GetCurrentFrame>
 800765a:	4603      	mov	r3, r0
 800765c:	4619      	mov	r1, r3
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f7fe ff5e 	bl	8006520 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20000570 	.word	0x20000570

08007674 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007680:	2300      	movs	r3, #0
 8007682:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800768a:	4618      	mov	r0, r3
 800768c:	f7fa fa07 	bl	8001a9e <HAL_HCD_Start>
 8007690:	4603      	mov	r3, r0
 8007692:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007694:	7bfb      	ldrb	r3, [r7, #15]
 8007696:	4618      	mov	r0, r3
 8007698:	f000 f95c 	bl	8007954 <USBH_Get_USB_Status>
 800769c:	4603      	mov	r3, r0
 800769e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b084      	sub	sp, #16
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076b2:	2300      	movs	r3, #0
 80076b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7fa fa0f 	bl	8001ae4 <HAL_HCD_Stop>
 80076c6:	4603      	mov	r3, r0
 80076c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80076ca:	7bfb      	ldrb	r3, [r7, #15]
 80076cc:	4618      	mov	r0, r3
 80076ce:	f000 f941 	bl	8007954 <USBH_Get_USB_Status>
 80076d2:	4603      	mov	r3, r0
 80076d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3710      	adds	r7, #16
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80076e8:	2301      	movs	r3, #1
 80076ea:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fa fa57 	bl	8001ba6 <HAL_HCD_GetCurrentSpeed>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d00c      	beq.n	8007718 <USBH_LL_GetSpeed+0x38>
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d80d      	bhi.n	800771e <USBH_LL_GetSpeed+0x3e>
 8007702:	2b00      	cmp	r3, #0
 8007704:	d002      	beq.n	800770c <USBH_LL_GetSpeed+0x2c>
 8007706:	2b01      	cmp	r3, #1
 8007708:	d003      	beq.n	8007712 <USBH_LL_GetSpeed+0x32>
 800770a:	e008      	b.n	800771e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800770c:	2300      	movs	r3, #0
 800770e:	73fb      	strb	r3, [r7, #15]
    break;
 8007710:	e008      	b.n	8007724 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007712:	2301      	movs	r3, #1
 8007714:	73fb      	strb	r3, [r7, #15]
    break;
 8007716:	e005      	b.n	8007724 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007718:	2302      	movs	r3, #2
 800771a:	73fb      	strb	r3, [r7, #15]
    break;
 800771c:	e002      	b.n	8007724 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800771e:	2301      	movs	r3, #1
 8007720:	73fb      	strb	r3, [r7, #15]
    break;
 8007722:	bf00      	nop
  }
  return  speed;
 8007724:	7bfb      	ldrb	r3, [r7, #15]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b084      	sub	sp, #16
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007744:	4618      	mov	r0, r3
 8007746:	f7fa f9ea 	bl	8001b1e <HAL_HCD_ResetPort>
 800774a:	4603      	mov	r3, r0
 800774c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800774e:	7bfb      	ldrb	r3, [r7, #15]
 8007750:	4618      	mov	r0, r3
 8007752:	f000 f8ff 	bl	8007954 <USBH_Get_USB_Status>
 8007756:	4603      	mov	r3, r0
 8007758:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800775a:	7bbb      	ldrb	r3, [r7, #14]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	460b      	mov	r3, r1
 800776e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007776:	78fa      	ldrb	r2, [r7, #3]
 8007778:	4611      	mov	r1, r2
 800777a:	4618      	mov	r0, r3
 800777c:	f7fa f9f1 	bl	8001b62 <HAL_HCD_HC_GetXferCount>
 8007780:	4603      	mov	r3, r0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800778a:	b590      	push	{r4, r7, lr}
 800778c:	b089      	sub	sp, #36	; 0x24
 800778e:	af04      	add	r7, sp, #16
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	4608      	mov	r0, r1
 8007794:	4611      	mov	r1, r2
 8007796:	461a      	mov	r2, r3
 8007798:	4603      	mov	r3, r0
 800779a:	70fb      	strb	r3, [r7, #3]
 800779c:	460b      	mov	r3, r1
 800779e:	70bb      	strb	r3, [r7, #2]
 80077a0:	4613      	mov	r3, r2
 80077a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077a4:	2300      	movs	r3, #0
 80077a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077a8:	2300      	movs	r3, #0
 80077aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80077b2:	787c      	ldrb	r4, [r7, #1]
 80077b4:	78ba      	ldrb	r2, [r7, #2]
 80077b6:	78f9      	ldrb	r1, [r7, #3]
 80077b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80077ba:	9302      	str	r3, [sp, #8]
 80077bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80077c0:	9301      	str	r3, [sp, #4]
 80077c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	4623      	mov	r3, r4
 80077ca:	f7f9 fe54 	bl	8001476 <HAL_HCD_HC_Init>
 80077ce:	4603      	mov	r3, r0
 80077d0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80077d2:	7bfb      	ldrb	r3, [r7, #15]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 f8bd 	bl	8007954 <USBH_Get_USB_Status>
 80077da:	4603      	mov	r3, r0
 80077dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077de:	7bbb      	ldrb	r3, [r7, #14]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd90      	pop	{r4, r7, pc}

080077e8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077f4:	2300      	movs	r3, #0
 80077f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007802:	78fa      	ldrb	r2, [r7, #3]
 8007804:	4611      	mov	r1, r2
 8007806:	4618      	mov	r0, r3
 8007808:	f7f9 fec4 	bl	8001594 <HAL_HCD_HC_Halt>
 800780c:	4603      	mov	r3, r0
 800780e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007810:	7bfb      	ldrb	r3, [r7, #15]
 8007812:	4618      	mov	r0, r3
 8007814:	f000 f89e 	bl	8007954 <USBH_Get_USB_Status>
 8007818:	4603      	mov	r3, r0
 800781a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800781c:	7bbb      	ldrb	r3, [r7, #14]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007826:	b590      	push	{r4, r7, lr}
 8007828:	b089      	sub	sp, #36	; 0x24
 800782a:	af04      	add	r7, sp, #16
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	4608      	mov	r0, r1
 8007830:	4611      	mov	r1, r2
 8007832:	461a      	mov	r2, r3
 8007834:	4603      	mov	r3, r0
 8007836:	70fb      	strb	r3, [r7, #3]
 8007838:	460b      	mov	r3, r1
 800783a:	70bb      	strb	r3, [r7, #2]
 800783c:	4613      	mov	r3, r2
 800783e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007840:	2300      	movs	r3, #0
 8007842:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007844:	2300      	movs	r3, #0
 8007846:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800784e:	787c      	ldrb	r4, [r7, #1]
 8007850:	78ba      	ldrb	r2, [r7, #2]
 8007852:	78f9      	ldrb	r1, [r7, #3]
 8007854:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007858:	9303      	str	r3, [sp, #12]
 800785a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800785c:	9302      	str	r3, [sp, #8]
 800785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007860:	9301      	str	r3, [sp, #4]
 8007862:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007866:	9300      	str	r3, [sp, #0]
 8007868:	4623      	mov	r3, r4
 800786a:	f7f9 feb7 	bl	80015dc <HAL_HCD_HC_SubmitRequest>
 800786e:	4603      	mov	r3, r0
 8007870:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007872:	7bfb      	ldrb	r3, [r7, #15]
 8007874:	4618      	mov	r0, r3
 8007876:	f000 f86d 	bl	8007954 <USBH_Get_USB_Status>
 800787a:	4603      	mov	r3, r0
 800787c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800787e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007880:	4618      	mov	r0, r3
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	bd90      	pop	{r4, r7, pc}

08007888 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	460b      	mov	r3, r1
 8007892:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800789a:	78fa      	ldrb	r2, [r7, #3]
 800789c:	4611      	mov	r1, r2
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fa f94b 	bl	8001b3a <HAL_HCD_HC_GetURBState>
 80078a4:	4603      	mov	r3, r0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b082      	sub	sp, #8
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	460b      	mov	r3, r1
 80078b8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d103      	bne.n	80078cc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80078c4:	78fb      	ldrb	r3, [r7, #3]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 f870 	bl	80079ac <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80078cc:	20c8      	movs	r0, #200	; 0xc8
 80078ce:	f7f9 fa85 	bl	8000ddc <HAL_Delay>
  return USBH_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3708      	adds	r7, #8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	460b      	mov	r3, r1
 80078e6:	70fb      	strb	r3, [r7, #3]
 80078e8:	4613      	mov	r3, r2
 80078ea:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80078f2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80078f4:	78fb      	ldrb	r3, [r7, #3]
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	212c      	movs	r1, #44	; 0x2c
 80078fa:	fb01 f303 	mul.w	r3, r1, r3
 80078fe:	4413      	add	r3, r2
 8007900:	333b      	adds	r3, #59	; 0x3b
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d009      	beq.n	800791c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007908:	78fb      	ldrb	r3, [r7, #3]
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	212c      	movs	r1, #44	; 0x2c
 800790e:	fb01 f303 	mul.w	r3, r1, r3
 8007912:	4413      	add	r3, r2
 8007914:	3354      	adds	r3, #84	; 0x54
 8007916:	78ba      	ldrb	r2, [r7, #2]
 8007918:	701a      	strb	r2, [r3, #0]
 800791a:	e008      	b.n	800792e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800791c:	78fb      	ldrb	r3, [r7, #3]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	212c      	movs	r1, #44	; 0x2c
 8007922:	fb01 f303 	mul.w	r3, r1, r3
 8007926:	4413      	add	r3, r2
 8007928:	3355      	adds	r3, #85	; 0x55
 800792a:	78ba      	ldrb	r2, [r7, #2]
 800792c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3714      	adds	r7, #20
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7f9 fa49 	bl	8000ddc <HAL_Delay>
}
 800794a:	bf00      	nop
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
	...

08007954 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	4603      	mov	r3, r0
 800795c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007962:	79fb      	ldrb	r3, [r7, #7]
 8007964:	2b03      	cmp	r3, #3
 8007966:	d817      	bhi.n	8007998 <USBH_Get_USB_Status+0x44>
 8007968:	a201      	add	r2, pc, #4	; (adr r2, 8007970 <USBH_Get_USB_Status+0x1c>)
 800796a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796e:	bf00      	nop
 8007970:	08007981 	.word	0x08007981
 8007974:	08007987 	.word	0x08007987
 8007978:	0800798d 	.word	0x0800798d
 800797c:	08007993 	.word	0x08007993
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	73fb      	strb	r3, [r7, #15]
    break;
 8007984:	e00b      	b.n	800799e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007986:	2302      	movs	r3, #2
 8007988:	73fb      	strb	r3, [r7, #15]
    break;
 800798a:	e008      	b.n	800799e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800798c:	2301      	movs	r3, #1
 800798e:	73fb      	strb	r3, [r7, #15]
    break;
 8007990:	e005      	b.n	800799e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007992:	2302      	movs	r3, #2
 8007994:	73fb      	strb	r3, [r7, #15]
    break;
 8007996:	e002      	b.n	800799e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007998:	2302      	movs	r3, #2
 800799a:	73fb      	strb	r3, [r7, #15]
    break;
 800799c:	bf00      	nop
  }
  return usb_status;
 800799e:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	4603      	mov	r3, r0
 80079b4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80079b6:	79fb      	ldrb	r3, [r7, #7]
 80079b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80079ba:	79fb      	ldrb	r3, [r7, #7]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d102      	bne.n	80079c6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80079c0:	2300      	movs	r3, #0
 80079c2:	73fb      	strb	r3, [r7, #15]
 80079c4:	e001      	b.n	80079ca <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80079c6:	2301      	movs	r3, #1
 80079c8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80079ca:	7bfb      	ldrb	r3, [r7, #15]
 80079cc:	461a      	mov	r2, r3
 80079ce:	2101      	movs	r1, #1
 80079d0:	4803      	ldr	r0, [pc, #12]	; (80079e0 <MX_DriverVbusFS+0x34>)
 80079d2:	f7f9 fcd5 	bl	8001380 <HAL_GPIO_WritePin>
}
 80079d6:	bf00      	nop
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	40020800 	.word	0x40020800

080079e4 <malloc>:
 80079e4:	4b02      	ldr	r3, [pc, #8]	; (80079f0 <malloc+0xc>)
 80079e6:	4601      	mov	r1, r0
 80079e8:	6818      	ldr	r0, [r3, #0]
 80079ea:	f000 b82b 	b.w	8007a44 <_malloc_r>
 80079ee:	bf00      	nop
 80079f0:	20000078 	.word	0x20000078

080079f4 <free>:
 80079f4:	4b02      	ldr	r3, [pc, #8]	; (8007a00 <free+0xc>)
 80079f6:	4601      	mov	r1, r0
 80079f8:	6818      	ldr	r0, [r3, #0]
 80079fa:	f000 b8f3 	b.w	8007be4 <_free_r>
 80079fe:	bf00      	nop
 8007a00:	20000078 	.word	0x20000078

08007a04 <sbrk_aligned>:
 8007a04:	b570      	push	{r4, r5, r6, lr}
 8007a06:	4e0e      	ldr	r6, [pc, #56]	; (8007a40 <sbrk_aligned+0x3c>)
 8007a08:	460c      	mov	r4, r1
 8007a0a:	6831      	ldr	r1, [r6, #0]
 8007a0c:	4605      	mov	r5, r0
 8007a0e:	b911      	cbnz	r1, 8007a16 <sbrk_aligned+0x12>
 8007a10:	f000 f8ac 	bl	8007b6c <_sbrk_r>
 8007a14:	6030      	str	r0, [r6, #0]
 8007a16:	4621      	mov	r1, r4
 8007a18:	4628      	mov	r0, r5
 8007a1a:	f000 f8a7 	bl	8007b6c <_sbrk_r>
 8007a1e:	1c43      	adds	r3, r0, #1
 8007a20:	d00a      	beq.n	8007a38 <sbrk_aligned+0x34>
 8007a22:	1cc4      	adds	r4, r0, #3
 8007a24:	f024 0403 	bic.w	r4, r4, #3
 8007a28:	42a0      	cmp	r0, r4
 8007a2a:	d007      	beq.n	8007a3c <sbrk_aligned+0x38>
 8007a2c:	1a21      	subs	r1, r4, r0
 8007a2e:	4628      	mov	r0, r5
 8007a30:	f000 f89c 	bl	8007b6c <_sbrk_r>
 8007a34:	3001      	adds	r0, #1
 8007a36:	d101      	bne.n	8007a3c <sbrk_aligned+0x38>
 8007a38:	f04f 34ff 	mov.w	r4, #4294967295
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	bd70      	pop	{r4, r5, r6, pc}
 8007a40:	20000878 	.word	0x20000878

08007a44 <_malloc_r>:
 8007a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a48:	1ccd      	adds	r5, r1, #3
 8007a4a:	f025 0503 	bic.w	r5, r5, #3
 8007a4e:	3508      	adds	r5, #8
 8007a50:	2d0c      	cmp	r5, #12
 8007a52:	bf38      	it	cc
 8007a54:	250c      	movcc	r5, #12
 8007a56:	2d00      	cmp	r5, #0
 8007a58:	4607      	mov	r7, r0
 8007a5a:	db01      	blt.n	8007a60 <_malloc_r+0x1c>
 8007a5c:	42a9      	cmp	r1, r5
 8007a5e:	d905      	bls.n	8007a6c <_malloc_r+0x28>
 8007a60:	230c      	movs	r3, #12
 8007a62:	603b      	str	r3, [r7, #0]
 8007a64:	2600      	movs	r6, #0
 8007a66:	4630      	mov	r0, r6
 8007a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b40 <_malloc_r+0xfc>
 8007a70:	f000 f868 	bl	8007b44 <__malloc_lock>
 8007a74:	f8d8 3000 	ldr.w	r3, [r8]
 8007a78:	461c      	mov	r4, r3
 8007a7a:	bb5c      	cbnz	r4, 8007ad4 <_malloc_r+0x90>
 8007a7c:	4629      	mov	r1, r5
 8007a7e:	4638      	mov	r0, r7
 8007a80:	f7ff ffc0 	bl	8007a04 <sbrk_aligned>
 8007a84:	1c43      	adds	r3, r0, #1
 8007a86:	4604      	mov	r4, r0
 8007a88:	d155      	bne.n	8007b36 <_malloc_r+0xf2>
 8007a8a:	f8d8 4000 	ldr.w	r4, [r8]
 8007a8e:	4626      	mov	r6, r4
 8007a90:	2e00      	cmp	r6, #0
 8007a92:	d145      	bne.n	8007b20 <_malloc_r+0xdc>
 8007a94:	2c00      	cmp	r4, #0
 8007a96:	d048      	beq.n	8007b2a <_malloc_r+0xe6>
 8007a98:	6823      	ldr	r3, [r4, #0]
 8007a9a:	4631      	mov	r1, r6
 8007a9c:	4638      	mov	r0, r7
 8007a9e:	eb04 0903 	add.w	r9, r4, r3
 8007aa2:	f000 f863 	bl	8007b6c <_sbrk_r>
 8007aa6:	4581      	cmp	r9, r0
 8007aa8:	d13f      	bne.n	8007b2a <_malloc_r+0xe6>
 8007aaa:	6821      	ldr	r1, [r4, #0]
 8007aac:	1a6d      	subs	r5, r5, r1
 8007aae:	4629      	mov	r1, r5
 8007ab0:	4638      	mov	r0, r7
 8007ab2:	f7ff ffa7 	bl	8007a04 <sbrk_aligned>
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	d037      	beq.n	8007b2a <_malloc_r+0xe6>
 8007aba:	6823      	ldr	r3, [r4, #0]
 8007abc:	442b      	add	r3, r5
 8007abe:	6023      	str	r3, [r4, #0]
 8007ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d038      	beq.n	8007b3a <_malloc_r+0xf6>
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	42a2      	cmp	r2, r4
 8007acc:	d12b      	bne.n	8007b26 <_malloc_r+0xe2>
 8007ace:	2200      	movs	r2, #0
 8007ad0:	605a      	str	r2, [r3, #4]
 8007ad2:	e00f      	b.n	8007af4 <_malloc_r+0xb0>
 8007ad4:	6822      	ldr	r2, [r4, #0]
 8007ad6:	1b52      	subs	r2, r2, r5
 8007ad8:	d41f      	bmi.n	8007b1a <_malloc_r+0xd6>
 8007ada:	2a0b      	cmp	r2, #11
 8007adc:	d917      	bls.n	8007b0e <_malloc_r+0xca>
 8007ade:	1961      	adds	r1, r4, r5
 8007ae0:	42a3      	cmp	r3, r4
 8007ae2:	6025      	str	r5, [r4, #0]
 8007ae4:	bf18      	it	ne
 8007ae6:	6059      	strne	r1, [r3, #4]
 8007ae8:	6863      	ldr	r3, [r4, #4]
 8007aea:	bf08      	it	eq
 8007aec:	f8c8 1000 	streq.w	r1, [r8]
 8007af0:	5162      	str	r2, [r4, r5]
 8007af2:	604b      	str	r3, [r1, #4]
 8007af4:	4638      	mov	r0, r7
 8007af6:	f104 060b 	add.w	r6, r4, #11
 8007afa:	f000 f829 	bl	8007b50 <__malloc_unlock>
 8007afe:	f026 0607 	bic.w	r6, r6, #7
 8007b02:	1d23      	adds	r3, r4, #4
 8007b04:	1af2      	subs	r2, r6, r3
 8007b06:	d0ae      	beq.n	8007a66 <_malloc_r+0x22>
 8007b08:	1b9b      	subs	r3, r3, r6
 8007b0a:	50a3      	str	r3, [r4, r2]
 8007b0c:	e7ab      	b.n	8007a66 <_malloc_r+0x22>
 8007b0e:	42a3      	cmp	r3, r4
 8007b10:	6862      	ldr	r2, [r4, #4]
 8007b12:	d1dd      	bne.n	8007ad0 <_malloc_r+0x8c>
 8007b14:	f8c8 2000 	str.w	r2, [r8]
 8007b18:	e7ec      	b.n	8007af4 <_malloc_r+0xb0>
 8007b1a:	4623      	mov	r3, r4
 8007b1c:	6864      	ldr	r4, [r4, #4]
 8007b1e:	e7ac      	b.n	8007a7a <_malloc_r+0x36>
 8007b20:	4634      	mov	r4, r6
 8007b22:	6876      	ldr	r6, [r6, #4]
 8007b24:	e7b4      	b.n	8007a90 <_malloc_r+0x4c>
 8007b26:	4613      	mov	r3, r2
 8007b28:	e7cc      	b.n	8007ac4 <_malloc_r+0x80>
 8007b2a:	230c      	movs	r3, #12
 8007b2c:	603b      	str	r3, [r7, #0]
 8007b2e:	4638      	mov	r0, r7
 8007b30:	f000 f80e 	bl	8007b50 <__malloc_unlock>
 8007b34:	e797      	b.n	8007a66 <_malloc_r+0x22>
 8007b36:	6025      	str	r5, [r4, #0]
 8007b38:	e7dc      	b.n	8007af4 <_malloc_r+0xb0>
 8007b3a:	605b      	str	r3, [r3, #4]
 8007b3c:	deff      	udf	#255	; 0xff
 8007b3e:	bf00      	nop
 8007b40:	20000874 	.word	0x20000874

08007b44 <__malloc_lock>:
 8007b44:	4801      	ldr	r0, [pc, #4]	; (8007b4c <__malloc_lock+0x8>)
 8007b46:	f000 b84b 	b.w	8007be0 <__retarget_lock_acquire_recursive>
 8007b4a:	bf00      	nop
 8007b4c:	200009b8 	.word	0x200009b8

08007b50 <__malloc_unlock>:
 8007b50:	4801      	ldr	r0, [pc, #4]	; (8007b58 <__malloc_unlock+0x8>)
 8007b52:	f000 b846 	b.w	8007be2 <__retarget_lock_release_recursive>
 8007b56:	bf00      	nop
 8007b58:	200009b8 	.word	0x200009b8

08007b5c <memset>:
 8007b5c:	4402      	add	r2, r0
 8007b5e:	4603      	mov	r3, r0
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d100      	bne.n	8007b66 <memset+0xa>
 8007b64:	4770      	bx	lr
 8007b66:	f803 1b01 	strb.w	r1, [r3], #1
 8007b6a:	e7f9      	b.n	8007b60 <memset+0x4>

08007b6c <_sbrk_r>:
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	4d06      	ldr	r5, [pc, #24]	; (8007b88 <_sbrk_r+0x1c>)
 8007b70:	2300      	movs	r3, #0
 8007b72:	4604      	mov	r4, r0
 8007b74:	4608      	mov	r0, r1
 8007b76:	602b      	str	r3, [r5, #0]
 8007b78:	f7f9 f84c 	bl	8000c14 <_sbrk>
 8007b7c:	1c43      	adds	r3, r0, #1
 8007b7e:	d102      	bne.n	8007b86 <_sbrk_r+0x1a>
 8007b80:	682b      	ldr	r3, [r5, #0]
 8007b82:	b103      	cbz	r3, 8007b86 <_sbrk_r+0x1a>
 8007b84:	6023      	str	r3, [r4, #0]
 8007b86:	bd38      	pop	{r3, r4, r5, pc}
 8007b88:	200009b4 	.word	0x200009b4

08007b8c <__errno>:
 8007b8c:	4b01      	ldr	r3, [pc, #4]	; (8007b94 <__errno+0x8>)
 8007b8e:	6818      	ldr	r0, [r3, #0]
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	20000078 	.word	0x20000078

08007b98 <__libc_init_array>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	4d0d      	ldr	r5, [pc, #52]	; (8007bd0 <__libc_init_array+0x38>)
 8007b9c:	4c0d      	ldr	r4, [pc, #52]	; (8007bd4 <__libc_init_array+0x3c>)
 8007b9e:	1b64      	subs	r4, r4, r5
 8007ba0:	10a4      	asrs	r4, r4, #2
 8007ba2:	2600      	movs	r6, #0
 8007ba4:	42a6      	cmp	r6, r4
 8007ba6:	d109      	bne.n	8007bbc <__libc_init_array+0x24>
 8007ba8:	4d0b      	ldr	r5, [pc, #44]	; (8007bd8 <__libc_init_array+0x40>)
 8007baa:	4c0c      	ldr	r4, [pc, #48]	; (8007bdc <__libc_init_array+0x44>)
 8007bac:	f000 f866 	bl	8007c7c <_init>
 8007bb0:	1b64      	subs	r4, r4, r5
 8007bb2:	10a4      	asrs	r4, r4, #2
 8007bb4:	2600      	movs	r6, #0
 8007bb6:	42a6      	cmp	r6, r4
 8007bb8:	d105      	bne.n	8007bc6 <__libc_init_array+0x2e>
 8007bba:	bd70      	pop	{r4, r5, r6, pc}
 8007bbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bc0:	4798      	blx	r3
 8007bc2:	3601      	adds	r6, #1
 8007bc4:	e7ee      	b.n	8007ba4 <__libc_init_array+0xc>
 8007bc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bca:	4798      	blx	r3
 8007bcc:	3601      	adds	r6, #1
 8007bce:	e7f2      	b.n	8007bb6 <__libc_init_array+0x1e>
 8007bd0:	08007cb8 	.word	0x08007cb8
 8007bd4:	08007cb8 	.word	0x08007cb8
 8007bd8:	08007cb8 	.word	0x08007cb8
 8007bdc:	08007cbc 	.word	0x08007cbc

08007be0 <__retarget_lock_acquire_recursive>:
 8007be0:	4770      	bx	lr

08007be2 <__retarget_lock_release_recursive>:
 8007be2:	4770      	bx	lr

08007be4 <_free_r>:
 8007be4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007be6:	2900      	cmp	r1, #0
 8007be8:	d044      	beq.n	8007c74 <_free_r+0x90>
 8007bea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bee:	9001      	str	r0, [sp, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f1a1 0404 	sub.w	r4, r1, #4
 8007bf6:	bfb8      	it	lt
 8007bf8:	18e4      	addlt	r4, r4, r3
 8007bfa:	f7ff ffa3 	bl	8007b44 <__malloc_lock>
 8007bfe:	4a1e      	ldr	r2, [pc, #120]	; (8007c78 <_free_r+0x94>)
 8007c00:	9801      	ldr	r0, [sp, #4]
 8007c02:	6813      	ldr	r3, [r2, #0]
 8007c04:	b933      	cbnz	r3, 8007c14 <_free_r+0x30>
 8007c06:	6063      	str	r3, [r4, #4]
 8007c08:	6014      	str	r4, [r2, #0]
 8007c0a:	b003      	add	sp, #12
 8007c0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c10:	f7ff bf9e 	b.w	8007b50 <__malloc_unlock>
 8007c14:	42a3      	cmp	r3, r4
 8007c16:	d908      	bls.n	8007c2a <_free_r+0x46>
 8007c18:	6825      	ldr	r5, [r4, #0]
 8007c1a:	1961      	adds	r1, r4, r5
 8007c1c:	428b      	cmp	r3, r1
 8007c1e:	bf01      	itttt	eq
 8007c20:	6819      	ldreq	r1, [r3, #0]
 8007c22:	685b      	ldreq	r3, [r3, #4]
 8007c24:	1949      	addeq	r1, r1, r5
 8007c26:	6021      	streq	r1, [r4, #0]
 8007c28:	e7ed      	b.n	8007c06 <_free_r+0x22>
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	b10b      	cbz	r3, 8007c34 <_free_r+0x50>
 8007c30:	42a3      	cmp	r3, r4
 8007c32:	d9fa      	bls.n	8007c2a <_free_r+0x46>
 8007c34:	6811      	ldr	r1, [r2, #0]
 8007c36:	1855      	adds	r5, r2, r1
 8007c38:	42a5      	cmp	r5, r4
 8007c3a:	d10b      	bne.n	8007c54 <_free_r+0x70>
 8007c3c:	6824      	ldr	r4, [r4, #0]
 8007c3e:	4421      	add	r1, r4
 8007c40:	1854      	adds	r4, r2, r1
 8007c42:	42a3      	cmp	r3, r4
 8007c44:	6011      	str	r1, [r2, #0]
 8007c46:	d1e0      	bne.n	8007c0a <_free_r+0x26>
 8007c48:	681c      	ldr	r4, [r3, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	6053      	str	r3, [r2, #4]
 8007c4e:	440c      	add	r4, r1
 8007c50:	6014      	str	r4, [r2, #0]
 8007c52:	e7da      	b.n	8007c0a <_free_r+0x26>
 8007c54:	d902      	bls.n	8007c5c <_free_r+0x78>
 8007c56:	230c      	movs	r3, #12
 8007c58:	6003      	str	r3, [r0, #0]
 8007c5a:	e7d6      	b.n	8007c0a <_free_r+0x26>
 8007c5c:	6825      	ldr	r5, [r4, #0]
 8007c5e:	1961      	adds	r1, r4, r5
 8007c60:	428b      	cmp	r3, r1
 8007c62:	bf04      	itt	eq
 8007c64:	6819      	ldreq	r1, [r3, #0]
 8007c66:	685b      	ldreq	r3, [r3, #4]
 8007c68:	6063      	str	r3, [r4, #4]
 8007c6a:	bf04      	itt	eq
 8007c6c:	1949      	addeq	r1, r1, r5
 8007c6e:	6021      	streq	r1, [r4, #0]
 8007c70:	6054      	str	r4, [r2, #4]
 8007c72:	e7ca      	b.n	8007c0a <_free_r+0x26>
 8007c74:	b003      	add	sp, #12
 8007c76:	bd30      	pop	{r4, r5, pc}
 8007c78:	20000874 	.word	0x20000874

08007c7c <_init>:
 8007c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7e:	bf00      	nop
 8007c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c82:	bc08      	pop	{r3}
 8007c84:	469e      	mov	lr, r3
 8007c86:	4770      	bx	lr

08007c88 <_fini>:
 8007c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8a:	bf00      	nop
 8007c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c8e:	bc08      	pop	{r3}
 8007c90:	469e      	mov	lr, r3
 8007c92:	4770      	bx	lr
